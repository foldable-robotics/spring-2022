[{"categories":null,"contents":"Introduction The purpose of this module is to develop a model for your actuator.\nSteps Decide as a team what kind of actuator you will use. This semester you may choose any actuator or energy storage device you like, including A stretched or wound spring A preloaded beam A deformed elastic shape A motor, gear motor, or RC Servo Shape Memory Alloy \u0026hellip; (see the professor to get something else approved) Develop a model which accurately captures the principal dynamics of the actuator. For metal springs, you will need to know the spring constant as well as any nonlinear hard limits (as in when a compression spring bottoms out). For elastic materials, you may need to capture nonlinear stress/strain or force/displacement curve rate-dependent loss (can be modeled as viscous damping) For motors, you will need to include: Coil resistance \u0026amp; inductance inertia input voltage gear ratio Measure or identify as many of the parameters as you can using scientific methods. Develop an experiment that measures force and/or motion of a system powered by your actuator, while controlling for or reducing the impact of unmodeled effects. include a picture and/or video of the experiment. run the experiment and collect data on how it moves when the actuator is activated. Include the actuator model developed above within a system-level model that includes the rest of your experiment include the masses or inertias that your actuator is connected to include other system compliance and damping effects as needed include the kinematics of the surrounding mechanism (such as the lever arm, external gear ratio, pulley diameter, etc) if there are unknown parameters, consider using an optimization step to identify the parameters Plot and compare the results of your model with simulation results. (Optional) If necessary, use optimization to improve your parameter estimates, and re-match your model to a second set of experimental data. Discussion Write a detailed description of how you accomplisehd each of the steps above. Be sure to include discussion on the following points:\nAssumptions you made Ways you eliminated unmodeled effects in the experiment Model elements you decided to approximate or simplify Description of your experiment Description of your system-level model Analysis of the quality of your model to capture the dynamics of your actuator, as well as a discussion of any optimization used to better fit your model. Rubric Description Points Actator Model 20 Experimental Setup 20 System Model 20 Discussion 20 Figures 10 Images 10 Total 100 ","permalink":"https://foldable-robotics.github.io/modules/validation/actuator-fitting/","tags":null,"title":"Actuator Fitting"},{"categories":null,"contents":"These are the Windows 10 instructions. Different operating systems, including older versions of Windows act slightly differently. Please find OS specific instructions\nOpen file explorer Right click on \u0026ldquo;This PC\u0026rdquo;\u0026ndash;\u0026gt;\u0026ldquo;properties\u0026rdquo; On the left menu select \u0026ldquo;advanced system settings\u0026rdquo; Click on \u0026ldquo;Environment Variables\u0026hellip;\u0026rdquo; A dialog box will pop up with two windows. The top window is the user-level settings, while the lower box controls globals settings. In the lower window, find the PATH variable, and click \u0026ldquo;Edit\u0026hellip;\u0026rdquo; To add a new directory, navigate to the end of the list (lowest priority in the PATH search to minimize the impact of a conflict) Select \u0026ldquo;New\u0026rdquo; to add a new line. Either browse or paste in a path in the format C:\\path\\to\\folder External Resources External Tutorial ","permalink":"https://foldable-robotics.github.io/modules/misc/add-folder-to-system-path/","tags":null,"title":"Add Folder to System Path"},{"categories":null,"contents":"There are a number of advanced data types native to Python. These include\ntuples lists sets dicts Tuples Tuples are an ordered, immutable, list of objects. You cannot change the order of a tuple; neither can you add, or remove elements. Tuples, therefore, are particularly useful when you want to pass around sets of things whose ordering doesn\u0026rsquo;t change, like sets of x-y-z, coordinates. Because they are static and immutable, tuples don\u0026rsquo;t carry the same memory overhead as lists.\ntuples are defined using parentheses, as below.\ntup1 = (0,1) tup1 (0, 1) tup2 = (3,-2) tup2 (3, -2) tup3 = tuple(range(5)) tup3 (0, 1, 2, 3, 4) tuple of tuples\ntup4 = (tup2,tup1) tup4 ((3, -2), (0, 1)) you can use the sorted method to create a sorted list of tuples\nsorted(tup4) [(0, 1), (3, -2)] you can also pick how you sort based on a lambda method\nsorted(tup4,key=lambda x:x[1]) [(3, -2), (0, 1)] accessing tuples\ntup4[0] (3, -2) tup4[0][1] -2 Lists Lists are mutable, ordered, sets of objects. You can add and remove elements from lists, which makes them handy for holding objects whose elements change, even if the list stays the same.\nLists are defined using square brackets, as below:\nlist1 = [-1,1,2,3,4] list1 [-1, 1, 2, 3, 4] List classes contain many more methods than tuples for organizing and sorting the elements. Some can be seen below.\nlist1.append(5) list1 [-1, 1, 2, 3, 4, 5] list1.extend([6,7,8,9,0b101101,11.0]) list1 [-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 45, 11.0] result = list1.pop(0) list1 [1, 2, 3, 4, 5, 6, 7, 8, 9, 45, 11.0] list1.insert(0,14) list1 [14, 1, 2, 3, 4, 5, 6, 7, 8, 9, 45, 11.0] ii = list1.count(1) ii 1 ii=list1.index(7) ii 7 list1.remove(7) list1 [14, 1, 2, 3, 4, 5, 6, 8, 9, 45, 11.0] sorted(list1) [1, 2, 3, 4, 5, 6, 8, 9, 11.0, 14, 45] list1 [14, 1, 2, 3, 4, 5, 6, 8, 9, 45, 11.0] list1.sort() list1 [1, 2, 3, 4, 5, 6, 8, 9, 11.0, 14, 45] #list1.clear() Indexing and Slicing Like tuples, you can select one or more elements from a list; the result of indexing a single element is the object itself. The result of indexing multiple elements from a list is another list\nlist1 [1, 2, 3, 4, 5, 6, 8, 9, 11.0, 14, 45] You can select one element by indicating its number in the list in order to select it. Of note is that Python uses zero-based indexing, which means that the first element of a list is accessed with\nlist1[0] 1 To select a range of elements (called slicing), you can provide two nubmers, separated by a colon. Because of Python\u0026rsquo;s zero-based indexing, using [2:4] selects, for example, a range of elements starting with the third element, up to (but not including) the fifth element.\nlist1[2:4] [3, 4] Omitting the first element indicates you start at the beginning of the list\nlist1[:4] [1, 2, 3, 4] Omitting the second element indicates you go to the end of the list.\nlist1[4:] [5, 6, 8, 9, 11.0, 14, 45] Adding an optional third elements indicates the \u0026ldquo;step-size\u0026rdquo;. [::2], for example, means starting at the end of a list, going to the end, but selecting one of every two elements.\nlist1[::2] [1, 3, 5, 8, 11.0, 45] Negative numbers indicate an element\u0026rsquo;s position from the end of the list. To slice all elements in reverse order, use\nlist1[-1::-1] [45, 14, 11.0, 9, 8, 6, 5, 4, 3, 2, 1] #list1.clear() understanding types\nisinstance(list1,list) True list1 [1, 2, 3, 4, 5, 6, 8, 9, 11.0, 14, 45] Dicts A dict or dictionary, is an unorderd set of key:value pairs. The key is unique, and can be used to obtain the value within a dictionary. Dictionaries are useful when values are stored in an unordered fashion, but are accessible through a unique identifier.\ndicts are defined using curly brackets. You can index into dictionaries using square brackets, just like lists or tuples.\ndict1 = {} dict1[\u0026#39;key1\u0026#39;]=123.45 dict1[\u0026#39;coordinate 1\u0026#39;] = tup1 dict1[\u0026#39;coordinate 2\u0026#39;] = tup2 dict1[\u0026#39;all_coordinates\u0026#39;] = list1 dict1 {'key1': 123.45, 'coordinate 1': (0, 1), 'coordinate 2': (3, -2), 'all_coordinates': [1, 2, 3, 4, 5, 6, 8, 9, 11.0, 14, 45]} dict1[\u0026#39;coordinate 1\u0026#39;] (0, 1) Methods You can obtain all key:value pairs using the items() method\ndict1.items() dict_items([('key1', 123.45), ('coordinate 1', (0, 1)), ('coordinate 2', (3, -2)), ('all_coordinates', [1, 2, 3, 4, 5, 6, 8, 9, 11.0, 14, 45])]) you can also obtain all the keys within a dictionary,\ndict1.keys() dict_keys(['key1', 'coordinate 1', 'coordinate 2', 'all_coordinates']) or all the values\ndict1.values() dict_values([123.45, (0, 1), (3, -2), [1, 2, 3, 4, 5, 6, 8, 9, 11.0, 14, 45]]) Sets A set is an unordered collection of unique values. You can use sets to perform set math on collections of things in Python. Sets also use curly brackets in their definition.\na = {3,2,1} print(a) print(type(a)) {1, 2, 3} \u0026lt;class 'set'\u0026gt; b={2,3,4,3,2,2,3,2,4,2,3,4} b {2, 3, 4} You can operate on sets using their methods (union, intersection, difference), or with shortcut operators, like \u0026amp; (and/intersection) and |(or/union).\na\u0026amp;b {2, 3} a|b {1, 2, 3, 4} Strings \u0026amp; Formatting Strings are ordered collections of characters, with many many methods. See the official python documentation for more details. One of my favorite methods, though, is the format() method. This permits you to mix variables containing complex string or numerical data into a string at specficied locations. See the example below\nfloat1 = 12.345 \u0026#39;the value of the first element is {0:07.1f}, as an int: {1:07d}\u0026#39;.format(float1,int(float1)) 'the value of the first element is 00012.3, as an int: 0000012' ","permalink":"https://foldable-robotics.github.io/modules/python/generated/advanced-data-types/","tags":null,"title":"Advanced Data Types"},{"categories":null,"contents":"import sympy q = sympy.Symbol(\u0026#39;q\u0026#39;) d = sympy.Symbol(\u0026#39;d\u0026#39;) L = sympy.Symbol(\u0026#39;L\u0026#39;) P = sympy.Symbol(\u0026#39;P\u0026#39;) h = sympy.Symbol(\u0026#39;h\u0026#39;) b = sympy.Symbol(\u0026#39;b\u0026#39;) E = sympy.Symbol(\u0026#39;E\u0026#39;) x = sympy.Symbol(\u0026#39;x\u0026#39;) subs = {} #subs[k]=1000 subs[P]=.1 subs[L]=.1 subs[b]=.01 subs[h]=.01 subs[E]=1e7 subs[x]=.5 Approximating a cantilever with a single revolute joint Arbitrarily placing a compliant joint halfway along its length can be used to approximate a cantilever beam.\nEuler-Bernoulli Equations Point Load at the end:\n$$d = \\frac{PL^3}{3EI}$$\nCross-sectional moment of inertia for a rectangle\n$$I = \\frac{bh^3}{12}$$\nInserted: $$d = \\frac{4PL^3h^3}{Eb}$$\n$$E_{rectangle} = \\frac{4PL^3h^3}{db}$$ $$E = \\frac{PL^3}{3dI}$$\nCross sectional moment of inertia for a rectangle\nI = b*h**3/12 d1 = P*L**3/3/E/I d1.subs(subs) $\\displaystyle 0.004$\nq1 = P*L**2/2/E/I q1.subs(subs) $\\displaystyle 0.06$\n2-Link Approximation Matching Displacement x at .5\n$$d = L(1-x) \\sin{\\theta}$$\n$$\\tau=k\\theta = PL(1-x)\\cos\\theta $$\nUsing a small Angle approximation, $\\cos\\theta = 1$\n$$k\\theta = PL(1-x)$$ $$\\theta = \\frac{PL(1-x)}{k}$$ $$d=L(1-x)\\sin\\left(\\frac{PL(1-x)}{k}\\right)$$\n$$d=L(1-x)\\sin\\left(\\frac{PL(1-x)}{k}\\right)=\\frac{PL^3}{3EI}$$ $$(1-x)\\sin\\left(\\frac{PL(1-x)}{k}\\right)=\\frac{PL^2}{3EI}$$\n$$\\frac{PL(1-x)}{k}=\\sin^{-1} \\left(\\frac{PL^2}{3EI(1-x)}\\right)$$\n$${k}=\\frac{PL(1-x)}{\\sin^{-1} \\left(\\frac{PL^2}{3EI(1-x)}\\right)}$$\nk1 = P*L*(1-x)/(sympy.asin(P*L**2/(3*E*I*(1-x)))) k1.subs(subs) $\\displaystyle 0.0624332120451467$\nThe displacement matches\nd2 = L*(1-x)*sympy.sin(P*L*(1-x)/k1) d2.subs(subs) $\\displaystyle 0.004$\nBut the orientation does not\nq2 = P*L*(1-x)/k1 q2.subs(subs) $\\displaystyle 0.080085580033659$\nMatching Theta From Cantilever beam equations:\n$$\\theta = \\frac{PL^2}{2EI}$$\nFrom approximation above, again assuming small angles:\n$$\\theta = \\frac{PL(1-x)}{k}$$\n$$\\theta = \\frac{PL^2}{2EI}= \\frac{PL(1-x)}{k}$$ $$\\frac{L}{2EI}= \\frac{1-x}{k}$$ $$k=\\frac{2EI(1-x)}{L}$$\nUsing the value solved for to equate orientation:\nk2 = 2*E*I*(1-x)/(L) Now orientation matches\nq3 = P*L*(1-x)/k2 q3.subs(subs) $\\displaystyle 0.06$\nBut displacement does not\nd3 = L*(1-x)*sympy.sin(P*L*(1-x)/k2) d1.subs(subs) $\\displaystyle 0.004$\nd3.subs(subs) $\\displaystyle 0.00299820032397223$\nMatching Both Now asking the question, what location x permits you to accurately model the deflection and angle of a cantilever beam with a single joint?\ndel subs[x] Create an error vector\nerror = [] error.append(d1-d2) error.append(q1-q2) error= sympy.Matrix(error) error = error.subs(subs) error $\\displaystyle \\left[\\begin{matrix}0\\0.06 - \\operatorname{asin}{\\left(\\frac{0.04}{1 - x} \\right)}\\end{matrix}\\right]$\nimport optimization toolkit\nimport scipy.optimize Turn \u0026ldquo;error\u0026rdquo; into a function that can be run using the sympy.lambdify function\nf = sympy.lambdify((x),error) Scipy.optimize.minimize needs args supplied as a list, so define a new wrapper function that formats inputs correctly\ndef f2(args): a = f(*args) b = (a**2).sum() return b sol = scipy.optimize.minimize(f2,[.25]) sol fun: 2.0974856866229214e-09 hess_inv: array([[65.11062045]]) jac: array([-8.23593665e-06]) message: 'Optimization terminated successfully.' nfev: 14 nit: 4 njev: 7 status: 0 success: True x: array([0.33242421]) Now add x back to the list of substitutions\nsubs[x]=sol.x[0] So a virtual joint at x=1/3 correctly approximates displacement and orientation.\nd2.subs(subs) $\\displaystyle 0.004$\nq2.subs(subs) $\\displaystyle 0.0599542016846748$\n","permalink":"https://foldable-robotics.github.io/modules/compliance/generated/prbm/","tags":null,"title":"Approximating compliant beams with the pseudo-rigid-body model"},{"categories":null,"contents":"Refer to the website for all the documentation and files\nInstall the Arduino IDE Install Adafruit windows drivers(if applicable) Add repository file \u0026ndash;\u0026gt; preferences in \u0026ldquo;additional board managers\u0026rdquo;, type \u0026ldquo;https://adafruit.github.io/arduino-board-index/package_adafruit_index.json\u0026quot; Add adafruit boards manager tools \u0026ndash;\u0026gt; board \u0026ndash;\u0026gt; board manager\u0026hellip; search for adafruit, select, and install. USB Bootloader Settings Plug in USB Bootloader Select Board: ProTrinket5V/16MHz(USB) Select Programmer: USBTinyISP upload USB/Serial Cable Settings Plug in USB/Serial Cable to the six pins at the end of the adafruit pro trinket If necessary, install ftdi drivers Select Board: ProTrinket5V/16MHz(FTDI) Select Port (use device manager to identify) Select Programmer: AVR ISP upload Working with serial Serial Echo void setup() { Serial.begin(9600); } void loop() { if (Serial.available()) { // If anything comes in Serial (USB), Serial.read(); Serial.write(\u0026#34;x\u0026#34;); // read it and send it out Serial1 (pins 0 \u0026amp; 1) } } ","permalink":"https://foldable-robotics.github.io/modules/integration/arduino/","tags":null,"title":"Arduino IDE and Pro Trinket Setup"},{"categories":null,"contents":"A \u0026ldquo;literal\u0026rdquo; value is one that is typed into code. Think \u0026ldquo;4.1\u0026rdquo;, a floating point literal value, or \u0026ldquo;asdf\u0026rdquo;, a literarl string value. You can learn a lot about data types by typing them into Python to learn how they work. The type() function returns the data type of the input object.\nLet\u0026rsquo;s use type() to learn about Python\u0026rsquo;s built in data types. Two basic numeric types include floats and integers.\ntype(4.1) float type(4) int the int and float types returned are classes that can be used to cast variables. For example,\nint(4.1) 4 can be used to convert a floating point literal, 4.1, to an integer, 4. It\u0026rsquo;s returned type is an int\ntype(int(4.1)) int conversely, you can convert an int back into a float, using\nfloat(int(4.1)) 4.0 and the returned type is\ntype(float((int(4.1)))) float You can also define numbers using different notations, inculding hexadecimal,\n0xff 255 or binary\n0b00111010 58 Boolean Type Another data type is the boolean data type or bool. Boolean variables hold one of two values, either true or false.\nTrue True type(True) bool False False Boolean values are returned when used with operations like equality or inequality tests.\n1==2 False 3!=5 True 1\u0026gt;2 False 3\u0026lt;=4 True Integer Math when you operate on two integers, the result is returned as an integer as well.\n1 1 1+2 3 2-1 1 a = 1 b = 2 a+b 3 Float Operations Because integers exist within the set of all floating point numbers, operating on an int and a float will return a floating point number as well.\nimport math 1.1 1.1 1.1*2.2 2.4200000000000004 2*1.1 2.2 Some functions can be used to convert a floating point number back to an integer. The first is obviously the int class itself.\nint(4.1) 4 The round() function always rounds to the nearest integer. floats with a .5 are rounded up to the largest absolute value integer.\nround(1.4) 1 round(1.5) 2 round(-1.4) -1 round(-1.5) -2 Other functions include trunc(), which eliminates the mantissa, floor(), which returns the smaller absolute-value integer, and ceil() which returns the larger absolute-value integer.\nmath.trunc(1.8) 1 math.floor(1.8) 1 math.trunc(-1.8) -1 math.floor(-1.8) -2 math.ceil(1.8) 2 math.ceil(-1.8) -1 Conversions You can also use the data type class itself to convert from one data type to another\nint(8.1) 8 float(8) 8.0 int(8) 8 str(9.815) '9.815' bool(8.15) True float(str(8.15)) 8.15 int(str(8)) 8 Some conversions cannot be made implicitly:\ntry: int(str(8.15)) except ValueError as e: print(e) invalid literal for int() with base 10: '8.15' ","permalink":"https://foldable-robotics.github.io/modules/python/generated/basic-data-types/","tags":null,"title":"Basic Data Types"},{"categories":null,"contents":"Assignment Overview The goal of this part is to encourage you to get \u0026ldquo;bio-inspired\u0026rdquo;, to get you thinking about the scale of your robot, and to think about how to replicate the efficiencies of biological systems. You may refer to the developing specifications page for more information\nPlease Read this whole assignment first.\nSuggestions It will be useful to start using a program like Mendeley to collect and organize references. Be creative in your search terms. Use ( Citation: Dickinson,\u0026#32;Farley \u0026amp; al.,\u0026#32;2000 Dickinson,\u0026#32; M.,\u0026#32; Farley,\u0026#32; C.,\u0026#32; Full,\u0026#32; R.,\u0026#32; Koehl,\u0026#32; M.,\u0026#32; Kram,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Lehman,\u0026#32; S. \u0026#32; (2000). \u0026#32;How animals move: an integrative view.. Science (New York, N.Y.),\u0026#32;288(5463).\u0026#32;100–6. https://doi.org/10.1126/science.288.5463.100 ) to find good starting points for references and keywords. Start writing down search keywords from class. External Resources https://en.wikipedia.org/wiki/Kleiber%27s_law Rubric Description Points Bio Inspiration 20 Other bio-inspired robots 20 Table 40 Other Assumptions 10 Figures 20 Engineering Representation 20 Discussion 40 Bibliography 30 Total 200 Instructions Constraints This year we will be focusing on one or two system models that you can modify to answer your question1 These will involve arrangements of parallel mechanisms: Planar mechanisms, such as four and five-bar mechanisms Spherical mechanisms such as spherical four or five-bar systems Sarrus linkages (a particular straight-line mechanism) The source of bioinspiration can be extant(living) or extinct, but you should be able to find enough information about it to make a set of reasonable assumptions about what you don\u0026rsquo;t know. Focus on an animal in a size range that you can make at scale, at a reasonable cost, rather than scaling a different-sized animal up or down. Please check with Dr. Aukes if you need further clarification / approval.\nInstructions Identify a candidate organism you wish to focus on its biomechanics. This consists of a specific animal species, its body plan, and the motion of interest. Search in Google scholar, using keywords such as \u0026ldquo;anatomy\u0026rdquo;, \u0026ldquo;morphology\u0026rdquo;, \u0026ldquo;mechanics\u0026rdquo;, \u0026ldquo;biomechanics\u0026rdquo;, \u0026ldquo;ground reaction forces\u0026rdquo;, etc. along with the animal\u0026rsquo;s informal or scientific name along with the type of locomotion.\nList five of the most closely related research references on topics pertinent to your project, in IEEE format. Identify three citations which are most useful in creating initial specifications for your robot(use an asterisk in the previous list). Now discuss these three papers, highlighting the information you can draw from each. Be specific. Why is each paper valuable? (At least one paragraph each) Search for existing bio-inspired robots based on the same animal, subsystem, and motion.\nList five of the most closely-related research references on topics pertinent to your project in IEEE format. Identify three citations which are most useful in creating initial specifications for your robot(use an asterisk in the previous list). Now discuss these three papers, highlighting the information you can draw from each. Be specific. Why is each paper valuable? (At least one paragraph each) Collect all the information you have found from your references into one place. A well-formatted table may do, with supplementary figures from literature as needed. A specifications table is a handy way to collect parameters. Use SI units. Example below:\nParameter Unit Value Range Reference Total Mass kg .2-.4 [1] Maximum Landing Force N 6 [1] Maximum Takeoff Force N 4 [2] Average Takeoff acceleration $\\frac{m}{s^2}$ 13 [3] \u0026hellip; \u0026hellip; \u0026hellip; Examples of the types of information to include:\nTypical mass of the animal as a whole, and of key anatomical parts Average speed of the animal. Key points in a stride: leg motion such as stride length and maximum foot height, trunk motion and orientation, etc. Typical ground reaction forces during locomotion(plot is best) Metabolic energy/power consumed to locomote (respiration). Mechanical energy/power generated during locomotion Key biological materials and their mechanical properties (bone, ligaments, tendons, and the resulting link/joint stiffnesses and damping properties) Muscle forces Fill in the information gaps from your biomechanics investigation with informed assumptions you can make. For example, if you know ground reaction forces from your paper, and some masses, try to find peak accelerations. If you know forces and velocities, calculate power usage. If you know maximum jump height and mass, find energy required for a jump. The most important pieces of information you can gather at this point are elements like \u0026ldquo;how much energy is consumed in accomplishing this gait\u0026rdquo;, \u0026ldquo;What are the forces involved\u0026rdquo;, etc.\nSupply at least two figures from literature, highlighting key aspects of the biological system. This should include one from each of the following categories:\nFigures/drawings of skeleton, anatomy, exoskeleton, body plan, musculature, kinematics Motion plots, freeze frames of gait cycle, plot of ground reaction forces \u0026hellip; other aspects of the parameters above. Draw the simplest engineering representation of the system you can of your proposed mechanical system. How many rigid bodies are there? How many can be approximated as massless(1/10 of the total mass or less)? Where are the springs? Where is the (main) actuator?\nDiscussion In addition to answering completing each point in the procedure and discussion, please also include answers to the following questions:\nDiscuss / defend your rationale for the size animal you selected in terms of your ability to replicate key features remotely with limited material selection. Find a motor and battery that can supply the mechanical power needs obtained above. Consider that motor efficiencies may be as high as 95%, but if you can\u0026rsquo;t find it listed, assume you find a more affordable motor at 50-70% efficiency. Compare the mechanical watts/kg for the necessary motor and battery vs the animal\u0026rsquo;s mechanical power/mass above? Which one is more energy dense? Submission Please include a report with the following\nThe requested steps of the procedure, in paragraph form (no sentence fragments). Answers to the discussion points above plots \u0026amp; figures Bibliography Appendices, consisting of Data - any raw data collected in the generation of this report Code - any code created and by your team to in the generation of this report. If you are using a jupyter notebook, to generate this assignment, you can supply your code inline or at the end. Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document or a jupyter notebook (.ipynb). If submitted as a notebook, make sure it is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\nPlease also post this completed assignment to your team\u0026rsquo;s website. This may be posted as a rendered jupyter notebook or a static markdown file with code and figures uploaded separately; details on how to do each may be found in the Jupyter Notebooks in Websites tutorial.\nBibliography Bennett (2011) Bennett,\u0026#32; A. \u0026#32; (2011). \u0026#32;Togaviridae.\u0026#32;In Fenner’s veterinary virology.\u0026#32;(pp.\u0026#32;455–465). \u0026#32; Elsevier. https://doi.org/10.1016/B978-0-12-375158-4.00029-8 DeLong,\u0026#32; Okie,\u0026#32; Moses,\u0026#32; Sibly\u0026#32;\u0026amp;\u0026#32;Brown (2010) DeLong,\u0026#32; J.,\u0026#32; Okie,\u0026#32; J.,\u0026#32; Moses,\u0026#32; M.,\u0026#32; Sibly,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Brown,\u0026#32; J. \u0026#32; (2010). \u0026#32;Shifts in metabolic scaling, production, and efficiency across major evolutionary transitions of life. Proceedings of the National Academy of Sciences,\u0026#32;107(29).\u0026#32;12941–12945. https://doi.org/10.1073/pnas.1007783107 Dickinson,\u0026#32; Farley,\u0026#32; Full,\u0026#32; Koehl,\u0026#32; Kram\u0026#32;\u0026amp;\u0026#32;Lehman (2000) Dickinson,\u0026#32; M.,\u0026#32; Farley,\u0026#32; C.,\u0026#32; Full,\u0026#32; R.,\u0026#32; Koehl,\u0026#32; M.,\u0026#32; Kram,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Lehman,\u0026#32; S. \u0026#32; (2000). \u0026#32;How animals move: an integrative view.. Science (New York, N.Y.),\u0026#32;288(5463).\u0026#32;100–6. https://doi.org/10.1126/science.288.5463.100 Hanna\u0026#32;\u0026amp;\u0026#32;Schmitt (2011) Hanna,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Schmitt,\u0026#32; D. \u0026#32; (2011). \u0026#32;Locomotor energetics in primates: Gait mechanics and their relationship to the energetics of vertical and horizontal locomotion. American Journal of Physical Anthropology,\u0026#32;145(1).\u0026#32;43–54. https://doi.org/10.1002/ajpa.21465 Kramer\u0026#32;\u0026amp;\u0026#32;Sylvester (2011) Kramer,\u0026#32; P.\u0026#32;\u0026amp;\u0026#32;Sylvester,\u0026#32; A. \u0026#32; (2011). \u0026#32;The energetic cost of walking: A comparison of predictive methods. PLoS ONE,\u0026#32;6(6). https://doi.org/10.1371/journal.pone.0021290 Makarieva,\u0026#32; Gorshkov,\u0026#32; Li,\u0026#32; Chown,\u0026#32; Reich\u0026#32;\u0026amp;\u0026#32;Gavrilov (2008) Makarieva,\u0026#32; A.,\u0026#32; Gorshkov,\u0026#32; V.,\u0026#32; Li,\u0026#32; B.,\u0026#32; Chown,\u0026#32; S.,\u0026#32; Reich,\u0026#32; P.\u0026#32;\u0026amp;\u0026#32;Gavrilov,\u0026#32; V. \u0026#32; (2008). \u0026#32;Mean mass-specific metabolic rates are strikingly similar across life’s major domains: Evidence for life’s metabolic optimum.. Proceedings of the National Academy of Sciences of the United States of America,\u0026#32;105(44).\u0026#32;16994–9. https://doi.org/10.1073/pnas.0802148105 Taylor,\u0026#32; Heglund\u0026#32;\u0026amp;\u0026#32;Maloiy (1982) Taylor,\u0026#32; C.,\u0026#32; Heglund,\u0026#32; N.\u0026#32;\u0026amp;\u0026#32;Maloiy,\u0026#32; G. \u0026#32; (1982). \u0026#32;Energetics and mechanics of terrestrial locomotion. I. Metabolic energy consumption as a function of speed and body size in birds and mammals.. The Journal of experimental biology,\u0026#32;97(1970).\u0026#32;1–21. https://doi.org/10.1146/annurev.ph.44.030182.000525 WEIR (1949) WEIR,\u0026#32; J. \u0026#32; (1949). \u0026#32;New methods for calculating metabolic rate with special reference to protein metabolism.. The Journal of physiology,\u0026#32;109(1-2).\u0026#32;1–9. https://doi.org/10.1113/jphysiol.1949.sp004363 These will be determined during week 3 in conjunction with project selection and team formation.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://foldable-robotics.github.io/assignments/biomechanics-background-and-initial-specifications/","tags":null,"title":"Biomechanics Background and Initial Specifications"},{"categories":null,"contents":"Overview Compute the stiffness of a laminate beam\nSummary of Steps Prepare 4 rectangular samples of the rigid material your team is using (cardboard, posterboard,fiberglass) in the dimensions of 25mm x 125mm.\nMeasure the thickness of each of the samples in at least two places. You should have at least 8 measurements.\nClamp two beams flat on top of one another on a table with 100mm hanging off the side.\nOptional: Print out and vertically mount a grid pattern behind the beam for taking measurements via photos\nTape a string to the bottom sample so the string hangs off the end of the lower beam\nMount/place camera directly in front of the beam\nSuggestion: use a tripod to ensure consistent measurements shot-to-shot.\nTake picture of the bottom beam unloaded.\nMeasure the deflection of the bottom beam with respect to the top beam material as a function of a small of load.\nTake deflection / force readings for each beam with at least 5 different loads by measuring the distance between the loaded and unloaded beam Suggestion: You can use calibrated weights or paperclips, small amounts of water, etc. and then measure or calculate the mass afterwards. Or you can use a fish scale or digital load cell, but be sure to take consistent deflection/force readings.\nTake a picture of the beam at each load value.\nSuggestion: Do not permanently bend or plasticly deform the material, otherwise the test will produce poor results.\nRepeat the test for the remaining two beams. You should have $3*5=15$ experimental values. Leave the same beam on the top throughout the tests.\nPrepare 4 rectangular samples of the laminate material your team is using in the dimensions of 25mm x 125mm Repeat the prior experiment for your laminate. Plot the force/deflection data for your single-layer experiment and extract the slope. Using the code introduced in class, compute the Young\u0026rsquo;s modulus for the this material based on the slope of your experimental data and the dimensions of the beam. Using the estimate for Young\u0026rsquo;s modulus, compute the stiffness of a 5-layer composite with those materials on the top and bottom layer. Assume the other layers do not contribute any stiffness, just thickness Assume a symmetric laminate You may use the laminate thickness measurement minus the layer thickness measurements to obtain the total thickness of the other non-contributing layers. Overplot the computed beam stiffness against the experimental stiffness data you obtained for the laminate. Suggestions Test individual layers to start You have permission to adapt the geometry to suit your own project as needed, but describe the differences in your setup Document your process I will be forgiving on precision, but I want to know what you did and how you did it You may use scissors, but you will need to measure what you actually cut. This work can be combined and put in your group\u0026rsquo;s final report, but the work for this assignment should be individual. You may coordinate with your group, however, so that each of your teammates test different design points however ","permalink":"https://foldable-robotics.github.io/modules/compliance/cantilever-beams/","tags":null,"title":"Cantilever Beams"},{"categories":null,"contents":"Conditional Statements use the keywords if, then, and else to perform different logic depending on the statements that are evaluated. Below are a couple examples:\nA=5 if A==1: print(\u0026#39;I see one\u0026#39;) elif A==2: print(\u0026#39;I see two\u0026#39;) else: print(\u0026#34;I don\u0026#39;t know\u0026#34;) I don't know if True: print(\u0026#39;yep\u0026#39;) else: print(\u0026#39;nope\u0026#39;) yep You can evaluate objects directly to make conditional decisions based on their contents. Some things typically register as False, for example, such as empty objects.\nif False: print(\u0026#39;yep\u0026#39;) else: print(\u0026#39;nope\u0026#39;) nope if []: print(\u0026#39;yep\u0026#39;) else: print(\u0026#39;nope\u0026#39;) nope if None: print(\u0026#39;yep\u0026#39;) else: print(\u0026#39;nope\u0026#39;) nope if (): print(\u0026#39;yep\u0026#39;) else: print(\u0026#39;nope\u0026#39;) nope if {}: print(\u0026#39;yep\u0026#39;) else: print(\u0026#39;nope\u0026#39;) nope While non-empty objects usually register as True.\nif [1,2,3]: print(\u0026#39;yep\u0026#39;) else: print(\u0026#39;nope\u0026#39;) yep if [None,None,None]: print(\u0026#39;yep\u0026#39;) else: print(\u0026#39;nope\u0026#39;) yep And so forth\u0026hellip;\n","permalink":"https://foldable-robotics.github.io/modules/python/generated/conditionals/","tags":null,"title":"Conditional Statements"},{"categories":null,"contents":"Introduction Often you are working in excel and want to output to a markdown table.\nIn excel, add a row under the top row. fill each element with a dash character, -.\nTo the right of the table, add a new formula to concatenate each column of that row together, separated by a vertical line character, |. For the first row composed of three columns, it should look like this:\n=A1\u0026amp;\u0026#34;|\u0026#34;\u0026amp;B1\u0026amp;\u0026#34;|\u0026#34;\u0026amp;C1 Fill the rest of that column with the same equation either by copying and pasting or by using the \u0026ldquo;fill down\u0026rdquo; keystroke (ctrl+d).\nCopy the contents of that column into markdown.\nIt should look like this:\nColumn 1|Column 2|Column 3 -|-|- Value 11|Value 12|Value 13 Value 21|Value 22|Value 23 Value 31|Value 32|Value 33 And will compile into this:\nColumn 1 Column 2 Column 3 Value 11 Value 12 Value 13 Value 21 Value 22 Value 23 Value 31 Value 32 Value 33 Template File excel template used in this example\nExternal Resources Github-flavored Markdown Spec Mastering Markdown Guide https://docs.github.com/en/github/writing-on-github/organizing-information-with-tables ","permalink":"https://foldable-robotics.github.io/modules/misc/excel-to-markdown/","tags":null,"title":"convert excel spreadsheet to markdown table"},{"categories":null,"contents":"Introduction This tutorial takes you step-by-step through creating a .mp4 version of a powerpoint presentation for posting to youtube or a personal website\nOpen the Powerpoint presentation you would like to convert. Go through each slide. For each video, a. set it up to play automatically, and a. Ensure it is set to play full-screen Go to \u0026ldquo;Slideshow\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Record slide show\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Record from beginning\u0026rdquo;, and narrate your presentation. Test your presentation by hitting F5 to ensure it plays correctly. Save as an .mp4 filetype. Test the saved vieo to ensure it saved correctly. (optional) When posting to YouTube, it is highly suggested to set the privacy setting to \u0026ldquo;unlisted\u0026rdquo;. ","permalink":"https://foldable-robotics.github.io/modules/project/powerpoint-to-mp4/","tags":null,"title":"Converting Powerpoint to .mp4"},{"categories":null,"contents":"","permalink":"https://foldable-robotics.github.io/course-documents/course-calendar-copy/","tags":null,"title":"Course Calendar"},{"categories":null,"contents":"","permalink":"https://foldable-robotics.github.io/course-documents/course-calendar/","tags":null,"title":"Course Calendar"},{"categories":null,"contents":"","permalink":"https://foldable-robotics.github.io/course-documents/all-documents/","tags":null,"title":"Course Documents"},{"categories":null,"contents":"Assignment Overview The goal of this assignment is to learn about your activities in this course and how the course can be improved in the future.\nRubric Description Points Total 0 Instructions Please follow the link and instructions provided through canvas. ","permalink":"https://foldable-robotics.github.io/assignments/course-feedback-i/","tags":null,"title":"Course Feedback I"},{"categories":null,"contents":"Assignment Overview The goal of this assignment is to learn about your activities in this course and how the course can be improved in the future.\nRubric Description Points Total 0 Instructions Please follow the link and instructions provided through canvas. ","permalink":"https://foldable-robotics.github.io/assignments/course-feedback-ii/","tags":null,"title":"Course Feedback II"},{"categories":null,"contents":" Install additional software packages. In Windows, go to the search bar and type \u0026ldquo;anaconda\u0026rdquo;. Once you see the \u0026ldquo;Anaconda Prompt\u0026rdquo; app in the list, click on it.\nWhen the terminal opens, paste each of the following lines (one at a time) at the command prompt and press enter:\npip install pypoly2tri idealab_tools foldable_robotics pynamics ","permalink":"https://foldable-robotics.github.io/modules/python/course-specific-packages/","tags":null,"title":"Course-specific Python Packages"},{"categories":null,"contents":"Instructions Connect to classroom intranet\nSSID: IDEAlab\npassword: posted in class\nopen up spyder and create a new script\nmake sure that you use your team\u0026rsquo;s IP address:\nTeam 1 IP 1 201 2 202 3 203 4 204 5 205 6 206 #!/usr/bin/env python3 # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Created on Thu Aug 19 11:31:19 2021 @author: danaukes \u0026#34;\u0026#34;\u0026#34; import socket host = \u0026#39;192.168.0.209\u0026#39; # substitute your vinyl cutter\u0026#39;s ip address port = 8080 # The same port as used by the server s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((host, port)) s.sendall(b\u0026#39;IN;P0;U0,0;D1000,0;D1000,1000;D0,1000;D0,0;U0,0;@\u0026#39;) s.close() ","permalink":"https://foldable-robotics.github.io/modules/manufacturing/vinyl-cutter-over-wifi/","tags":null,"title":"Cutting over Wifi"},{"categories":null,"contents":"Assignment Overview The goal of this assignment is to get your permission to collect data through periodic surveys.\nInstructions Fill out this form ","permalink":"https://foldable-robotics.github.io/assignments/data-collection-permission/","tags":null,"title":"Data Collection Permission Form"},{"categories":null,"contents":"$$ \\frac{ {}^N{d\\vec{v}}}{dt} = \\frac{ {}^A{d\\vec{v}}}{dt} + {}^N{\\vec{w}}^{A} \\times \\vec{v} $$\nExample $$ \\vec{r} = -l\\hat{a}_y $$ $$ \\vec{v} = \\frac{ {}^N{d\\vec{r}}}{dt} =\\frac{ {}^{A} { d\\vec{r}}}{dt} + {}^{N}{\\vec{\\omega}}^{A} \\times \\vec{r} $$ $$ \\vec{v} = \\frac{ {}^{N}{d\\vec{r}}}{dt} = \\dot{\\theta}\\hat{a}_z \\times -l\\hat{a}_y $$ $$ \\vec{v} = \\frac{ {}^{N}{}{ d\\vec{r}}{}{}}{dt}= l\\dot{\\theta}\\hat{a}_x $$ $$ \\vec{a} = \\frac{ {}^{N}{}{ d\\vec{v}}{}{}}{dt} = \\frac{ {}^{N}{}{d^2\\vec{r}}{}{}}{dt^2} $$ $$ \\vec{a} = \\frac{ {}^{A}{}{d\\vec{v}}{}{}}{dt} + {}^{N}{}{\\vec{\\omega}}^{A}{} \\times \\vec{v} $$ $$ \\vec{a} = l\\ddot{\\theta}\\hat{a}_x + \\dot{\\theta}\\hat{a}_z \\times l\\dot{\\theta}\\hat{a}_x $$ $$ \\vec{a} = l\\ddot{\\theta}\\hat{a}_x + l\\dot{\\theta}^2\\hat{a}_y $$\nFrame A\n$ {}^{N}{}{\\vec{\\omega}}^{A}{} = \\dot{\\theta} \\hat{n}_z= \\dot{\\theta} \\hat{a}_z$ ","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/05-derivatives-and-the-golden-rule/","tags":null,"title":"Derivatives and the Golden Rule"},{"categories":null,"contents":"Introduction The purpose of this assignment is to plan for the manufacturing of the full system, test the output, and use it to produce a prototype.\nRubric Description Points 1a 15 1b 15 2a 15 2b 15 3 30 4a 30 4b 30 4c 40 5 10 total 200 Resources Full Design Pipeline Solidworks Tutorials: kinematics export The macros for exporting a laminate to .dxf: https://github.com/popupcad/code_popupcad_solidworks_exporter Instructions Create a quick paper mockup of your team\u0026rsquo;s prototype design. Once you have arrived at your desired architecture, proceed to unfold the prototype in a way that makes sense from the perspective of optimizing material usage, staying within any boundary limitations (size of a piece of posterboard, size of the cutter you will be using).\nDesign the geometry of your robot in .dxf format. Suggested workflow:\na. Convert the flattened pattern to a dimensioned Solidworks sketch. Include any mounting holes for motors, springs, or connectors. a. Use the Solidworks tutorial to create a hinged assembly of all parts of the design a. Take a screenshot of the robot in its folded \u0026amp; assembled state a. Flatten the assembly back to its original flattened state a. Create a drawing from the assembly and use the solidworks export macro to export a yaml file (generic). a. Use the solidworks support functionality in the foldable_robotics package to convert to a dxf a. Modify the .dxf as needed to specify any special cut lines, holes or other layers not automatically identified.\nUsing a single-layer design approach, compute the design of your device in one layer, plotting each step along the way. This should include:\na one-layer hinge design that fits your team\u0026rsquo;s need (with justification for material used, rotational needs, manufacturing method used, etc) mapping the hinge design to each joint in your joints layer of the dxf subtracting the one layer hinge design from your body layer holes computed for any vertices Using a 5-layer design approach, compute the same design of your device in five layers, plotting each step along the way. This should include:\na five-layer hinge design that fits your team\u0026rsquo;s need (with justification for material used, rotational needs, manufacturing method used, etc) mapping the hinge design to each joint in your joints layer of the dxf subtracting the 5-layer hinge design from the body laminate holes computed for any vertices Using the full design pipeline found on the website and discussed in class, compute the manufacturing geometry for a five-layer laminate, plotting each step along the way. This should include:\nWeb design Support design Non-removable scrap Connection check of all parts that result from the second-pass cut. Similarity check between design and removed final part. Export your final cut files to .dxf or .pdf, depending on your need. You should export one file per layer as well as one final cut file(if using a laminate process).\nSubmission Please include:\nThe picture of your paper mockup in its a. folded and a. flattened state A Solidworks screenshot of your robot in its a. folded and a. flattened state The dxf of your body and joint layers output by solidworks or designed by you. Your jupyter notebook script consisting of the following elements, clearly labeled. a. 1-Layer Robot Design a. 5-Layer Robot Design a. 5-Layer Manufacturing Design Final .dxf files Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document as well as a jupyter notebook (.ipynb). If submitted as a notebook, make sure it is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\nSupporting files should accompany the jupyter notebook in a .zip file of the entire folder.\n","permalink":"https://foldable-robotics.github.io/assignments/design-and-manufacturing-workflow/","tags":null,"title":"Design and Manufacturing Workflow"},{"categories":null,"contents":"Introduction The purpose of this assignment is to execute the planned design study assigned to you for completing the final part of your team project.\nRubric Description Points Procedure Writeup 50 Discussion of each step 50 Code 20 Plots \u0026amp; Figures 30 Data 20 Images 30 Total 200 Instructions Execute the plan determined by your team to investigate the impact of different design changes on system performance. You may write up your experience one or more (or all) of the below steps, depending on what your team agreed. For example, your teammates may have each decided to independently execute this sequence on a smaller or more focused question, or split this process amongst the group. Which steps you describe and write up depend on the plan agreed upon by the team.\nWith the dynamics model updated per System Dynamics II, create an optimization routine that permits you to run your simulation by supplying different values for a selected number of design variables (link length, joint stiffness, actuator signal, etc). Determine a performance metric against which to measure your system\u0026rsquo;s performance. This should be determined by your team\u0026rsquo;s research question, so in general, your whole team should agree on the \u0026ldquo;goal\u0026rdquo; of each person\u0026rsquo;s assignment. Using one of the many optimization approaches discussed in class (global search, evolutionary, scipy.optimize), identify the value of the design parameters that maximizes (or minimizes) yoru performance metric Prototype and validate this result experimentally. Discussion The discussion in this assignment is intentionally more free-form. You must justify each engineering decision made while following the above sequence. Discuss what worked, what didn\u0026rsquo;t work, and alternatives that you considered.\nSubmission Please include a Jupyter notebook with the following:\nDetailed description of the completed steps above Detailed justification of your rationale for each step Code used in solving the problem (inline in the report in code blocks) Visualizations of the various steps, including dynamics, optimization results, experiment setup, experimental data, and comparison between model / reality. Raw data. If the data is too long to fit in your ipython notebook, provide the .csv or .xlsx files used to store the raw data Figure(s) of your data and model plotted in the same graph. Images of your experiment setup across multiple steps. Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document as well as the the jupyter notebook (.ipynb). Please ensure the jupyter notebook is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\nPlease also post the completed assignment to your team\u0026rsquo;s website as a rendered jupyter notebook, saved as markdown and uploaded to github.\n","permalink":"https://foldable-robotics.github.io/assignments/doeddca/","tags":null,"title":"Design Optimization, Experiment Design, Data Collection, and Analysis"},{"categories":null,"contents":"Introduction The purpose of this assignment is to create a plan for the final part of your project, and to assign individual tasks.\nRubric Description Points Total 25 Instructions The plan must include each of the following steps for each research question you decide to ask\nDesign Optimization Experiment Design Data Collection Data Visualization Analysis Conclusions You may split your narrative in serial tracks (risky), or split your investigations into separate, smaller design questions.\nExample Student 1 Student 2 Student 3 Student 4 Topic Stiffness vs. Height Stiffness vs. Height Length vs Speed Mass vs Efficiency Design Optimization x x x Experiment Design x x x Data Collection x x x Data Visualization primary secondary x x Analysis secondary primary x x Conclusions secondary primary x x List the proposed studies and provide a short description of how you anticpate optimizing and validating each aspect of your system model and prototype.\nYou must include at least one controlled variable and one performance goal per study. You must include at least two research questions. Submission Please present your plan in class and submit the table to Canvas by the date listed in the Canvas calendar\n","permalink":"https://foldable-robotics.github.io/assignments/doeddcap/","tags":null,"title":"Design Optimization, Experiment Design, Data Collection, and Analysis Plan"},{"categories":null,"contents":"Introduction Generate a research question worthy of your time.\nRubric Description Points Question 30 Tractability Discussion 20 Novelty Discussion 30 Interesting Discussion 40 Open-endedness Discussion 20 Modularity Discussion 20 Team Fit Discussion 20 Topic Fit Discussion 20 Total 200 Resources The associated module on developing a research question Mendeley Desktop, a useful citation manager Instructions Starting with the research question selected for your team, work on adapting and refining it to fit your team\u0026rsquo;s specific goals and this year\u0026rsquo;s course constraints (with regard to makeability, feasibility, etc) Defend your selected question by answering the questions below. Discussion What is your research question?\nAfter describing your research question, explain your rationale for why it is a good question to ask by answering the following questions. For each numbered answer provide at least one paragraph per response.\nTractability: Is your question tractable and achievable? Discuss your plan for scoping your problem to fit in a 15-week course. (\u0026gt;1 paragraph)\nHow have you focused or constrained the problem to differentiate yourself and/or become more tractable?\nExamples include looking at one specific type of motion, using a specific animal as a source of inspiration (for generating unique specifications), or limiting yourself to a particular set of materials, parts, cost requirements, etc.\nNovelty: Is your question novel? How have you established novelty?\nWhat keywords did you use when performing a literature review on your topic? What were the four most highly cited references? (Consider using Mendeley or similar to format your citations according to the \u0026ldquo;Submission Best Practices\u0026rdquo; document) Provide a short summary of each, focusing on whether these papers have already done what you set out to do. Interesting: Is your question interesting, timely, and relevant?\nWhat makes it important to others? Why is this idea important now? What prevented it from being answered 10 years ago? Within what contexts could other people use your results? What are the potential broader impacts on society? Open-Ended: Is your question open-ended? Could it leave room for a deeper look if given more time and resources? Discuss how you have structured your research question to permit further, deeper investigation.\nModular: Is your question modular? How does it fit with other complementary research thrusts?\nTeam Fit: How does answering this question leverage your interests and abilities?\nTopic Fit: How does the question use foldable robotics techniques to answer it?\nSubmission This assignment will be presented in your first team presentation (Week 7) as well as added to your project website (Week 4). Thus, you may want to consider writing this assignment with jupyter notebook.\nPlease follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment may be submitted as a .pdf document or a jupyter notebook (.ipynb). If submitted as a notebook, make sure it is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\n","permalink":"https://foldable-robotics.github.io/assignments/develop-a-research-question/","tags":null,"title":"Develop a Research Question"},{"categories":null,"contents":"Introduction Robotics as a field is highly multi-disciplinary. Even within that field, designing a robot requires knowledge and input from a variety of domains, including biology, materials, mechanics, mechanical design,dynamics, CAD, manufacturing, optimization, control, etc. Because of its highly interdisciplinary nature, as new knowledge emerges from any of its connected fields, there is an opportunity to innovate. Designing novel and innovative robots requires adapting new ideas from those neighboring fields, connecting them together, and remixing them with existing techniques, in order to realize new modes of locomotion or achieve higher performance.\nThis is where research comes in. The goal of research is to help us understand the underlying mechanisms that connect these concepts together. Unlike industry, that may be more focused on applying the output of knowledge to solve an applied problem, research often helps us make connections and understand relationships between concepts\nResearch Questions Research questions are at the heart of this process. There can be big research questions or small research questions. In fact, the biggest research questions, the answers to life, the universe, and everything1 are composed of a thousand small questions.\nIn fact, this class \u0026ndash; and my research in general \u0026ndash; focuses on a small set of research questions. Research questions are at the heart of every paper and proposal I write. Asking a good research question is important because as engineers and scientists, it is important to understand underlying connections between two disparate domains before trying to connect them together for an application.\nThe biggest questions \u0026ndash; the answers to life, the secrets of intelligence, and our understanding of matter \u0026ndash; These by nature are open ended, multifaceted and, in my opinion, have don\u0026rsquo;t have a single answer. But these are terrible questions to start with when opening up a new line of questioning. Why?\nThey are too big. You can\u0026rsquo;t expect to answer them completely by yourself as a result of a single project. They don\u0026rsquo;t provide a good starting point. Where should you start to answer these questions They don\u0026rsquo;t provide a good starting point. Where should you start to answer these questions? They don\u0026rsquo;t leverage your knowledge and abilities. Ask a question you are both interested in, but more importantly, ask a question you can answer! On the other hand, questions like these can be broken down into smaller problems. Take what I might consider the driving question of much of my research:\nHow can higher-acheiving robots be made more easily and more affordably by more people?\nThis remaines a poor starting point for new projects because it still fails by the same points above, except that maybe my expertise can go a long way towards answering that question, in the longer term. Given my interests, how can I break that question up into smaller parts?\nA good research question has the following characteristics:\nAchievable / Tractable The question should focus your work towards an achievable goal. It should be limited in nature and may even hint at the approaches you might use to answer it. Consider that for this class, an appropriate research question must be able to be answered in one semester.\nIf, after some background reading and initial testing you find it\u0026rsquo;s too broad, you should adjust and refocus your question. This can be done using a number of techniques:\nBe more specific. Are you talking about a solution for all robots in general, or for a class of robots? Restricting yourself to a specific class of solutions. Maybe there are a hundred ways to answer a question. How can one particular mechanism be leveraged to solve it? For example, perhaps you want to improve the jumping performance of a legged robot. How can you use beam theory to address it? How can you use engineered nonlinearity? How can you optimize your DC motors? Each of those questions implies one path of many possible paths that you might take in solving the problem. Defining that path is appropriate as long as you acknowledge that you are focusing in this way. Adding constraints. Defining a framework within which you are answering a broader question is a good way of focusing your question. Such a framework can be a legitimate constraint (like gravity) or more hypothetical. If you can provide a good rationale for why that framework is important, then your question is still valid. For example, while a number of researchers have built walking robots, have they made one out of cardboard? Have they made one for less than $100? Have they made it in an hour? Have they designed it for walking on an asteroid? Constraints can be useful for focusing your process of answering the question etc. What other techniques can you think of that helps you focus your question on something more achievable? Novel Through background reading of prior research, existing patents, and popular literature you should be relatively sure that the question hasn\u0026rsquo;t already been answered. Granted, if it\u0026rsquo;s a good idea, other people may already be working on the problem, but if the main structure of the answer is already mapped out, then, unless you are reasonably sure you have something new to add, you will probably find that most of the most interesting questions within that subfield have already been asked and answered as well.\nThough it is hard to prove a negative, a five minute search on google scholar by a domain expert like your professor shouldn\u0026rsquo;t come up with many highly cited results. The toughest part is identifying the keywords that people within the field (if it already exists in a nascent form) already use.\nHere are some ways to make a research question more novel\nImporting a new concept, material What are the current trends in other fields? Have they been applied to robotics yet? Try swapping out a traditional approach for a new one. For example, instead of developing a traditional model for some phenomenon, based on experimental data and numerical analsis, can machine learning techniques be applied to solve a problem more efficiently? Can you swap out a motor for a liquid crystal actuator? Can you make your device entirely 3D printable? Use new materials. Instead of rubber, use hydrogels or LCA\u0026rsquo;s. Instead of metal links, try cardboard Apply something used for sensing towards actuation, or actuation towards sensing. Use off-the-shelf components that are newly available. Consider the myriad of new, small form factor sensors that have been developed for cell phones. How can you integrate them to solve a problem? Try a new approach to an existing solution. Some people solve a problem in a cosmetic manner and move on, never fully understanding exploiting the underlying phenomenon. Searching through old robotics conferences reveals many cool ideas that were poorly implemented or not well understood. How can you do it better? Add a better model that more completely explains the phenomenon you\u0026rsquo;re seeing and use that to build a better version. Come up with an improved design of an existing robot. Push the envelope through better engineering. Looking at the problem more broadly. If you\u0026rsquo;re too focused on one mechanism or technique, you may find \u0026ndash; after deeper searching \u0026ndash; that someone has explored that particular problem in depth. Have they explored that class of problems more generally? For example, many people have solved interesting problems using soft robots actuated with pneumatic bellows; what happens when you switch to soft materials that themselves can be actuated? What new challenges can these materials address that were perhaps solved less gracefully with other soft robots? Other techniques\u0026hellip; How else do you make a concept more novel? Interesting, Timely, and Relevant Your question should be interesting to the broader community. How do you achieve this sweet spot of something that is interesting while at the same time being novel? This is the challenge to research in general \u0026ndash; finding topics that are unexplored while at the same time of interest to the community. If it is truly of interest, probably someone else is already thinking of your idea. If someone else has solved it already, less can be learned from you re-examining the same question. The only way to work through this is to proceed quickly and efficiently through your research, and to publish your results early and often.\nOpen-Ended Most research questions should contain \u0026ldquo;how\u0026rdquo; or \u0026ldquo;why\u0026rdquo; phrases, and probe more fundamental relationships. Why? Yes/No questions are boring, and most of the time are not fundable. Open ended questions are the bedrock of science, while application-focused projects are typically more goal-oriented. Goal oriented questions are great in a number of scenarios, especially in military and industry-oriented projects, but to get funded by the National Science Foundation, your project needs \u0026ldquo;Intellectual Merit\u0026rdquo;, which relates back to answering fundamental scientific questions of interest to the community. So let\u0026rsquo;s practice\nExercise: Turn this goal-oriented question to a more open-ended question Use some of the techniques described above to refocus the given research questions to something more open-ended\nGoal-Oriented Open-Ended Can I make a jumping robot with liquid crystal actuators? What are the optimal material design parameters to increase the performance of jumping robots How do I make the world\u0026rsquo;s fastest robot?2 Modular While the research question you ask should be rational, achievable, and focused in order to fit within the constraints of a single project or semester, your question should also be able to be assembled into a broader picture. This helps you as a researcher create a unique narrative around which you can define your academic career. This is useful for a number of reasons. First, building up blocks of questions defines you as a domain expert. People start to associate you with a sub-field, or field, and \u0026ndash; if it is interesting to the community \u0026ndash; you will probably become more sought out to speak, collaborate on proposals or papers, etc.. Second, it gives you a mastery of a research pipeline that allows you to ask newer, related questions better and faster. Like the gravity in a black hole, the better you are at something, the better you become, and it accelerates. Finally, having multiple pieces that you can fit together in a variety of ways allows you to reframe your expertise as the field evolves. While some topics become \u0026ldquo;solved\u0026rdquo;, if you can swap out one piece of your research for another, you can continue to remain relevant, even if some of your topics remain stale. Who knows, maybe it will become popular again, if something new comes along and makes it relevant again?\nIn summary the process of asking new questions can help you build up a research portfolio that you can remix and reframe as needed.\nLeverages your own abilities. This may be obvious, but you should ask research questions that are both interesting, and that you are best able to answer. If you are a mechanical engineer asking a research question about game theory, you may fall into some of the above pitfalls of novelty, interest, and focus\nDemonstrates your expertise Finally, a good research question also demonstrates you know enough about your field to make a novel, interesting, and relevant new contribution to the field.\nRelevant And finally, the question you ask must be answerable with the topics you learn in Foldable Robotics.\nDo I use other types of transmissions to solve a tough problem? How much of my design time am I spending on this Gears, pulleys, belts, wheels, shafts, etc Do I use alternate manufacturing methods to achieve success? 3D printing, traditional machining Is the contribution of the foldable mechanism nontrivial? Does it transform input motion to output motion in a meaningful way? Does the use of foldable techniques solve a key design problem? Is the foldable portion a mechanism or just a structure? Douglas Adams\u0026#160;\u0026#x21a9;\u0026#xfe0e;\nThis is s`till goal oriented. I said how, but I don\u0026rsquo;t care why.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://foldable-robotics.github.io/modules/project/developing-a-research-question/","tags":null,"title":"Developing a Research Question"},{"categories":null,"contents":"Introduction Developing specifications for a novel robot is difficult, especially considering how wide-open the potential design space is. I recommend a bio-inspired approach in order to simplify your design workspace. Other difficulties might involve not being able to find information in research literature. This will require a bit more inference on your part.\nWorkflow Synthesize the information you have from your biomechanics investigation into an initial specifications table. For example, if you know ground reaction forces from your paper, and some masses, try to find peak accelerations. If you know forces and velocities, try to find the power usage. If you know maximum jump height and mass, find energy required for a jump. Your template should have some critical information which must be synthesized. (10 points) Discuss whether/how you will need to scale your robot up or down, or how you can mitigate the differences. (10 points) Anatomy / Kinematics Identify a biological template you would like to start from. How does it move? How many appendages does it use to move around?\nDraw the simplest engineering representation of the system you can of your proposed mechanical system. How many rigid bodies are there? How many can be approximated as massless(1/10 of the total mass or less)? Where are the springs? Where is the (main) motor? (10 points) Identify all the joints that move during this animal\u0026rsquo;s gait1. Identify the type of motion of each joint. Is it a simple one degree of freedom joint, like a knee, or can it move about more than one axis (like an ankle or a hip)? Can you simplify the joint for one particular type of motion or does it use all its degrees of freedom during a gait? Parameters Next, identify key parameters about this template\na. size: what size scale are we talking about? a. mass: how much mass does the animal move around? a. forces: what kind of forces does the animal exert on the world?\na. energy \u0026amp; efficiency: energy consumed and produced by the animal. a. kinematics\nScale How are animals\u0026rsquo; bodies scaled? Talk about scaling laws\nWhat is this animal\u0026rsquo;s overall scale?\nAnatomically, what are the lengths of key moving body parts, such as the femur, tibia, etc?\nbody length Mass what are the major body parts and how big are they? What about inertias? does the animal often carry a \u0026ldquo;payload\u0026rdquo;? What is the upper limit of body mass reported? Motion What are the ways that motion data is collected by biologists and biomechanicists?\nGhost Crab Gecko Cockroach Bob Full, Dan Goldman, Hugh Herr, George Lauder\nWhat does a gait cycle look like?\nCan you find examples of this animal\u0026rsquo;s motion as it moves in the literature? Would it be possible to collect motion data \u0026ldquo;in the wild\u0026rdquo; with a video camera? What is the stride length during a typical gait cycle?\nDistance \u0026amp; Speed\nhow far does the animal move in a single stride how fast does the animal move? Unscaled Scaled Forces Find the ground reaction forces involved with completing a typical locomotion cycle. (10 points) A figure from literature (with the appropriate references) of the animal during a locomotion cycle typical of the one you are studying will suffice. Make sure you include the units. Energy Based on mass and a knowledge of the duration and magnitude of the ground/world reaction forces involved in a single stride, what mechanical energy / power would be required to complete a single locomotion cycle? How much energy is metabolized to create that output motion What is the locomotion effcicency? How could you calculate this? How much respiration energy / power is used? If you can\u0026rsquo;t find it, are there references for a similar animal you could scale? Can you find a reference that tells you how to scale respiration energy across different size animals? Mechanical Analogs Exercise: Finish the following table. item var ref calc value unit Mass $m$ kg Size $l_0$ m Running speed $v_{x}$ $\\frac{\\text{m}}{\\text{s}}$ Ground reaction force(max) $f_{y_{max}}$ N Kinetic Energy $K$ $\\frac{mv_{x}^2}{2}$ J Respiration Rate J Live document posted here: https://docs.google.com/spreadsheets/d/1cUHzWVrsvnuZnJfA5co5CvMN9mpavxyOL-AWfa9b9Bc/edit?usp=sharing\nBodies / links that don\u0026rsquo;t move (or whose motion is negligible) can be lumped together as one rigid body for the purposes of the model. For example, in human walking models, the whole upper body is often lumped together as the trunk\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://foldable-robotics.github.io/modules/biomechanics/developing-specifications/","tags":null,"title":"Developing Specifications"},{"categories":null,"contents":"Say you want to run a python package from source using a git repository. Here is a quick set of steps, using the pynamics repository as an example:\nInstall and set up git extensions. clone the pynamics repository on your local computer go here: https://github.com/idealabasu/code_pynamics click on clone and copy the path: right click in a destination directory and select the clone menu item add the path to your new repository to your system variables open up explorer, navigate to and right click on\u0026quot;this pc\u0026ndash;\u0026gt;properties\u0026ndash;\u0026gt;advanced system settings\u0026ndash;\u0026gt;environment variables\u0026quot; add a new PYTHONPATH key in your user variables if it does not exist add a path to the list of packages inside the repository folder, ie \u0026ldquo;C:\\Users\\username(wherever you\u0026rsquo;ve placed the repo)\\code_pynamics\\python\u0026rdquo;. The subfolders of this folder are all python packages that can be searched for now. test the install by importing one of the packages (subfolders of \u0026ldquo;python\u0026rdquo;) in a blank python script. ","permalink":"https://foldable-robotics.github.io/modules/python/download-and-link-to-python-packages/","tags":null,"title":"Download and Link to Python Packages"},{"categories":null,"contents":"import pynamics from pynamics.frame import Frame from pynamics.variable_types import Differentiable,Constant from pynamics.system import System from pynamics.body import Body from pynamics.dyadic import Dyadic from pynamics.output import Output,PointsOutput from pynamics.constraint import AccelerationConstraint from pynamics.particle import Particle import pynamics.integration import logging import sympy #import sympy import numpy import matplotlib.pyplot as plt from math import pi from scipy import optimize from sympy import sin import pynamics.tanh as tanh import time drag_direction=1 fit_vel=.25 f1 = 1 f2 = 1 g_k,g_b_damping,g_b_damping1= [0.30867935, 1.42946955, 1.08464536] system = System() pynamics.set_system(__name__,system) global_q = True lO = Constant(7/1000,\u0026#39;lO\u0026#39;,system) lA = Constant(33/1000,\u0026#39;lA\u0026#39;,system) lB = Constant(33/1000,\u0026#39;lB\u0026#39;,system) lC = Constant(33/1000,\u0026#39;lC\u0026#39;,system) mO = Constant(10/1000,\u0026#39;mA\u0026#39;,system) mA = Constant(2.89/1000,\u0026#39;mA\u0026#39;,system) mB = Constant(2.89/1000,\u0026#39;mB\u0026#39;,system) mC = Constant(2.89/1000,\u0026#39;mC\u0026#39;,system) k = Constant(g_k,\u0026#39;k\u0026#39;,system) k1 = Constant(0.4,\u0026#39;k1\u0026#39;,system) friction_perp = Constant(f1,\u0026#39;f_perp\u0026#39;,system) friction_par = Constant(f2,\u0026#39;f_par\u0026#39;,system) b_damping = Constant(g_b_damping,\u0026#39;b_damping\u0026#39;,system) b_damping1 = Constant(g_b_damping1,\u0026#39;b_damping1\u0026#39;,system) preload0 = Constant(0*pi/180,\u0026#39;preload0\u0026#39;,system) preload1 = Constant(0*pi/180,\u0026#39;preload1\u0026#39;,system) preload2 = Constant(0*pi/180,\u0026#39;preload2\u0026#39;,system) preload3 = Constant(0*pi/180,\u0026#39;preload3\u0026#39;,system) Ixx_O = Constant(1,\u0026#39;Ixx_O\u0026#39;,system) Iyy_O = Constant(1,\u0026#39;Iyy_O\u0026#39;,system) Izz_O = Constant(1,\u0026#39;Izz_O\u0026#39;,system) Ixx_A = Constant(1,\u0026#39;Ixx_A\u0026#39;,system) Iyy_A = Constant(1,\u0026#39;Iyy_A\u0026#39;,system) Izz_A = Constant(1,\u0026#39;Izz_A\u0026#39;,system) Ixx_B = Constant(1,\u0026#39;Ixx_B\u0026#39;,system) Iyy_B = Constant(1,\u0026#39;Iyy_B\u0026#39;,system) Izz_B = Constant(1,\u0026#39;Izz_B\u0026#39;,system) Ixx_C = Constant(1,\u0026#39;Ixx_C\u0026#39;,system) Iyy_C = Constant(1,\u0026#39;Iyy_C\u0026#39;,system) Izz_C = Constant(1,\u0026#39;Izz_C\u0026#39;,system) y,y_d,y_dd = Differentiable(\u0026#39;y\u0026#39;,system) qO,qO_d,qO_dd = Differentiable(\u0026#39;qO\u0026#39;,system) qA,qA_d,qA_dd = Differentiable(\u0026#39;qA\u0026#39;,system) qB,qB_d,qB_dd = Differentiable(\u0026#39;qB\u0026#39;,system) qC,qC_d,qC_dd = Differentiable(\u0026#39;qC\u0026#39;,system) #fit_states = initial_states initialvalues = {} initialvalues[y] = 0 initialvalues[y_d] = .1 initialvalues[qO] = 0 initialvalues[qO_d] = 0 initialvalues[qA] = 0 initialvalues[qA_d] = 0 initialvalues[qB] = 0 initialvalues[qB_d] = 0 initialvalues[qC] = 0 initialvalues[qC_d] = 0 statevariables = system.get_state_variables() ini = [initialvalues[item] for item in statevariables] N = Frame(\u0026#39;N\u0026#39;,system) O = Frame(\u0026#39;O\u0026#39;,system) A = Frame(\u0026#39;A\u0026#39;,system) B = Frame(\u0026#39;B\u0026#39;,system) C = Frame(\u0026#39;C\u0026#39;,system) system.set_newtonian(N) if not global_q: O.rotate_fixed_axis(N,[0,0,1],qO,system) A.rotate_fixed_axis(O,[0,0,1],qA,system) B.rotate_fixed_axis(A,[0,0,1],qB,system) C.rotate_fixed_axis(B,[0,0,1],qC,system) else: O.rotate_fixed_axis(N,[0,0,1],qO,system) A.rotate_fixed_axis(N,[0,0,1],qA,system) B.rotate_fixed_axis(N,[0,0,1],qB,system) C.rotate_fixed_axis(N,[0,0,1],qC,system) pNO= 0*N.x + y*N.y pOA= lO*N.x + y*N.y pAB= pOA+lA*A.x pBC = pAB + lB*B.x pCtip = pBC + lC*C.x pOcm= pNO +lO/2*N.x pAcm= pOA+lA/2*A.x pBcm= pAB+lB/2*B.x pCcm= pBC+lC/2*C.x wNO = N.get_w_to(O) wOA = N.get_w_to(A) wAB = A.get_w_to(B) wBC = B.get_w_to(C) IO = Dyadic.build(O,Ixx_O,Iyy_O,Izz_O) IA = Dyadic.build(A,Ixx_A,Iyy_A,Izz_A) IB = Dyadic.build(B,Ixx_B,Iyy_B,Izz_B) IC = Dyadic.build(C,Ixx_C,Iyy_C,Izz_C) BodyO = Body(\u0026#39;BodyO\u0026#39;,O,pOcm,mO,IO,system) BodyA = Body(\u0026#39;BodyA\u0026#39;,A,pAcm,mA,IA,system) BodyB = Body(\u0026#39;BodyB\u0026#39;,B,pBcm,mB,IB,system) BodyC = Body(\u0026#39;BodyC\u0026#39;,C,pCcm,mC,IC,system) vAcm = pAcm.time_derivative() vBcm = pBcm.time_derivative() vCcm = pCcm.time_derivative() system.add_spring_force1(k1+10000*(qA+abs(qA)),(qA-qO-preload1)*N.z,wOA) system.add_spring_force1(k+10000*(qB+abs(qB)),(qB-qA-preload2)*N.z,wAB) system.add_spring_force1(k+10000*(qC+abs(qC)),(qC-qB-preload3)*N.z,wBC) #new Method use nJoint nvAcm = 1/vAcm.length()*vAcm nvBcm = 1/vBcm.length()*vBcm nvCcm = 1/vCcm.length()*vCcm vSoil = drag_direction*1*N.y nSoil = 1/vSoil.length()*vSoil if fit_vel ==0: vSoil = 1*1*N.y nSoil = 1/vSoil.length()*vSoil faperp = friction_perp*nSoil.dot(A.y)*A.y fapar = friction_par*nSoil.dot(A.x)*A.x system.addforce(-(faperp+fapar),vAcm) fbperp = friction_perp*nSoil.dot(B.y)*B.y fbpar = friction_par*nSoil.dot(B.x)*B.x system.addforce(-(fbperp+fbpar),vBcm) fcperp = friction_perp*nSoil.dot(C.y)*C.y fcpar = friction_par*nSoil.dot(C.x)*C.x system.addforce(-(fcperp+fcpar),vCcm) else: faperp = friction_perp*nvAcm.dot(A.y)*A.y fapar = friction_par*nvAcm.dot(A.x)*A.x system.addforce(-(faperp+fapar),vAcm) fbperp = friction_perp*nvBcm.dot(B.y)*B.y fbpar = friction_par*nvBcm.dot(B.x)*B.x system.addforce(-(fbperp+fbpar),vBcm) fcperp = friction_perp*nvCcm.dot(C.y)*C.y fcpar = friction_par*nvCcm.dot(C.x)*C.x system.addforce(-(fcperp+fcpar),vCcm) system.addforce(-b_damping1*wOA,wOA) system.addforce(-b_damping*wAB,wAB) system.addforce(-b_damping*wBC,wBC) eq = [] eq_d=[(system.derivative(item)) for item in eq] eq_d.append(y_d-fit_vel) eq_dd=[(system.derivative(item)) for item in eq_d] ac = AccelerationConstraint(eq_dd) system.add_constraint(ac) f,ma = system.getdynamics() func1 = system.state_space_post_invert(f,ma,constants = system.constant_values) points = [pNO,pOA,pAB,pBC,pCtip] #constants = system.constant_values tinitial=0 tstep=1/30 tfinal=5 t = numpy.r_[tinitial:tfinal:tstep] states=pynamics.integration.integrate_odeint(func1,ini,t, args=({},)) 2022-06-21 06:52:13,457 - pynamics.system - INFO - getting dynamic equations 2022-06-21 06:52:13,734 - pynamics.system - INFO - solving a = f/m and creating function 2022-06-21 06:52:19,247 - pynamics.system - INFO - substituting constrained in Ma-f. 2022-06-21 06:52:19,589 - pynamics.system - INFO - done solving a = f/m and creating function 2022-06-21 06:52:19,595 - pynamics.integration - INFO - beginning integration 2022-06-21 06:52:19,596 - pynamics.system - INFO - integration at time 0000.00 2022-06-21 06:52:19,805 - pynamics.integration - INFO - finished integration points_output = PointsOutput(points,system,constant_values = system.constant_values) y = points_output.calc(states,t) final = numpy.asarray(states[-1,:]) time1 = time.time() points_output.animate(fps = 30,movie_name = str(time1)+\u0026#39;video_1.mp4\u0026#39;,lw=2,marker=\u0026#39;o\u0026#39;,color=(1,0,0,1),linestyle=\u0026#39;-\u0026#39;) 2022-06-21 06:52:19,825 - pynamics.output - INFO - calculating outputs 2022-06-21 06:52:19,830 - pynamics.output - INFO - done calculating outputs \u0026lt;AxesSubplot:\u0026gt; from matplotlib import animation, rc from IPython.display import HTML HTML(points_output.anim.to_html5_video()) Your browser does not support the video tag. ","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/drag-in-granular-media/","tags":null,"title":"Drag in Granular Media"},{"categories":null,"contents":"Dyads Dyads and dyadics are a difficult concept to understand, initially. Dyads may be defined in a number of ways, but the way which makes most sense to me is that dyads are the vector-based mathematical representation for physical phenomena that contain coupled, multi-dimensional information. An example of a physical system that contains multi-dimensional information is inertia. Inertia describes the spatial distribution of mass throughout a rigid body, and this spatial distribution comes encoded in a structure in which mass is represented in two-vector pairs.\nMathematically, operating on a dyad from the left or the right produces a different answer. if ${d}=(\\vec{v}_1,\\vec{v}_2)$, then $\\vec{v}_3\\cdot d=(\\vec{v}_3\\cdot \\vec{v}_1)\\vec{v}_2$. The ordering of vectors in a dyad is fixed, meaning that $\\vec{v} \\cdot d \\neq d \\cdot \\vec{v}$. Dyads may be multiplied by scalars, which are commutative. Thus $3*(v1,v2) = (3v1,v2) = (v1,3v2)$ are all equivalent statements. Thus, most often, scalar values are brought out of dyads so that only unit vectors are conatined within the dyad itself.\nIn pynamics, the dyad class represents a two-vector collection. Dot and cross product operations are supported between vectors and dyads. A dyad class in pynamics may be constructed by supplying any two basis vectors.\nimport pynamics from pynamics.frame import Frame from pynamics.dyadic import Dyad from pynamics.system import System system = System() pynamics.set_system(__name__,system) A = Frame(\u0026#39;A\u0026#39;) d = Dyad(A.x,3*A.y) v = A.x+A.y+A.z d.dot(v) 3*A.x v.dot(d) 3*A.y Dyadics A dyadic is a linear combination of dyads, just as a vector is a linear combination of one or more basis vectors. In pynamics, dot product, cross product, and addition operations between dyadics and vectors are supported.\nd = Dyad(A.x,3*A.y) e = Dyad(A.z,3*A.x) my_dyadic = d+e my_dyadic (A.x, 3*A.y)+(A.z, 3*A.x) type(my_dyadic) pynamics.dyadic.Dyadic v.dot(d+e) 3*A.x + 3*A.y Inertia Inertia is the term for the distribution of mass throughout a rigid body. Depending on the point about which your system rotates, that distribution of mass is different. That is why, in pynamics the inertia class needs quite a bit of information before you can use it.\n","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/04-dyads-dyadics-and-inertia/","tags":null,"title":"Dyads, Dyadics, and Inertia"},{"categories":null,"contents":"The relationship between the bending moment and the radius of curvature($\\rho$) for a beam of Young\u0026rsquo;s modulus $E$ and cross-sectional moment of inertia(second moment of area) $I$ is given by\n$$ M=-\\frac{EI}{\\rho} $$\nNow let\u0026rsquo;s say $\\omega(x)$ describes the deflection of a beam in the z direction as a function of its length, $x$. When deflections are small \u0026ndash; assumed in the Euler-Bernoulli model, then the second derivative can serve as an approximate the radius of curvature (using the small angle approximation $\\sin{\\theta}=\\theta$), making\n$$\\frac{1}{\\rho} = \\frac{\\delta^2\\omega}{\\delta x^2}$$\nand\n$$M = -EI\\frac{\\delta^2 \\omega(x)}{\\delta x^2}$$\n$$\\frac{\\delta^2}{\\delta x^2}\\left(EI\\frac{\\delta^2 \\omega(x)}{\\delta x^2}\\right) = p(x)$$\nwhere $p$ is a distributed load, $E$ is Young\u0026rsquo;s Modulus, and $I$ is the\n$$\\frac{\\delta^2 \\omega}{\\delta x^2} =\\frac{M}{EI}$$\nwhere $M$ is the moment,\n%matplotlib inline # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; copyright 2016-2017 Dan Aukes \u0026#34;\u0026#34;\u0026#34; import matplotlib.pyplot as plt import sympy import numpy from sympy import pi b,h,theta,P,L,E,I,x,w,M,q,p,A,B,C,D,p0,M0=sympy.symbols(\u0026#39;b,h,theta,P,L,E,I,x,w,M,q,p,A,B,C,D,p0,M0\u0026#39;) def plot_x(w,subs1=None): subs1 = subs1 or {} w = w.subs(subs1) unit = dict([(item,1) for item in w.atoms(sympy.Symbol) if item!=x]) unit.update(subs1) w_num = w.subs(unit) f_w = sympy.lambdify(x,w_num) xn = numpy.r_[0:unit[L]:100j] yn = f_w(xn) plt.plot(xn,yn) plt.axis(\u0026#39;equal\u0026#39;) First we need to compute $M(x)$, the moment on the beam as a function of the loading.\nM_dd = p M_d = sympy.integrate(M_dd,(x,0,x)) + A M_d $\\displaystyle A + p x$\nM = sympy.integrate(M_d,(x,0,x)) + B M $\\displaystyle A x + B + \\frac{p x^{2}}{2}$\nw_d = sympy.integrate(M/E/I,(x,0,x)) + C w_d $\\displaystyle \\frac{A x^{2}}{2 E I} + \\frac{B x}{E I} + C + \\frac{p x^{3}}{6 E I}$\nw = sympy.integrate(w_d,(x,0,x)) + D w $\\displaystyle \\frac{A x^{3}}{6 E I} + \\frac{B x^{2}}{2 E I} + C x + D + \\frac{p x^{4}}{24 E I}$\nFor a point load $P$ exerted on a beam at length ($x=l$), the moment can be expressed as:\n$$M(x) = P(l-x)$$\neq1 = M_d.subs({x:L}) - P eq2 = M.subs({x:L}) - 0 eq3 = w_d.subs({x:0}) - 0 eq4 = w.subs({x:0}) - 0 eq5 = M_dd - 0 sol =sympy.solve([eq1,eq2,eq3,eq4,eq5],(A,B,C,D,p)) sol {A: P, B: -L*P, C: 0, D: 0, p: 0} w2 = w.subs(sol) w2.simplify() $\\displaystyle \\frac{P x^{2} \\left(- 3 L + x\\right)}{6 E I}$\nw_d2 = w_d.subs(sol) w_d2.simplify() $\\displaystyle \\frac{P x \\left(- 2 L + x\\right)}{2 E I}$\nM2=M.subs(sol) M2.simplify() $\\displaystyle P \\left(- L + x\\right)$\nw_max = w2.subs({x:L}) w_max.simplify() $\\displaystyle - \\frac{L^{3} P}{3 E I}$\nNow we can turn this process into a function\ndef calc_beam_equations(pp,E,I,eq): M_dd = pp M_d = sympy.integrate(M_dd,(x,0,x)) + A M = sympy.integrate(M_d,(x,0,x)) + B w_d = sympy.integrate(M/E/I,(x,0,x)) + C w = sympy.integrate(w_d,(x,0,x)) + D eq1 = M_d.subs(eq[0][0]) - eq[0][1] eq2 = M.subs(eq[1][0]) - eq[1][1] eq3 = w_d.subs(eq[2][0]) - eq[2][1] eq4 = w.subs(eq[3][0]) - eq[3][1] eq = [eq1,eq2,eq3,eq4] sol =sympy.solve(eq,(A,B,C,D)) w2 = w.subs(sol) w2 = w2.simplify() w_d2 = w_d.subs(sol) w_d2 = w_d2.simplify() M2=M.subs(sol) M2 = M2.simplify() return w2,w_d2,M2 Repeating the point load\neq1 = {x:L},P eq2 = {x:L},0 eq3 = {x:0},0 eq4 = {x:0},0 eq = [eq1,eq2,eq3,eq4] w,w_d,M = calc_beam_equations(0,E,I,eq) plot_x(w) For a distibuted load $p(x)$,\neq1 = {x:L},0 eq2 = {x:L},0 eq3 = {x:0},0 eq4 = {x:0},0 eq = [eq1,eq2,eq3,eq4] w,w_d,M = calc_beam_equations(-p,E,I,eq) plot_x(w) w $\\displaystyle \\frac{p x^{2} \\left(- 6 L^{2} + 4 L x - x^{2}\\right)}{24 E I}$\nw_d $\\displaystyle \\frac{p x \\left(- 3 L^{2} + 3 L x - x^{2}\\right)}{6 E I}$\nM $\\displaystyle \\frac{p \\left(- L^{2} + 2 L x - x^{2}\\right)}{2}$\nw_max = w.subs({x:L}) w_max.simplify() $\\displaystyle - \\frac{L^{4} p}{8 E I}$\nFor a distributed load where $p = p_0\\frac{L-x}{L}$, the boundary conditions stay the same but the function is different\nw,w_d,M = calc_beam_equations(-(p0/L*(L-x)),E,I,eq) plot_x(w) w $\\displaystyle \\frac{p_{0} x^{2} \\left(5 L \\left(- 2 L^{2} + 2 L x - x^{2}\\right) + x^{3}\\right)}{120 E I L}$\nw_d $\\displaystyle \\frac{p_{0} x \\left(2 L \\left(- 2 L^{2} + 3 L x - 2 x^{2}\\right) + x^{3}\\right)}{24 E I L}$\nM $\\displaystyle \\frac{p_{0} \\left(L \\left(- L^{2} + 3 L x - 3 x^{2}\\right) + x^{3}\\right)}{6 L}$\nw_max = w.subs({x:L}) w_max.simplify() $\\displaystyle - \\frac{L^{4} p_{0}}{30 E I}$\neq1 = {x:L},P eq2 = {x:L},0 eq3 = {x:0},0 eq4 = {x:0},0 eq = [eq1,eq2,eq3,eq4] Now what about a cross sectional area that changes as a function of x? As we know, the cross sectional moment of inertia $I$ for a rectangular beam of width $b$ and thickness $h$ is $$I=\\frac{bh^3}{12}$$. If we make b a function of x, for example $b(x)=L-x$, what happens to the curvature?\nb2=(L-x) I2 = b2*h**3/12 w,w_d,M = calc_beam_equations(0,E,I2,eq) plot_x(w,{P:.1,L:1}) w $\\displaystyle - \\frac{6 P x^{2}}{E h^{3}}$\nw_d $\\displaystyle - \\frac{12 P x}{E h^{3}}$\nM $\\displaystyle P \\left(- L + x\\right)$\nAs you can see it grows linearly as a function of x. Therefore, a cross section that decreases linearly is good at equalizing the radius of curvature (and the stresses) in a beam\neq1 = {x:L},P eq2 = {x:L},0 eq3 = {x:0},0 eq4 = {x:0},0 eq = [eq1,eq2,eq3,eq4] I2 = b*h**3/12 w,w_d,M = calc_beam_equations(0,E,I2,eq) subs1 = {b:.01,h:.01,E:1e7,L:.1,P:.1} w = w.subs(subs1) w $\\displaystyle 2.0 x^{2} \\left(x - 0.3\\right)$\nw_max = w.subs({x:.1}) w_max $\\displaystyle -0.004$\nplot_x(w,subs1) ","permalink":"https://foldable-robotics.github.io/modules/compliance/generated/euler-bernoulli-beams/","tags":null,"title":"Euler-Bernoulli Beams"},{"categories":null,"contents":"This example shows how to implement contact and friction using a penalty method and damping\n# -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Written by Daniel M. Aukes Email: danaukes\u0026lt;at\u0026gt;gmail.com Please see LICENSE for full license. \u0026#34;\u0026#34;\u0026#34; import sympy sympy.init_printing(pretty_print=False) import pynamics from pynamics.frame import Frame from pynamics.variable_types import Differentiable,Constant,Variable from pynamics.system import System from pynamics.body import Body from pynamics.dyadic import Dyadic from pynamics.output import Output,PointsOutput from pynamics.particle import Particle import pynamics.integration import pynamics.tanh import sympy import numpy import matplotlib.pyplot as plt plt.ion() from math import pi system = System() pynamics.set_system(__name__,system) tol = 1e-4 error_tol = 1e-10 m1 = Constant(1e0,\u0026#39;m1\u0026#39;,system) m2 = Constant(1e0,\u0026#39;m2\u0026#39;,system) l0 = Constant(1,\u0026#39;l0\u0026#39;,system) g = Constant(9.81,\u0026#39;g\u0026#39;,system) k_constraint = Constant(1e4,\u0026#39;k_constraint\u0026#39;,system) b_constraint = Constant(1e5,\u0026#39;b_constraint\u0026#39;,system) tinitial = 0 tfinal = 10 fps = 30 tstep = 1/fps t = numpy.r_[tinitial:tfinal:tstep] x1,x1_d,x1_dd = Differentiable(\u0026#39;x1\u0026#39;,system) y1,y1_d,y1_dd = Differentiable(\u0026#39;y1\u0026#39;,system) q1,q1_d,q1_dd = Differentiable(\u0026#39;q1\u0026#39;,system) vini = 5 aini = -60*pi/180 initialvalues = {} initialvalues[x1]=0 initialvalues[x1_d]=2 initialvalues[y1]=1 initialvalues[y1_d]=10 initialvalues[q1]=10*pi/180 initialvalues[q1_d]=-10 statevariables = system.get_state_variables() ini = [initialvalues[item] for item in statevariables] N = Frame(\u0026#39;N\u0026#39;) system.set_newtonian(N) A = Frame(\u0026#39;A\u0026#39;) A.rotate_fixed_axis_directed(N,[0,0,1],q1) pNA=0*N.x pm1 = x1*N.x + y1*N.y pm2 = pm1+l0*A.y Particle1 = Particle(pm1,m1,\u0026#39;Particle1\u0026#39;,system) Particle2 = Particle(pm2,m2,\u0026#39;Particle2\u0026#39;,system) vpm1 = pm1.time_derivative(N,system) vpm2 = pm2.time_derivative(N,system) system.addforcegravity(-g*N.y) y2 = pm2.dot(N.y) f_floor2 = (y2**2)**.5 - y2 f_floor2_d = system.derivative(f_floor2) system.addforce(-k_constraint*f_floor2*-N.y,vpm2) system.addforce(-b_constraint*f_floor2*vpm2,vpm2) #system.addforce(-b_constraint*f_floor2*f_floor2_d*-N.y,vpm2) \u0026lt;pynamics.force.Force at 0x7f59f397e750\u0026gt; f_floor1 = (y1**2)**.5 - y1 f_floor1_d = system.derivative(f_floor1) system.addforce(-k_constraint*f_floor1*-N.y,vpm1) system.addforce(-b_constraint*f_floor1*vpm1,vpm1) #system.addforce(-b_constraint*f_floor1*f_floor1_d*-N.y,vpm1) \u0026lt;pynamics.force.Force at 0x7f59f3989410\u0026gt; eq = [] f,ma = system.getdynamics() func = system.state_space_post_invert(f,ma) constants = system.constant_values.copy() # constants[b_constraint]=0 states=pynamics.integration.integrate_odeint(func,ini,t,rtol = tol, atol = tol, args=({\u0026#39;constants\u0026#39;:constants},)) points = [pm1,pm2] po = PointsOutput(points, system, constant_values=system.constant_values) po.calc(states) constants = system.constant_values.copy() constants[b_constraint]=1e3 states=pynamics.integration.integrate_odeint(func,ini,t,rtol = tol, atol = tol, args=({\u0026#39;constants\u0026#39;:constants},)) points = [pm1,pm2] po2 = PointsOutput(points, system, constant_values=system.constant_values) po2.calc(states) constants[b_constraint]=0 states=pynamics.integration.integrate_odeint(func,ini,t,rtol = tol, atol = tol, args=({\u0026#39;constants\u0026#39;:constants},)) points = [pm1,pm2] po3 = PointsOutput(points, system, constant_values=system.constant_values) po3.calc(states) po.plot_time() po.animate(fps = fps, movie_name=\u0026#39;bouncy-mod1.mp4\u0026#39;,lw=2,marker=\u0026#39;o\u0026#39;) po2.plot_time() po2.animate(fps = fps, movie_name=\u0026#39;bouncy-mod2.mp4\u0026#39;,lw=2,marker=\u0026#39;o\u0026#39;) po3.plot_time() po3.animate(fps = fps, movie_name=\u0026#39;bouncy-mod3.mp4\u0026#39;,lw=2,marker=\u0026#39;o\u0026#39;) 2021-03-08 16:16:41,176 - pynamics.system - INFO - getting dynamic equations 2021-03-08 16:16:41,233 - pynamics.system - INFO - solving a = f/m and creating function 2021-03-08 16:16:41,236 - pynamics.system - INFO - substituting constrained in Ma-f. 2021-03-08 16:16:41,370 - pynamics.system - INFO - done solving a = f/m and creating function 2021-03-08 16:16:41,434 - pynamics.integration - INFO - beginning integration 2021-03-08 16:16:41,435 - pynamics.system - INFO - integration at time 0000.00 2021-03-08 16:16:41,648 - pynamics.integration - INFO - finished integration 2021-03-08 16:16:41,656 - pynamics.output - INFO - calculating outputs 2021-03-08 16:16:41,660 - pynamics.output - INFO - done calculating outputs 2021-03-08 16:16:41,662 - pynamics.integration - INFO - beginning integration 2021-03-08 16:16:41,720 - pynamics.system - INFO - integration at time 0002.33 2021-03-08 16:16:41,949 - pynamics.system - INFO - integration at time 0005.39 2021-03-08 16:16:42,176 - pynamics.system - INFO - integration at time 0006.96 2021-03-08 16:16:42,398 - pynamics.system - INFO - integration at time 0007.98 2021-03-08 16:16:42,615 - pynamics.system - INFO - integration at time 0008.79 2021-03-08 16:16:42,832 - pynamics.system - INFO - integration at time 0009.42 2021-03-08 16:16:43,050 - pynamics.system - INFO - integration at time 0009.94 2021-03-08 16:16:43,066 - pynamics.integration - INFO - finished integration 2021-03-08 16:16:43,073 - pynamics.output - INFO - calculating outputs 2021-03-08 16:16:43,077 - pynamics.output - INFO - done calculating outputs 2021-03-08 16:16:43,079 - pynamics.integration - INFO - beginning integration 2021-03-08 16:16:43,286 - pynamics.system - INFO - integration at time 0007.66 2021-03-08 16:16:43,342 - pynamics.integration - INFO - finished integration 2021-03-08 16:16:43,348 - pynamics.output - INFO - calculating outputs 2021-03-08 16:16:43,353 - pynamics.output - INFO - done calculating outputs \u0026lt;AxesSubplot:\u0026gt; from matplotlib import animation, rc from IPython.display import HTML HTML(po.anim.to_html5_video()) Your browser does not support the video tag. HTML(po2.anim.to_html5_video()) Your browser does not support the video tag. HTML(po3.anim.to_html5_video()) Your browser does not support the video tag. ","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/09-falling-rod-example/","tags":null,"title":"Falling Rod Example"},{"categories":null,"contents":"Introduction The goal of this tutorial is to get you familiar computing the stiffness of a laminate using FEA. You may use any FEA tool you are comfortable with, or the code supplied in class as a starting point.\nResources Euler-Bernoulli Beams Solidworks FEA Tutorial Procedure Pick one or more geometries of your team\u0026rsquo;s robot design to focus on. Perhaps a \u0026ldquo;rigid\u0026rdquo; link which you would like to program to exhibit a certain springyness, a long skinny link which exhibits too much deflection, or, if your system is sufficiently rigid already, your flexible joint material, in order to \u0026ldquo;program\u0026rdquo; a desired springiness into your team\u0026rsquo;s joint dynamics. Create a CAD or scripted model for that link, replicating the geometry and using the experimentally-collected value for Young\u0026rsquo;s modulus you extracted from your previous individual assignment. You may use any finite element software you are comfortable with. Define boundary conditions that are appropriate for your team\u0026rsquo;s particular design and use case. Define loading conditions that are appropriate for your team\u0026rsquo;s particular design and use case. Compute and plot the deflection of your geometry under load. Compute and plot the stress in your design. Identify the region(s) of maximum stress. (Von Mises stress is fine) Implement a design change which improves the performance of this geometry for your stated use case. Discussion Points Answer the following questions when writing up your report\nWhat is your identified geometry, and why was it selected? How will modeling the deformation of this geometry inform the development of your robot? What FEA simulation tool did you select and why? What boundary conditions did you use, and why did you use them? Connect your answer back to the geometry you have selected and how you are considering that item\u0026rsquo;s deflection in your prototype. What loading conditions did you use, and why did you use them? Connect your answer back to the geometry you have selected and how you are considering that item\u0026rsquo;s deflection in your prototype. How do you expect your geometry to fail, and under what conditions? What design change did you implement, and how did that impact/improve the desired peformance of your element and system? Compare the simulated results against your experiences testing your prior prototype. ","permalink":"https://foldable-robotics.github.io/modules/compliance/laminate-fea/","tags":null,"title":"FEA Modeling"},{"categories":null,"contents":"Introduction This example takes us through the beginning of the triple pendulum example again.\n# -*- coding: utf-8 -*- import pynamics from pynamics.frame import Frame from pynamics.variable_types import Differentiable,Constant from pynamics.system import System from pynamics.body import Body from pynamics.dyadic import Dyadic from pynamics.output import Output,PointsOutput from pynamics.particle import Particle import pynamics.integration import numpy import matplotlib.pyplot as plt plt.ion() from math import pi We need to import some additional libraries for optimization and interpolation\nimport logging import pynamics.integration import pynamics.system import numpy.random import scipy.interpolate import scipy.optimize import cma The rest of this code proceeds as in the triple pendulum example\u0026hellip;\nsystem = System() pynamics.set_system(__name__,system) lA = Constant(1,\u0026#39;lA\u0026#39;,system) lB = Constant(1,\u0026#39;lB\u0026#39;,system) lC = Constant(1,\u0026#39;lC\u0026#39;,system) mA = Constant(1,\u0026#39;mA\u0026#39;,system) mB = Constant(1,\u0026#39;mB\u0026#39;,system) mC = Constant(1,\u0026#39;mC\u0026#39;,system) g = Constant(9.81,\u0026#39;g\u0026#39;,system) b = Constant(1e1,\u0026#39;b\u0026#39;,system) k = Constant(1e1,\u0026#39;k\u0026#39;,system) preload1 = Constant(0*pi/180,\u0026#39;preload1\u0026#39;,system) preload2 = Constant(0*pi/180,\u0026#39;preload2\u0026#39;,system) preload3 = Constant(0*pi/180,\u0026#39;preload3\u0026#39;,system) Ixx_A = Constant(1,\u0026#39;Ixx_A\u0026#39;,system) Iyy_A = Constant(1,\u0026#39;Iyy_A\u0026#39;,system) Izz_A = Constant(1,\u0026#39;Izz_A\u0026#39;,system) Ixx_B = Constant(1,\u0026#39;Ixx_B\u0026#39;,system) Iyy_B = Constant(1,\u0026#39;Iyy_B\u0026#39;,system) Izz_B = Constant(1,\u0026#39;Izz_B\u0026#39;,system) Ixx_C = Constant(1,\u0026#39;Ixx_C\u0026#39;,system) Iyy_C = Constant(1,\u0026#39;Iyy_C\u0026#39;,system) Izz_C = Constant(1,\u0026#39;Izz_C\u0026#39;,system) tol = 1e-12 tinitial = 0 tfinal = 10 fps = 30 tstep = 1/fps t = numpy.r_[tinitial:tfinal:tstep] qA,qA_d,qA_dd = Differentiable(\u0026#39;qA\u0026#39;,system) qB,qB_d,qB_dd = Differentiable(\u0026#39;qB\u0026#39;,system) qC,qC_d,qC_dd = Differentiable(\u0026#39;qC\u0026#39;,system) initialvalues = {} initialvalues[qA]=-45*pi/180 initialvalues[qA_d]=0*pi/180 initialvalues[qB]=0*pi/180 initialvalues[qB_d]=0*pi/180 initialvalues[qC]=0*pi/180 initialvalues[qC_d]=0*pi/180 statevariables = system.get_state_variables() ini = [initialvalues[item] for item in statevariables] N = Frame(\u0026#39;N\u0026#39;) A = Frame(\u0026#39;A\u0026#39;) B = Frame(\u0026#39;B\u0026#39;) C = Frame(\u0026#39;C\u0026#39;) system.set_newtonian(N) A.rotate_fixed_axis_directed(N,[0,0,1],qA,system) B.rotate_fixed_axis_directed(A,[0,0,1],qB,system) C.rotate_fixed_axis_directed(B,[0,0,1],qC,system) pNA=0*N.x pAB=pNA+lA*A.x pBC = pAB + lB*B.x pCtip = pBC + lC*C.x pAcm=pNA+lA/2*A.x pBcm=pAB+lB/2*B.x pCcm=pBC+lC/2*C.x wNA = N.getw_(A) wAB = A.getw_(B) wBC = B.getw_(C) IA = Dyadic.build(A,Ixx_A,Iyy_A,Izz_A) IB = Dyadic.build(B,Ixx_B,Iyy_B,Izz_B) IC = Dyadic.build(C,Ixx_C,Iyy_C,Izz_C) BodyA = Body(\u0026#39;BodyA\u0026#39;,A,pAcm,mA,IA,system) BodyB = Body(\u0026#39;BodyB\u0026#39;,B,pBcm,mB,IB,system) BodyC = Body(\u0026#39;BodyC\u0026#39;,C,pCcm,mC,IC,system) system.addforce(-b*wNA,wNA) system.addforce(-b*wAB,wAB) system.addforce(-b*wBC,wBC) system.add_spring_force1(k,(qA-preload1)*N.z,wNA) system.add_spring_force1(k,(qB-preload2)*N.z,wAB) system.add_spring_force1(k,(qC-preload3)*N.z,wBC) system.addforcegravity(-g*N.y) We\u0026rsquo;re going to run this example without constraints\neq = [] # eq.append(pCtip.dot(N.y)) eq_d=[(system.derivative(item)) for item in eq] eq_dd=[(system.derivative(item)) for item in eq_d] Proceeding\u0026hellip;\nf,ma = system.getdynamics() 2020-12-18 11:00:32,404 - pynamics.system - INFO - getting dynamic equations Modifications Now here\u0026rsquo;s where the code diverges. Instead of just integrating the system with the values specified when the constants were created, we\u0026rsquo;re going to split our set of constants into ones we know from calculating them, measuring them, or specifying them, and the constants we don\u0026rsquo;t know because they are difficult to measure independently or only manifest in the full system. In other words, we are separating our constants into ones we are supplying ourselves to the model, and the ones we are hoping to find using optimization\nIn this case, as an example, we specify that the damping ratio and joint stiffness are unknown:\nunknown_constants = [b,k] From the set of system constants already defined, we can say that all the other constants are \u0026ldquo;known\u0026rdquo;; we use the default values specified above for these\nknown_constants = list(set(system.constant_values.keys())-set(unknown_constants)) known_constants = dict([(key,system.constant_values[key]) for key in known_constants]) Also different from the original triple pendulum example: we supply the known constants earlier, when we generate our integration function. This can help speed up integration by eliminating constants that do not change every time we integrate, making sympy\u0026rsquo;s substitution process shorter. Pynamics gives you the ability to specify constants when creating the state-space equations or during integration. Note that we are only supplying the known constants at this point.\nfunc1,lambda1 = system.state_space_post_invert(f,ma,eq_dd,return_lambda = True,constants = known_constants) 2020-12-18 11:00:32,827 - pynamics.system - INFO - solving a = f/m and creating function 2020-12-18 11:00:33,611 - pynamics.system - INFO - substituting constrained in Ma-f. 2020-12-18 11:00:33,842 - pynamics.system - INFO - done solving a = f/m and creating function 2020-12-18 11:00:33,842 - pynamics.system - INFO - calculating function for lambdas Now we create a function to run the integration. The input arguments (args) of this function are the unknown contants that we are trying to solve for. We then create a dictionary (constants) that we feed into the integration step, so that each time we run this function, we can be generating the motion of a system with different $b$ and $k$ values.\ndef run_sim(args): constants = dict([(key,value) for key,value in zip(unknown_constants,args)]) states=pynamics.integration.integrate(func1,ini,t,rtol=tol,atol=tol,hmin=tol, args=({\u0026#39;constants\u0026#39;:constants},)) return states Define the points that make up the motion-tracked points. Note: your data should already be normalized for the proper scaling and orientation.\npoints = [pNA,pAB,pBC,pCtip] Synthesizing Data (optional) Because I don\u0026rsquo;t have a three-link pendulum on hand, I have to create some data to which the next part of my code can be fit. The next steps create some synthetic, noisy data to demonstrate our model-fitting procedure with. In normal circumstances, you would be supplying input data in the form of x-y point values extracted from motion data. In this case, we first generate some data for a given model, add some noise, and then solve with a different initial guess for those same parameters.\nWhen modifying this code for your use, this is where you would want to insert data from your own experiment\nFirst, run the simulation at a selected set of values for b and k\ninput_data = run_sim([1.1e2,9e2]) 2020-12-18 11:00:33,933 - pynamics.integration - INFO - beginning integration 2020-12-18 11:00:33,933 - pynamics.system - INFO - integration at time 0000.00 2020-12-18 11:00:34,403 - pynamics.system - INFO - integration at time 0000.47 2020-12-18 11:00:35,057 - pynamics.system - INFO - integration at time 0001.65 2020-12-18 11:00:35,772 - pynamics.system - INFO - integration at time 0006.07 2020-12-18 11:00:36,490 - pynamics.system - INFO - integration at time 0006.76 2020-12-18 11:00:37,207 - pynamics.system - INFO - integration at time 0007.14 2020-12-18 11:00:37,776 - pynamics.system - INFO - integration at time 0007.50 2020-12-18 11:00:38,292 - pynamics.system - INFO - integration at time 0007.88 2020-12-18 11:00:39,310 - pynamics.system - INFO - integration at time 0008.26 2020-12-18 11:00:40,350 - pynamics.system - INFO - integration at time 0008.63 2020-12-18 11:00:41,111 - pynamics.system - INFO - integration at time 0008.94 2020-12-18 11:00:41,838 - pynamics.system - INFO - integration at time 0009.25 2020-12-18 11:00:42,589 - pynamics.system - INFO - integration at time 0009.57 2020-12-18 11:00:43,290 - pynamics.system - INFO - integration at time 0009.88 2020-12-18 11:00:43,475 - pynamics.integration - INFO - finished integration Next, create an Output to compute the motion of our markers\npoints_output = PointsOutput(points,system) Then compute the output points. We can plot them to see what they should look like\ny = points_output.calc(input_data) points_output.plot_time() # points_output.animate(fps = fps,movie_name = \u0026#39;render.mp4\u0026#39;,lw=2,marker=\u0026#39;o\u0026#39;,color=(1,0,0,1),linestyle=\u0026#39;-\u0026#39;) 2020-12-18 11:00:43,591 - pynamics.output - INFO - calculating outputs 2020-12-18 11:00:43,660 - pynamics.output - INFO - done calculating outputs Now create some random noise the same shape as y and add the noise to y. We\u0026rsquo;re doing this so that our optimization process gets some data that looks like we might expect it to if it were to come from a real sensor. The scaling of the error can be tuned, and will affect the model we obtain as well as the model\u0026rsquo;s accuracy. This is a problem when working with real data too.\nr = numpy.random.randn(*(y.shape))*.01 y += y + r Reshape the y vector so it is 2D, for saving to a csv file\ny = y.reshape((len(t),-1)) numpy.savetxt(\u0026#34;data.csv\u0026#34;, y, delimiter=\u0026#34;,\u0026#34;) # save the synthesized input data Loading Data Now load the input data.\ny = numpy.genfromtxt(\u0026#39;data.csv\u0026#39;, delimiter=\u0026#39;,\u0026#39;) Because raw data may not correspond exactly to the simulated time series data, you will need to interpolate the data to fit the time series you are planning to run in your simulation. Since you have predefined your time series, t, you can precomute the interpolated input data, fyt.\nfy = scipy.interpolate.interp1d(t,y.T,fill_value=\u0026#39;extrapolate\u0026#39;) fyt = fy(t).T plot the input data. You should see a small bit of noise in the system.\nplt.figure() plt.plot(t,fyt) [\u0026lt;matplotlib.lines.Line2D at 0x23f293f8730\u0026gt;, \u0026lt;matplotlib.lines.Line2D at 0x23f293f87f0\u0026gt;, \u0026lt;matplotlib.lines.Line2D at 0x23f293f88b0\u0026gt;, \u0026lt;matplotlib.lines.Line2D at 0x23f293f8970\u0026gt;, \u0026lt;matplotlib.lines.Line2D at 0x23f293f8a30\u0026gt;, \u0026lt;matplotlib.lines.Line2D at 0x23f293f8af0\u0026gt;, \u0026lt;matplotlib.lines.Line2D at 0x23f293f8bb0\u0026gt;, \u0026lt;matplotlib.lines.Line2D at 0x23f293f8c70\u0026gt;] Now define a function that calculates the sum of squared error between your guessed system and your input data. This function is in the form required to work with scipy.optimize.minimize() as well as the CMA package.\ndef calc_error(args): states_guess = run_sim(args) y_guess = points_output.calc(states_guess) y_guess = y_guess.reshape((300,-1)) error = fyt - y_guess error **=2 error = error.sum() return error stop logging integration INFO messages for simplicity\u0026rsquo;s sake.\npynamics.system.logger.setLevel(logging.ERROR) Create an initial guess for $b$ and $k$\nk_guess = [1e2,1e3] We can try to optimize using a number of methods. The scipy.optimize package\u0026rsquo;s minimize function permits one to try a variety of methods, as well as to include constraints or bounds as well as a number of other arguments.\nIn this case, we select either CMA or a scipy method based on the string in the method variable.\nNote: The optimization process can take a long time. Change the method to \u0026lsquo;CMA\u0026rsquo; or \u0026lsquo;BGFS\u0026rsquo; to actually run it.\nmethod = None #method = \u0026#39;CMA\u0026#39; #method = \u0026#39;BFGS\u0026#39; if method is None: result = k_guess elif method == \u0026#39;CMA\u0026#39;: es = cma.CMAEvolutionStrategy(k_guess, 0.5) es.logger.disp_header() while not es.stop(): X = es.ask() es.tell(X, [calc_error(x) for x in X]) es.logger.add() es.logger.disp([-1]) result = es.best.x else: sol = scipy.optimize.minimize(calc_error,k_guess,method = method) print(sol.fun) result = sol.x Now, calculate the error of the best fit model against the input data.\ncalc_error(result) 2020-12-18 11:00:45,244 - pynamics.integration - INFO - beginning integration 2020-12-18 11:00:53,745 - pynamics.integration - INFO - finished integration 2020-12-18 11:00:53,745 - pynamics.output - INFO - calculating outputs 2020-12-18 11:00:53,826 - pynamics.output - INFO - done calculating outputs 4201.982424496521 Compare that to the error of the actual model against the noisy version of itself:\ncalc_error(k_guess) 2020-12-18 11:00:53,856 - pynamics.integration - INFO - beginning integration 2020-12-18 11:01:01,706 - pynamics.integration - INFO - finished integration 2020-12-18 11:01:01,708 - pynamics.output - INFO - calculating outputs 2020-12-18 11:01:01,756 - pynamics.output - INFO - done calculating outputs 4201.982424496521 Now plot the resulting motion and render a movie of the best-fit model.\ninput_data_all2 = run_sim(result) y2 = points_output.calc(input_data_all2) points_output.plot_time() points_output.animate(fps = fps,movie_name = \u0026#39;render.mp4\u0026#39;,lw=2,marker=\u0026#39;o\u0026#39;,color=(1,0,0,1),linestyle=\u0026#39;-\u0026#39;) 2020-12-18 11:01:01,766 - pynamics.integration - INFO - beginning integration 2020-12-18 11:01:10,278 - pynamics.integration - INFO - finished integration 2020-12-18 11:01:10,278 - pynamics.output - INFO - calculating outputs 2020-12-18 11:01:10,328 - pynamics.output - INFO - done calculating outputs Required to animate in jupyter notebook:\nfrom matplotlib import animation, rc from IPython.display import HTML HTML(points_output.anim.to_html5_video()) Your browser does not support the video tag. ","permalink":"https://foldable-robotics.github.io/modules/optimization/generated/04-fitting-a-dynamic-model/","tags":null,"title":"Fitting a Dynamic Model"},{"categories":null,"contents":"Laminate Fabrication Techniques ( Citation: Pister,\u0026#32;Judy \u0026amp; al.,\u0026#32;1992 Pister,\u0026#32; K.,\u0026#32; Judy,\u0026#32; M.,\u0026#32; Burgett,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (1992). \u0026#32;Microfabricated hinges. Sensors and Actuators A: Physical,\u0026#32;33(3).\u0026#32;249–256. https://doi.org/10.1016/0924-4247(92)80172-Y ) Foldable, laminate, and origami-inspired robots have origins in early MEMS work using planar processes to make three-dimensional mechansims in silicon ( Citation: Pister,\u0026#32;Judy \u0026amp; al.,\u0026#32;1992 Pister,\u0026#32; K.,\u0026#32; Judy,\u0026#32; M.,\u0026#32; Burgett,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (1992). \u0026#32;Microfabricated hinges. Sensors and Actuators A: Physical,\u0026#32;33(3).\u0026#32;249–256. https://doi.org/10.1016/0924-4247(92)80172-Y ) , where $\\mu m$-scale hinges were fabricated in silicon to create articulated assemblies which folded out of a 2D plane. These devices were fabricated using layered MEMS techniques. Follow on work by this group combined actuation with mechansims to create motion ( Citation: Yeh,\u0026#32;Kruglick \u0026amp; al.,\u0026#32;1995 Yeh,\u0026#32; R.,\u0026#32; Kruglick,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Pister,\u0026#32; K. \u0026#32; (1995). \u0026#32; Microelectromechanical Components For Articulated Microrobots. \u0026#32; IEEE. https://doi.org/10.1109/SENSOR.1995.721817 ) . Magnets were also used to actuate and erect pop-up structures ( Citation: Yi\u0026#32;\u0026amp;\u0026#32;Liu,\u0026#32;1999 Yi,\u0026#32; Y.\u0026#32;\u0026amp;\u0026#32;Liu,\u0026#32; C. \u0026#32; (1999). \u0026#32;Magnetic actuation of hinged microstructures. Journal of Microelectromechanical Systems,\u0026#32;8(1).\u0026#32;10–17. https://doi.org/10.1109/84.749397 ) . This work was later echoed and expanded in ( Citation: Vaccaro,\u0026#32;Kubota \u0026amp; al.,\u0026#32;2003 Vaccaro,\u0026#32; P.,\u0026#32; Kubota,\u0026#32; K.,\u0026#32; Fleischmann,\u0026#32; T.,\u0026#32; Saravanan,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Aida,\u0026#32; T. \u0026#32; (2003). \u0026#32;Valley-fold and mountain-fold in the micro-origami technique. Microelectronics Journal,\u0026#32;34(5-8).\u0026#32;447–449. https://doi.org/10.1016/S0026-2692(03)00070-3 ) ( Citation: Stellman,\u0026#32;Arora \u0026amp; al.,\u0026#32;2005 Stellman,\u0026#32; P.,\u0026#32; Arora,\u0026#32; W.,\u0026#32; Takahashi,\u0026#32; S.,\u0026#32; Demaine,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Barbastathis,\u0026#32; G. \u0026#32; (2005). \u0026#32; Kinematics and Dynamics of Nanostructured Origami™. \u0026#32; ASME. https://doi.org/10.1115/IMECE2005-81824 ) . At the heart of the technologies that make these robots feasible is the concept of being able to create complex, nonlinear motion through the synthesis of common mechanical elements such as joints, springs, dampers, actuators, and sensors. Unlike common mechanical elements found in more traditional robotic systems, however, these components are fabricated with a collection of planar fabrication techniques in which a palette of compatible materials are iteratively added and removed to create a monolithic, multi-material, electro-mechanical system. These concepts have been demonstrated at nano, micro, milli, and centi-meter scales, in materials as disparate as silicon ( Citation: Pister,\u0026#32;Judy \u0026amp; al.,\u0026#32;1992 Pister,\u0026#32; K.,\u0026#32; Judy,\u0026#32; M.,\u0026#32; Burgett,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (1992). \u0026#32;Microfabricated hinges. Sensors and Actuators A: Physical,\u0026#32;33(3).\u0026#32;249–256. https://doi.org/10.1016/0924-4247(92)80172-Y ) , carbon fiber ( Citation: Wood,\u0026#32;Avadhanula \u0026amp; al.,\u0026#32;2003 Wood,\u0026#32; R.,\u0026#32; Avadhanula,\u0026#32; S.,\u0026#32; Menon,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2003). \u0026#32; Microrobotics using composite materials: the micromechanical flying insect thorax. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2003.1241863 ) , titanium ( Citation: Sreetharan,\u0026#32;Whitney \u0026amp; al.,\u0026#32;2012 Sreetharan,\u0026#32; P.,\u0026#32; Whitney,\u0026#32; J.,\u0026#32; Strauss,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;Monolithic fabrication of millimeter-scale machines. Journal of Micromechanics and Microengineering,\u0026#32;22(5).\u0026#32;55027. https://doi.org/10.1088/0960-1317/22/5/055027 ) , plastic, and cardboard ( Citation: Birkmeyer,\u0026#32;Peterson \u0026amp; al.,\u0026#32;2009 Birkmeyer,\u0026#32; P.,\u0026#32; Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2009). \u0026#32;DASH: A dynamic 16g hexapedal robot. 2009 IEEE/RSJ International Conference on Intelligent Robots and Systems.\u0026#32;2683–2689. https://doi.org/10.1109/IROS.2009.5354561 ) . These technologies make it possible to solve novel problems, either at size scales where traditional mechanical devices such as gears, bearings, and motors are unavailable, or at cost-scales which envision industrial-scale processes fabricating large numbers of cheap robots ( Citation: Cybulski,\u0026#32;Clements \u0026amp; al.,\u0026#32;2014 Cybulski,\u0026#32; J.,\u0026#32; Clements,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Prakash,\u0026#32; M. \u0026#32; (2014). \u0026#32;Foldscope: Origami-based paper microscope. PLoS ONE,\u0026#32;9(6). https://doi.org/10.1371/journal.pone.0098781 ) ( Citation: Shigemune,\u0026#32;Maeda \u0026amp; al.,\u0026#32;2015 Shigemune,\u0026#32; H.,\u0026#32; Maeda,\u0026#32; S.,\u0026#32; Hara,\u0026#32; Y.,\u0026#32; Koike,\u0026#32; U.\u0026#32;\u0026amp;\u0026#32;Hashimoto,\u0026#32; S. \u0026#32; (2015). \u0026#32; Kirigami robot: Making paper robot using desktop cutting plotter and inkjet printer. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2015.7353506 ) ( Citation: Niiyama,\u0026#32;Sun \u0026amp; al.,\u0026#32;2015 Niiyama,\u0026#32; R.,\u0026#32; Sun,\u0026#32; X.,\u0026#32; Yao,\u0026#32; L.,\u0026#32; Ishii,\u0026#32; H.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Kim,\u0026#32; S. \u0026#32; (2015). \u0026#32;Sticky Actuator: Free-Form Planar Actuators for Animated Objects. Proceedings of the Ninth International Conference on Tangible, Embedded, and Embodied Interaction - TEI ’14.\u0026#32;77–84. https://doi.org/10.1145/2677199.2680600 ) .\nThe ideas of foldable mechanisms have been realized by solving a number of problems related to design, fabrication, assembly, and\ndesign - tools for making design process go faster and for plannig manufacturing manufacturing - methods for automating fabrication and utilizing planar processes assembly - self folding techniques, support structures Foldable devices have been used to address issues in bio-inspired locomotion such as walking (Hoover, 2008), running (Birkmeyer 2009), (Haldane, 2013), (Mulgaonkar, 2018), jumping ( Citation: Koh,\u0026#32;Jung \u0026amp; al.,\u0026#32;2013 Koh,\u0026#32; J.,\u0026#32; Jung,\u0026#32; S.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32;A jumping robotic insect based on a torque reversal catapult mechanism. IEEE International Conference on Intelligent Robots and Systems.\u0026#32;3796–3801. https://doi.org/10.1109/IROS.2013.6696899 ) ( Citation: Jung,\u0026#32;Member \u0026amp; al.,\u0026#32;2014 Jung,\u0026#32; G.,\u0026#32; Member,\u0026#32; S.,\u0026#32; Kim,\u0026#32; J.,\u0026#32; Koh,\u0026#32; J.,\u0026#32; Member,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2014). \u0026#32;Role of Compliant Leg in the Flea - Inspired Jumping Mechanism. ) , and flying ( Citation: Teoh,\u0026#32;Fuller \u0026amp; al.,\u0026#32;2012 Teoh,\u0026#32; Z.,\u0026#32; Fuller,\u0026#32; S.,\u0026#32; Chirarattananon,\u0026#32; P.,\u0026#32; Prez-Arancibia,\u0026#32; N.,\u0026#32; Greenberg,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;A hovering flapping-wing microrobot with altitude control and passive upright stability. IEEE International Conference on Intelligent Robots and Systems.\u0026#32;3209–3216. https://doi.org/10.1109/IROS.2012.6386151 ) . A variety of strategies for actuating and powering foldable devices has also been investigated ( Citation: Sitti,\u0026#32;2003 Sitti,\u0026#32; M. \u0026#32; (2003). \u0026#32;Piezoelectrically actuated four-bar mechanism with two flexible links for micromechanical flying insect thorax. IEEE/ASME Transactions on Mechatronics,\u0026#32;8(1).\u0026#32;26–36. https://doi.org/10.1109/TMECH.2003.809126 ) ( Citation: Karpelson\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32;2008 Karpelson,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2008). \u0026#32;A review of actuation and power electronics options for flapping-wing robotic insects. 2008 IEEE International Conference on Robotics and Automation.\u0026#32;779–786. https://doi.org/10.1109/ROBOT.2008.4543300 ) ( Citation: Niiyama,\u0026#32;Rus \u0026amp; al.,\u0026#32;2014 Niiyama,\u0026#32; R.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Kim,\u0026#32; S. \u0026#32; (2014). \u0026#32;Pouch Motors: Printable/Inflatable Soft Actuators for Robotics. IEEE International Conference on Robotics and Automation (ICRA).\u0026#32;6332–6337. https://doi.org/10.1109/ICRA.2014.6907793 ) .\nRobots Laminate fabrication techniques have recently gained attention as a complete solution for rapidly developing active mechanisms at small scales for use in robots that fly ( Citation: Sreetharan,\u0026#32;Whitney \u0026amp; al.,\u0026#32;2012 Sreetharan,\u0026#32; P.,\u0026#32; Whitney,\u0026#32; J.,\u0026#32; Strauss,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;Monolithic fabrication of millimeter-scale machines. Journal of Micromechanics and Microengineering,\u0026#32;22(5).\u0026#32;55027. https://doi.org/10.1088/0960-1317/22/5/055027 ) ( Citation: Teoh,\u0026#32;Fuller \u0026amp; al.,\u0026#32;2012 Teoh,\u0026#32; Z.,\u0026#32; Fuller,\u0026#32; S.,\u0026#32; Chirarattananon,\u0026#32; P.,\u0026#32; Prez-Arancibia,\u0026#32; N.,\u0026#32; Greenberg,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;A hovering flapping-wing microrobot with altitude control and passive upright stability. IEEE International Conference on Intelligent Robots and Systems.\u0026#32;3209–3216. https://doi.org/10.1109/IROS.2012.6386151 ) ( Citation: Jafferis,\u0026#32;Helbling \u0026amp; al.,\u0026#32;2019 Jafferis,\u0026#32; N.,\u0026#32; Helbling,\u0026#32; E.,\u0026#32; Karpelson,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2019). \u0026#32;Untethered Flight of an Insect-Sized Flapping-Wing Microscale Aerial Vehicle. Nature. ) , walk ( Citation: Hoover,\u0026#32;Steltz \u0026amp; al.,\u0026#32;2008 Hoover,\u0026#32; A.,\u0026#32; Steltz,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2008). \u0026#32; RoACH: An autonomous 2.4g crawling hexapod robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2008.4651149 ) ( Citation: Zhakypov,\u0026#32;Belke \u0026amp; al.,\u0026#32;2017 Zhakypov,\u0026#32; Z.,\u0026#32; Belke,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Paik,\u0026#32; J. \u0026#32; (2017). \u0026#32; Tribot: A deployable, self-righting and multi-locomotive origami robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2017.8206445 ) , and run ( Citation: Hoover,\u0026#32;Burden \u0026amp; al.,\u0026#32;2010 Hoover,\u0026#32; A.,\u0026#32; Burden,\u0026#32; S.,\u0026#32; Shankar Sastry,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2010). \u0026#32; Bio-inspired design and dynamic maneuverability of a minimally actuated six-legged robot. \u0026#32; IEEE. https://doi.org/10.1109/BIOROB.2010.5626034 ) ( Citation: Birkmeyer,\u0026#32;Peterson \u0026amp; al.,\u0026#32;2009 Birkmeyer,\u0026#32; P.,\u0026#32; Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2009). \u0026#32;DASH: A dynamic 16g hexapedal robot. 2009 IEEE/RSJ International Conference on Intelligent Robots and Systems.\u0026#32;2683–2689. https://doi.org/10.1109/IROS.2009.5354561 ) ( Citation: Baisch,\u0026#32;Ozcan \u0026amp; al.,\u0026#32;2014 Baisch,\u0026#32; A.,\u0026#32; Ozcan,\u0026#32; O.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Ithier,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;High speed locomotion for a quadrupedal microrobot. The International Journal of Robotics Research. https://doi.org/10.1177/0278364914521473 ) ( Citation: Mulgaonkar,\u0026#32;Araki \u0026amp; al.,\u0026#32;2016 Mulgaonkar,\u0026#32; Y.,\u0026#32; Araki,\u0026#32; B.,\u0026#32; Koh,\u0026#32; J.,\u0026#32; Guerrero-Bonilla,\u0026#32; L.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Makineni,\u0026#32; A.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Rus,\u0026#32; D.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Kumar,\u0026#32; V. \u0026#32; (2016). \u0026#32; The Flying Monkey: A Mesoscale Robot That Can Run, Fly, And Grasp. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2016.7487667 ) . Laminate devices can be manufactured quickly using a variety of materials such as carbon fiber, fiberglass, or cardboard, which plays a role in determining system stiffness ( Citation: Sreetharan,\u0026#32;Whitney \u0026amp; al.,\u0026#32;2012 Sreetharan,\u0026#32; P.,\u0026#32; Whitney,\u0026#32; J.,\u0026#32; Strauss,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;Monolithic fabrication of millimeter-scale machines. Journal of Micromechanics and Microengineering,\u0026#32;22(5).\u0026#32;55027. https://doi.org/10.1088/0960-1317/22/5/055027 ) . These robots may also be generated in an automated or semi-automated fashion from basic user needs ( Citation: Aukes\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32;2014 Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32; Algorithms for Rapid Development of Inherently-Manufacturable Laminate Devices. \u0026#32; ASME. https://doi.org/10.1115/SMASIS2014-7442 ) ( Citation: Mehta\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32;2014 Mehta,\u0026#32; A.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2014). \u0026#32;An end-to-end system for designing mechanical structures for print-and-fold robots. Proceedings - IEEE International Conference on Robotics and Automation.\u0026#32;1460–1465. https://doi.org/10.1109/ICRA.2014.6907044 ) ( Citation: Mehta,\u0026#32;DelPreto \u0026amp; al.,\u0026#32;2015 Mehta,\u0026#32; A.,\u0026#32; DelPreto,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2015). \u0026#32;Integrated Codesign of Printable Robots. Journal of Mechanisms and Robotics,\u0026#32;7(2).\u0026#32;021015. https://doi.org/10.1115/1.4029496 ) ( Citation: Schulz,\u0026#32;Sung \u0026amp; al.,\u0026#32;2017 Schulz,\u0026#32; A.,\u0026#32; Sung,\u0026#32; C.,\u0026#32; Spielberg,\u0026#32; A.,\u0026#32; Zhao,\u0026#32; W.,\u0026#32; Cheng,\u0026#32; R.,\u0026#32; Grinspun,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Matusik,\u0026#32; W. \u0026#32; (2017). \u0026#32;Interactive robogami: An end-to-end system for design of robots with ground locomotion. The International Journal of Robotics Research.\u0026#32;1–17. https://doi.org/10.1177/0278364917723465 ) . A variety of sensing modalities are compatible with laminates, including capacitive ( Citation: Atalay,\u0026#32;Atalay \u0026amp; al.,\u0026#32;2017 Atalay,\u0026#32; O.,\u0026#32; Atalay,\u0026#32; A.,\u0026#32; Gafford,\u0026#32; J.,\u0026#32; Wang,\u0026#32; H.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Walsh,\u0026#32; C. \u0026#32; (2017). \u0026#32;A Highly Stretchable Capacitive-Based Strain Sensor Based on Metal Deposition and Laser Rastering. Advanced Materials Technologies,\u0026#32;2(9).\u0026#32;1–8. https://doi.org/10.1002/admt.201700081 ) ( Citation: Shin,\u0026#32;Felton \u0026amp; al.,\u0026#32;2014 Shin,\u0026#32; B.,\u0026#32; Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32; Self-assembling sensors for printable machines. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2014.6907503 ) , optical ( Citation: Gafford,\u0026#32;Wood \u0026amp; al.,\u0026#32;2016 Gafford,\u0026#32; J.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Walsh,\u0026#32; C. \u0026#32; (2016). \u0026#32;Self-Assembling, Low-Cost, and Modular mm-Scale Force Sensor. IEEE Sensors Journal,\u0026#32;16(1).\u0026#32;69–76. https://doi.org/10.1109/JSEN.2015.2476368 ) , inductive ( Citation: Shin,\u0026#32;Felton \u0026amp; al.,\u0026#32;2014 Shin,\u0026#32; B.,\u0026#32; Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32; Self-assembling sensors for printable machines. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2014.6907503 ) and strain ( Citation: Gafford,\u0026#32;Kesner \u0026amp; al.,\u0026#32;2013 Gafford,\u0026#32; J.,\u0026#32; Kesner,\u0026#32; S.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Walsh,\u0026#32; C. \u0026#32; (2013). \u0026#32;Force-sensing surgical grasper enabled by pop-up book MEMS. IEEE International Conference on Intelligent Robots and Systems.\u0026#32;2552–2558. https://doi.org/10.1109/IROS.2013.6696716 ) ( Citation: Sun,\u0026#32;Felton \u0026amp; al.,\u0026#32;2015 Sun,\u0026#32; X.,\u0026#32; Felton,\u0026#32; S.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Kim,\u0026#32; S. \u0026#32; (2015). \u0026#32;Printing angle sensors for foldable robots. IEEE International Conference on Intelligent Robots and Systems,\u0026#32;2015-Decem.\u0026#32;1725–1731. https://doi.org/10.1109/IROS.2015.7353600 ) based sensing modes. These sensors may be powered through conductive layers within the laminate itself; this has been demonstrated for self-folding ( Citation: Felton,\u0026#32;Tolley \u0026amp; al.,\u0026#32;2013 Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Onal,\u0026#32; C.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2013). \u0026#32;Robot self-assembly by folding: A printed inchworm robot. 2013 IEEE International Conference on Robotics and Automation.\u0026#32;277–282. https://doi.org/10.1109/ICRA.2013.6630588 ) ( Citation: Felton,\u0026#32;Tolley \u0026amp; al.,\u0026#32;2014 Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;A method for building self-folding machines. Science,\u0026#32;345(6197).\u0026#32;644–646. https://doi.org/10.1126/science.1252610 ) and sensing and communication ( Citation: Gafford,\u0026#32;Ranzani \u0026amp; al.,\u0026#32;2017 Gafford,\u0026#32; J.,\u0026#32; Ranzani,\u0026#32; T.,\u0026#32; Russo,\u0026#32; S.,\u0026#32; Degirmenci,\u0026#32; A.,\u0026#32; Kesner,\u0026#32; S.,\u0026#32; Howe,\u0026#32; R.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Walsh,\u0026#32; C. \u0026#32; (2017). \u0026#32;Toward Medical Devices With Integrated Mechanisms, Sensors, and Actuators Via Printed-Circuit MEMS. Journal of Medical Devices,\u0026#32;11(1).\u0026#32;011007. https://doi.org/10.1115/1.4035375 ) . High-speed quadruped robots made using laminate techniques represent some of the fastest robots for their size; they have demonstrated speeds of up to 10 body lengths per second at ~1 g scales ( Citation: Baisch,\u0026#32;Ozcan \u0026amp; al.,\u0026#32;2014 Baisch,\u0026#32; A.,\u0026#32; Ozcan,\u0026#32; O.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Ithier,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;High speed locomotion for a quadrupedal microrobot. The International Journal of Robotics Research. https://doi.org/10.1177/0278364914521473 ) and up to 47 body lengths per second ( Citation: Haldane\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32;2015 Haldane,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2015). \u0026#32;Running beyond the bio-inspired regime. Proceedings - IEEE International Conference on Robotics and Automation,\u0026#32;2015-June(June).\u0026#32;4539–4546. https://doi.org/10.1109/ICRA.2015.7139828 ) at ~50 g scales.\nDesign Tools While these robots have continued to be developed and demonstrated across a variety of niche-based tasks, more is now understood about how to design ( Citation: Aukes,\u0026#32;Goldberg \u0026amp; al.,\u0026#32;2014 Aukes,\u0026#32; D.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Cutkosky,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;An analytic framework for developing inherently-manufacturable pop-up laminate devices. Smart Materials and Structures,\u0026#32;23(9).\u0026#32;094013. https://doi.org/10.1088/0964-1726/23/9/094013 ) , plan for manufacturing ( Citation: Aukes\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32;2014 Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32; Algorithms for Rapid Development of Inherently-Manufacturable Laminate Devices. \u0026#32; ASME. https://doi.org/10.1115/SMASIS2014-7442 ) , and analyze these robots. A number of design tools have been developed for understanding the motion created from hinged, origami-inspired designs using FEA-based approaches ( Citation: Schenk\u0026#32;\u0026amp;\u0026#32;Guest,\u0026#32;2011 Schenk,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Guest,\u0026#32; S. \u0026#32; (2011). \u0026#32; Origami Folding : A Structural Engineering Approach. ) , for enunciating functional needs and combining modular elements ( Citation: Mehta,\u0026#32;DelPreto \u0026amp; al.,\u0026#32;2015 Mehta,\u0026#32; A.,\u0026#32; DelPreto,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2015). \u0026#32;Integrated Codesign of Printable Robots. Journal of Mechanisms and Robotics,\u0026#32;7(2).\u0026#32;021015. https://doi.org/10.1115/1.4029496 ) , or for analytically understanding the resulting dynamics of these devices ( Citation: Doshi,\u0026#32;Goldberg \u0026amp; al.,\u0026#32;2015 Doshi,\u0026#32; N.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Sahai,\u0026#32; R.,\u0026#32; Jafferis,\u0026#32; N.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Paulson,\u0026#32; J. \u0026#32; (2015). \u0026#32; Model Driven Design For Flexure-based Microrobots. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2015.7353959 ) ( Citation: Khodambashi,\u0026#32;Sharifzadeh \u0026amp; al.,\u0026#32;2018 Khodambashi,\u0026#32; R.,\u0026#32; Sharifzadeh,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2018). \u0026#32; An Integrated Design and Simulation Environment for Rapid Prototyping of Laminate Robotic Mechanisms. \u0026#32; American Society of Mechanical Engineers. https://doi.org/10.1115/DETC2018-86359 ) . This is necessary due to the dependence upon flexure-based hinges which rely on material deformation to create virtual joints, which can affect system stiffness and damping.\nSelf-folding As origami technicques have been increasingly used as engineering solutions, researchers have sought ways to address the need to create and fold shapes automatically using either active materials or embedded actuation. Self folding structures have been realized using shape memory alloys ( Citation: Hawkes,\u0026#32;An \u0026amp; al.,\u0026#32;2010 Hawkes,\u0026#32; E.,\u0026#32; An,\u0026#32; B.,\u0026#32; Benbernou,\u0026#32; N.,\u0026#32; Tanaka,\u0026#32; H.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2010). \u0026#32;Programmable matter by folding. Proceedings of the National Academy of Sciences,\u0026#32;107(28).\u0026#32;12441–12445. https://doi.org/10.1073/pnas.0914069107 ) ( Citation: Paik\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32;2012 Paik,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;A bidirectional shape memory alloy folding actuator. Smart Materials and Structures,\u0026#32;21(6).\u0026#32;065013. https://doi.org/10.1088/0964-1726/21/6/065013 ) ( Citation: Peraza-Hernandez,\u0026#32;Frei \u0026amp; al.,\u0026#32;2014 Peraza-Hernandez,\u0026#32; E.,\u0026#32; Frei,\u0026#32; K.,\u0026#32; Hartl,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Lagoudas,\u0026#32; D. \u0026#32; (2014). \u0026#32;Folding patterns and shape optimization using SMA-based self-folding laminates.\u0026#32;90571G. https://doi.org/10.1117/12.2045561 ) , light-based stimulation ( Citation: Liu,\u0026#32;Boyles \u0026amp; al.,\u0026#32;2012 Liu,\u0026#32; Y.,\u0026#32; Boyles,\u0026#32; J.,\u0026#32; Genzer,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Dickey,\u0026#32; M. \u0026#32; (2012). \u0026#32;Self-folding of polymer sheets using local light absorption. Soft Matter,\u0026#32;8(6).\u0026#32;1764. https://doi.org/10.1039/c1sm06564e ) ( Citation: Ryu,\u0026#32;D’Amato \u0026amp; al.,\u0026#32;2012 Ryu,\u0026#32; J.,\u0026#32; D’Amato,\u0026#32; M.,\u0026#32; Cui,\u0026#32; X.,\u0026#32; Long,\u0026#32; K.,\u0026#32; Jerry Qi,\u0026#32; H.\u0026#32;\u0026amp;\u0026#32;Dunn,\u0026#32; M. \u0026#32; (2012). \u0026#32;Photo-origami—Bending and folding polymers with light. Applied Physics Letters,\u0026#32;100(16).\u0026#32;161908. https://doi.org/10.1063/1.3700719 ) , lasers ( Citation: Laflin,\u0026#32;Morris \u0026amp; al.,\u0026#32;2012 Laflin,\u0026#32; K.,\u0026#32; Morris,\u0026#32; C.,\u0026#32; Muqeem,\u0026#32; T.\u0026#32;\u0026amp;\u0026#32;Gracias,\u0026#32; D. \u0026#32; (2012). \u0026#32;Laser triggered sequential folding of microstructures. Applied Physics Letters,\u0026#32;101(13). https://doi.org/10.1063/1.4754607 ) , shape memory polymers ( Citation: Felton,\u0026#32;Tolley \u0026amp; al.,\u0026#32;2013 Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Shin,\u0026#32; B.,\u0026#32; Onal,\u0026#32; C.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2013). \u0026#32;Self-folding with shape memory composites. Soft Matter,\u0026#32;9(32).\u0026#32;7688. https://doi.org/10.1039/c3sm51003d ) ( Citation: Tolley,\u0026#32;Felton \u0026amp; al.,\u0026#32;2013 Tolley,\u0026#32; M.,\u0026#32; Felton,\u0026#32; S.,\u0026#32; Miyashita,\u0026#32; S.,\u0026#32; Xu,\u0026#32; L.,\u0026#32; ,\u0026#32; Zhou,\u0026#32; M.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2013). \u0026#32; Self-folding shape memory laminates for automated fabrication. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2013.6697068 ) ( Citation: An,\u0026#32;Miyashita \u0026amp; al.,\u0026#32;2014 An,\u0026#32; B.,\u0026#32; Miyashita,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Meeker,\u0026#32; L.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Demaine,\u0026#32; M.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2014). \u0026#32; An end-to-end approach to making self-folded 3D surface shapes by uniform heating. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2014.6907045 ) ( Citation: Miyashita,\u0026#32;Onal \u0026amp; al.,\u0026#32;2013 Miyashita,\u0026#32; S.,\u0026#32; Onal,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2013). \u0026#32; Self-Folding of an Origami Robot by Uniform Heating. ) ( Citation: Mao,\u0026#32;Yu \u0026amp; al.,\u0026#32;2015 Mao,\u0026#32; Y.,\u0026#32; Yu,\u0026#32; K.,\u0026#32; Isakov,\u0026#32; M.,\u0026#32; Wu,\u0026#32; J.,\u0026#32; Dunn,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Jerry Qi,\u0026#32; H. \u0026#32; (2015). \u0026#32;Sequential Self-Folding Structures by 3D Printed Digital Shape Memory Polymers. Scientific Reports,\u0026#32;5.\u0026#32;13616. https://doi.org/10.1038/srep13616 ) ( Citation: Felton,\u0026#32;Becker \u0026amp; al.,\u0026#32;2015 Felton,\u0026#32; S.,\u0026#32; Becker,\u0026#32; K.,\u0026#32; Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2015). \u0026#32;Self-folding with shape memory composites at the millimeter scale. Journal of Micromechanics and Microengineering,\u0026#32;25(8).\u0026#32;085004. https://doi.org/10.1088/0960-1317/25/8/085004 ) , and paper-based actuators ( Citation: Shigemune,\u0026#32;Maeda \u0026amp; al.,\u0026#32;2015 Shigemune,\u0026#32; H.,\u0026#32; Maeda,\u0026#32; S.,\u0026#32; Hara,\u0026#32; Y.,\u0026#32; Koike,\u0026#32; U.\u0026#32;\u0026amp;\u0026#32;Hashimoto,\u0026#32; S. \u0026#32; (2015). \u0026#32; Kirigami robot: Making paper robot using desktop cutting plotter and inkjet printer. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2015.7353506 ) ( Citation: Hamedi,\u0026#32;Campbell \u0026amp; al.,\u0026#32;2016 Hamedi,\u0026#32; M.,\u0026#32; Campbell,\u0026#32; V.,\u0026#32; Rothemund,\u0026#32; P.,\u0026#32; G??der,\u0026#32; F.,\u0026#32; Christodouleas,\u0026#32; D.,\u0026#32; Bloch,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Whitesides,\u0026#32; G. \u0026#32; (2016). \u0026#32;Electrically Activated Paper Actuators. Advanced Functional Materials,\u0026#32;26(15).\u0026#32;2446–2453. https://doi.org/10.1002/adfm.201505123 ) . A comprehensive review can be found in ( Citation: Peraza-Hernandez,\u0026#32;Frei \u0026amp; al.,\u0026#32;2014 Peraza-Hernandez,\u0026#32; E.,\u0026#32; Frei,\u0026#32; K.,\u0026#32; Hartl,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Lagoudas,\u0026#32; D. \u0026#32; (2014). \u0026#32;Folding patterns and shape optimization using SMA-based self-folding laminates.\u0026#32;90571G. https://doi.org/10.1117/12.2045561 ) . Self-folding principles can beused to create morphing structures ( Citation: Miyashita,\u0026#32;Guitron \u0026amp; al.,\u0026#32;2017 Miyashita,\u0026#32; S.,\u0026#32; Guitron,\u0026#32; S.,\u0026#32; Li,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2017). \u0026#32;Robotic metamorphosis by origami exoskeletons. Science Robotics,\u0026#32;2(10).\u0026#32;eaao4369. https://doi.org/10.1126/scirobotics.aao4369 ) My Work My research as a PhD student at Stanford University, postdoctoral researcher in the Harvard Microrobotics Lab and currently as the principal investigator of the IDEAlab at Arizona State University has contributed to the literature surrounding the automated design, manufacturing, and analysis of foldable robotic systems, including the representation and computation of laminate systems ( Citation: Aukes,\u0026#32;Goldberg \u0026amp; al.,\u0026#32;2014 Aukes,\u0026#32; D.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Cutkosky,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;An analytic framework for developing inherently-manufacturable pop-up laminate devices. Smart Materials and Structures,\u0026#32;23(9).\u0026#32;094013. https://doi.org/10.1088/0964-1726/23/9/094013 ) , algorithms tailored to compute manufacturable robots ( Citation: Aukes\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32;2014 Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32; Algorithms for Rapid Development of Inherently-Manufacturable Laminate Devices. \u0026#32; ASME. https://doi.org/10.1115/SMASIS2014-7442 ) , and generating and solving the dynamics of parallel laminate mechanisms using experimentally-determined models ( Citation: Doshi,\u0026#32;Goldberg \u0026amp; al.,\u0026#32;2015 Doshi,\u0026#32; N.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Sahai,\u0026#32; R.,\u0026#32; Jafferis,\u0026#32; N.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Paulson,\u0026#32; J. \u0026#32; (2015). \u0026#32; Model Driven Design For Flexure-based Microrobots. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2015.7353959 ) ( Citation: Khodambashi,\u0026#32;Sharifzadeh \u0026amp; al.,\u0026#32;2018 Khodambashi,\u0026#32; R.,\u0026#32; Sharifzadeh,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2018). \u0026#32; An Integrated Design and Simulation Environment for Rapid Prototyping of Laminate Robotic Mechanisms. \u0026#32; American Society of Mechanical Engineers. https://doi.org/10.1115/DETC2018-86359 ) . This work has resulted in several design tools, including popupCAD, a design and manufacturing planning tool for developing laminate robotic systems. More recent work in our lab has explored the use of machine learning approaches to learn or improve robotic system control in the real world. We have been applying the CMA-ES algorithm for identifying optimal gait parameters and finding preferred fin designs for a fish-inspired swimming robot ( Citation: Sharifzadeh,\u0026#32;Khodambashi \u0026amp; al.,\u0026#32;2018 Sharifzadeh,\u0026#32; M.,\u0026#32; Khodambashi,\u0026#32; R.,\u0026#32; Zhang,\u0026#32; W.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2018). \u0026#32; On Locomotion of a Laminated Fish-Inspired Robot in a Small-to-Size Environment. \u0026#32; American Society of Mechanical Engineers. https://doi.org/10.1115/DETC2018-85594 ) ( Citation: Sharifzadeh\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32;2021 Sharifzadeh,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2021). \u0026#32;Curvature-Induced Buckling for Flapping-Wing Vehicles. IEEE/ASME Transactions on Mechatronics,\u0026#32;26(1).\u0026#32;503–514. https://doi.org/10.1109/TMECH.2020.3034659 ) . We have used other techniques such as neural networks to learn the nonlinear kinematics of a spherical five-bar linkage in ( Citation: Sharifzadeh,\u0026#32;Jiang \u0026amp; al.,\u0026#32;2021 Sharifzadeh,\u0026#32; M.,\u0026#32; Jiang,\u0026#32; Y.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2021). \u0026#32;Compensation of Material Deformation in Foldable Robots (A Case Study of Spherical Parallel Manipulators Fabricated via Laminate Processes). ASME Journal of Mechanisms and Robotics (In Prep). ) . Furthermore, we have used a a sample-efficient reinforcement learning strategy with a turtle-inspired robot design that drags itself across a sandy surface to compare locomotion strategies learned in the lab against similar experiments performed in the Arizona desert ( Citation: Luck,\u0026#32;Campbell \u0026amp; al.,\u0026#32;2017 Luck,\u0026#32; K.,\u0026#32; Campbell,\u0026#32; J.,\u0026#32; Jansen,\u0026#32; M.,\u0026#32; Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Ben Amor,\u0026#32; H. \u0026#32; (2017). \u0026#32; From the Lab to the Desert: Fast Prototyping and Learning of Robot Locomotion. \u0026#32;Retrieved from\u0026#32; ) ( Citation: Jansen,\u0026#32;Luck \u0026amp; al.,\u0026#32;2017 Jansen,\u0026#32; A.,\u0026#32; Luck,\u0026#32; K.,\u0026#32; Campbell,\u0026#32; J.,\u0026#32; Amor,\u0026#32; H.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2017). \u0026#32; Bio-inspired Robot Design Considering Load-Bearing and Kinematic Ontogeny of Chelonioidea Sea Turtles. \u0026#32; Springer. https://doi.org/10.1007/978-3-319-63537-8_19 ) .\nOur lab\u0026rsquo;s research into the development, modeling, and experimental validation of robotic systems can be found across a number of journal and conference papers, including foldable linkage kinematics ( Citation: Shuch,\u0026#32;Rogers \u0026amp; al.,\u0026#32;2019 Shuch,\u0026#32; B.,\u0026#32; Rogers,\u0026#32; E.,\u0026#32; Shafa,\u0026#32; T.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2019). \u0026#32; Design Of A Two Dof Laminate Leg Transmission For Creating Walking Robot Platforms. ) , underwater swimming gaits ( Citation: Sharifzadeh,\u0026#32;Khodambashi \u0026amp; al.,\u0026#32;2018 Sharifzadeh,\u0026#32; M.,\u0026#32; Khodambashi,\u0026#32; R.,\u0026#32; Zhang,\u0026#32; W.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2018). \u0026#32; On Locomotion of a Laminated Fish-Inspired Robot in a Small-to-Size Environment. \u0026#32; American Society of Mechanical Engineers. https://doi.org/10.1115/DETC2018-85594 ) ( Citation: Sharifzadeh\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32;2021 Sharifzadeh,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2021). \u0026#32;Curvature-Induced Buckling for Flapping-Wing Vehicles. IEEE/ASME Transactions on Mechatronics,\u0026#32;26(1).\u0026#32;503–514. https://doi.org/10.1109/TMECH.2020.3034659 ) and laminate mechanism dynamics ( Citation: Doshi,\u0026#32;Goldberg \u0026amp; al.,\u0026#32;2015 Doshi,\u0026#32; N.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Sahai,\u0026#32; R.,\u0026#32; Jafferis,\u0026#32; N.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Paulson,\u0026#32; J. \u0026#32; (2015). \u0026#32; Model Driven Design For Flexure-based Microrobots. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2015.7353959 ) ( Citation: Khodambashi,\u0026#32;Sharifzadeh \u0026amp; al.,\u0026#32;2018 Khodambashi,\u0026#32; R.,\u0026#32; Sharifzadeh,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2018). \u0026#32; An Integrated Design and Simulation Environment for Rapid Prototyping of Laminate Robotic Mechanisms. \u0026#32; American Society of Mechanical Engineers. https://doi.org/10.1115/DETC2018-86359 ) ; we have applied experimental validation to specific platforms including laminate jumping robots ( Citation: Knaup\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32;2019 Knaup,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2019). \u0026#32; Design, Modeling, And Optimization Of A Hopping Robot Platform. ) , foldable-robotic quad-rotors, ( Citation: Yang,\u0026#32;Zhang \u0026amp; al.,\u0026#32;2019 Yang,\u0026#32; Y.,\u0026#32; Zhang,\u0026#32; Y.,\u0026#32; Kan,\u0026#32; Z.,\u0026#32; Zeng,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Wang,\u0026#32; M. \u0026#32; (2019). \u0026#32;Hybrid Jamming for Bioinspired Soft Robotic Fingers. Soft Robotics.\u0026#32;soro.2019.0093. https://doi.org/10.1089/soro.2019.0093 ) ( Citation: Mulgaonkar,\u0026#32;Araki \u0026amp; al.,\u0026#32;2016 Mulgaonkar,\u0026#32; Y.,\u0026#32; Araki,\u0026#32; B.,\u0026#32; Koh,\u0026#32; J.,\u0026#32; Guerrero-Bonilla,\u0026#32; L.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Makineni,\u0026#32; A.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Rus,\u0026#32; D.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Kumar,\u0026#32; V. \u0026#32; (2016). \u0026#32; The Flying Monkey: A Mesoscale Robot That Can Run, Fly, And Grasp. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2016.7487667 ) , jump-gliding devices ( Citation: Lighthouse\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32;2019 Lighthouse,\u0026#32; G.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2019). \u0026#32; Extending the Jumping Range of a Small Robot via Collapsible Gliding Wings. \u0026#32; Arizona State University. ) , and hydrogel-based gait controllers ( Citation: Khodambashi,\u0026#32;Doroudchi \u0026amp; al.,\u0026#32;2019 Khodambashi,\u0026#32; R.,\u0026#32; Doroudchi,\u0026#32; A.,\u0026#32; Sharifzadeh,\u0026#32; M.,\u0026#32; Li,\u0026#32; D.,\u0026#32; Fisher,\u0026#32; R.,\u0026#32; Marvi,\u0026#32; H.,\u0026#32; Peet,\u0026#32; M.,\u0026#32; He,\u0026#32; X.,\u0026#32; Berman,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2019). \u0026#32;Multi DOF Electrical Control of Hydrogel-based Soft Machines. (under revision).\u0026#32;1–35. ) . Prior work in robotic hands and grasping includes the modeling of force interactions between compliant, underactuated hands and externally grasped objects while considering contact and friction. These models were used to optimize hand designs as well as used to understand grasp acquisition and retention ( Citation: Aukes,\u0026#32;Heyneman \u0026amp; al.,\u0026#32;2011 Aukes,\u0026#32; D.,\u0026#32; Heyneman,\u0026#32; B.,\u0026#32; Duchaine,\u0026#32; V.\u0026#32;\u0026amp;\u0026#32;Cutkosky,\u0026#32; M. \u0026#32; (2011). \u0026#32; Varying spring preloads to select grasp strategies in an adaptive hand. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2011.6095078 ) ( Citation: Aukes,\u0026#32;Kim \u0026amp; al.,\u0026#32;2012 Aukes,\u0026#32; D.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Garcia,\u0026#32; P.,\u0026#32; Edsinger,\u0026#32; A.\u0026#32;\u0026amp;\u0026#32;Cutkosky,\u0026#32; M. \u0026#32; (2012). \u0026#32; Selectively compliant underactuated hand for mobile manipulation. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2012.6224738 ) ( Citation: Aukes\u0026#32;\u0026amp;\u0026#32;Cutkosky,\u0026#32;2013 Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Cutkosky,\u0026#32; M. \u0026#32; (2013). \u0026#32; Simulation-based tools for evaluating underactuated hand designs. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2013.6630854 ) ( Citation: Aukes,\u0026#32;2013 Aukes,\u0026#32; D. \u0026#32; (2013). \u0026#32; Design and Analysis of Selectively Compliant Underactuated Robotic Hands \u0026nbsp;(PhD thesis).\u0026#32; Stanford University \u0026#32;Retrieved from\u0026#32; ) ( Citation: Aukes,\u0026#32;Heyneman \u0026amp; al.,\u0026#32;2014 Aukes,\u0026#32; D.,\u0026#32; Heyneman,\u0026#32; B.,\u0026#32; Ulmen,\u0026#32; J.,\u0026#32; Stuart,\u0026#32; H.,\u0026#32; Cutkosky,\u0026#32; M.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Garcia,\u0026#32; P.\u0026#32;\u0026amp;\u0026#32;Edsinger,\u0026#32; A. \u0026#32; (2014). \u0026#32;Design and testing of a selectively compliant underactuated hand. The International Journal of Robotics Research,\u0026#32;33(5).\u0026#32;721–735. https://doi.org/10.1177/0278364913518997 ) ( Citation: Stuart,\u0026#32;Wang \u0026amp; al.,\u0026#32;2014 Stuart,\u0026#32; H.,\u0026#32; Wang,\u0026#32; S.,\u0026#32; Gardineer,\u0026#32; B.,\u0026#32; Christensen,\u0026#32; D.,\u0026#32; Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Cutkosky,\u0026#32; M. \u0026#32; (2014). \u0026#32; A compliant underactuated hand with suction flow for underwater mobile manipulation. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2014.6907847 ) .\nTerminology The same types of device have been described by a large number of different terms, including \u0026ldquo;SCM\u0026rdquo;, \u0026ldquo;nanostructured origami\u0026rdquo;, \u0026ldquo;pop-up book MEMS\u0026rdquo;, \u0026ldquo;printed-Circuit MEMS(PC-MEMS)\u0026rdquo;, \u0026ldquo;origami-inspired robots\u0026rdquo;, \u0026ldquo;printable robots\u0026rdquo;, \u0026ldquo;lamina-emergent mechanisms\u0026rdquo;, \u0026ldquo;informal robots\u0026rdquo;, \u0026ldquo;laminate robots\u0026rdquo;, \u0026ldquo;foldable robots\u0026rdquo;, \u0026ldquo;robogami\u0026rdquo;, and \u0026ldquo;print-and-fold origami\u0026rdquo;\nBibliography An,\u0026#32; Miyashita,\u0026#32; Tolley,\u0026#32; Aukes,\u0026#32; Meeker,\u0026#32; Demaine,\u0026#32; Demaine,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Rus (2014) An,\u0026#32; B.,\u0026#32; Miyashita,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Meeker,\u0026#32; L.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Demaine,\u0026#32; M.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2014). \u0026#32; An end-to-end approach to making self-folded 3D surface shapes by uniform heating. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2014.6907045 Atalay,\u0026#32; Atalay,\u0026#32; Gafford,\u0026#32; Wang,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Walsh (2017) Atalay,\u0026#32; O.,\u0026#32; Atalay,\u0026#32; A.,\u0026#32; Gafford,\u0026#32; J.,\u0026#32; Wang,\u0026#32; H.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Walsh,\u0026#32; C. \u0026#32; (2017). \u0026#32;A Highly Stretchable Capacitive-Based Strain Sensor Based on Metal Deposition and Laser Rastering. Advanced Materials Technologies,\u0026#32;2(9).\u0026#32;1–8. https://doi.org/10.1002/admt.201700081 Aukes,\u0026#32; Heyneman,\u0026#32; Duchaine\u0026#32;\u0026amp;\u0026#32;Cutkosky (2011) Aukes,\u0026#32; D.,\u0026#32; Heyneman,\u0026#32; B.,\u0026#32; Duchaine,\u0026#32; V.\u0026#32;\u0026amp;\u0026#32;Cutkosky,\u0026#32; M. \u0026#32; (2011). \u0026#32; Varying spring preloads to select grasp strategies in an adaptive hand. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2011.6095078 Aukes,\u0026#32; Kim,\u0026#32; Garcia,\u0026#32; Edsinger\u0026#32;\u0026amp;\u0026#32;Cutkosky (2012) Aukes,\u0026#32; D.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Garcia,\u0026#32; P.,\u0026#32; Edsinger,\u0026#32; A.\u0026#32;\u0026amp;\u0026#32;Cutkosky,\u0026#32; M. \u0026#32; (2012). \u0026#32; Selectively compliant underactuated hand for mobile manipulation. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2012.6224738 Aukes\u0026#32;\u0026amp;\u0026#32;Cutkosky (2013) Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Cutkosky,\u0026#32; M. \u0026#32; (2013). \u0026#32; Simulation-based tools for evaluating underactuated hand designs. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2013.6630854 Aukes (2013) Aukes,\u0026#32; D. \u0026#32; (2013). \u0026#32; Design and Analysis of Selectively Compliant Underactuated Robotic Hands \u0026nbsp;(PhD thesis).\u0026#32; Stanford University \u0026#32;Retrieved from\u0026#32; Aukes,\u0026#32; Goldberg,\u0026#32; Cutkosky\u0026#32;\u0026amp;\u0026#32;Wood (2014) Aukes,\u0026#32; D.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Cutkosky,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;An analytic framework for developing inherently-manufacturable pop-up laminate devices. Smart Materials and Structures,\u0026#32;23(9).\u0026#32;094013. https://doi.org/10.1088/0964-1726/23/9/094013 Aukes\u0026#32;\u0026amp;\u0026#32;Wood (2014) Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32; Algorithms for Rapid Development of Inherently-Manufacturable Laminate Devices. \u0026#32; ASME. https://doi.org/10.1115/SMASIS2014-7442 Aukes,\u0026#32; Heyneman,\u0026#32; Ulmen,\u0026#32; Stuart,\u0026#32; Cutkosky,\u0026#32; Kim,\u0026#32; Garcia\u0026#32;\u0026amp;\u0026#32;Edsinger (2014) Aukes,\u0026#32; D.,\u0026#32; Heyneman,\u0026#32; B.,\u0026#32; Ulmen,\u0026#32; J.,\u0026#32; Stuart,\u0026#32; H.,\u0026#32; Cutkosky,\u0026#32; M.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Garcia,\u0026#32; P.\u0026#32;\u0026amp;\u0026#32;Edsinger,\u0026#32; A. \u0026#32; (2014). \u0026#32;Design and testing of a selectively compliant underactuated hand. The International Journal of Robotics Research,\u0026#32;33(5).\u0026#32;721–735. https://doi.org/10.1177/0278364913518997 Avadhanula\u0026#32;\u0026amp;\u0026#32;Fearing (2005) Avadhanula,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2005). \u0026#32; Flexure design rules for carbon fiber microrobotic mechanisms. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2005.1570339 Baisch,\u0026#32; Ozcan,\u0026#32; Goldberg,\u0026#32; Ithier\u0026#32;\u0026amp;\u0026#32;Wood (2014) Baisch,\u0026#32; A.,\u0026#32; Ozcan,\u0026#32; O.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Ithier,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;High speed locomotion for a quadrupedal microrobot. The International Journal of Robotics Research. https://doi.org/10.1177/0278364914521473 Birkmeyer,\u0026#32; Peterson\u0026#32;\u0026amp;\u0026#32;Fearing (2009) Birkmeyer,\u0026#32; P.,\u0026#32; Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2009). \u0026#32;DASH: A dynamic 16g hexapedal robot. 2009 IEEE/RSJ International Conference on Intelligent Robots and Systems.\u0026#32;2683–2689. https://doi.org/10.1109/IROS.2009.5354561 Buchner (2004) Buchner,\u0026#32; T. \u0026#32; (2004). \u0026#32;Kinematics of 3D Folding Structures for Nanostructured Origami.\u0026#32;Retrieved from\u0026#32; Cybulski,\u0026#32; Clements\u0026#32;\u0026amp;\u0026#32;Prakash (2014) Cybulski,\u0026#32; J.,\u0026#32; Clements,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Prakash,\u0026#32; M. \u0026#32; (2014). \u0026#32;Foldscope: Origami-based paper microscope. PLoS ONE,\u0026#32;9(6). https://doi.org/10.1371/journal.pone.0098781 Doshi,\u0026#32; Goldberg,\u0026#32; Sahai,\u0026#32; Jafferis,\u0026#32; Aukes,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Paulson (2015) Doshi,\u0026#32; N.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Sahai,\u0026#32; R.,\u0026#32; Jafferis,\u0026#32; N.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Paulson,\u0026#32; J. \u0026#32; (2015). \u0026#32; Model Driven Design For Flexure-based Microrobots. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2015.7353959 Fearing,\u0026#32; Chiang,\u0026#32; Dickinson,\u0026#32; Pick,\u0026#32; Sitti\u0026#32;\u0026amp;\u0026#32;Yan (2000) Fearing,\u0026#32; R.,\u0026#32; Chiang,\u0026#32; K.,\u0026#32; Dickinson,\u0026#32; M.,\u0026#32; Pick,\u0026#32; D.,\u0026#32; Sitti,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Yan,\u0026#32; J. \u0026#32; (2000). \u0026#32; Wing transmission for a micromechanical flying insect. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2000.844811 Felton,\u0026#32; Tolley,\u0026#32; Shin,\u0026#32; Onal,\u0026#32; Demaine,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Wood (2013) Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Shin,\u0026#32; B.,\u0026#32; Onal,\u0026#32; C.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2013). \u0026#32;Self-folding with shape memory composites. Soft Matter,\u0026#32;9(32).\u0026#32;7688. https://doi.org/10.1039/c3sm51003d Felton,\u0026#32; Tolley,\u0026#32; Onal,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Wood (2013) Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Onal,\u0026#32; C.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2013). \u0026#32;Robot self-assembly by folding: A printed inchworm robot. 2013 IEEE International Conference on Robotics and Automation.\u0026#32;277–282. https://doi.org/10.1109/ICRA.2013.6630588 Felton,\u0026#32; Tolley,\u0026#32; Demaine,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Wood (2014) Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;A method for building self-folding machines. Science,\u0026#32;345(6197).\u0026#32;644–646. https://doi.org/10.1126/science.1252610 Felton,\u0026#32; Becker,\u0026#32; Aukes\u0026#32;\u0026amp;\u0026#32;Wood (2015) Felton,\u0026#32; S.,\u0026#32; Becker,\u0026#32; K.,\u0026#32; Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2015). \u0026#32;Self-folding with shape memory composites at the millimeter scale. Journal of Micromechanics and Microengineering,\u0026#32;25(8).\u0026#32;085004. https://doi.org/10.1088/0960-1317/25/8/085004 Firouzeh\u0026#32;\u0026amp;\u0026#32;Paik (2015) Firouzeh,\u0026#32; A.\u0026#32;\u0026amp;\u0026#32;Paik,\u0026#32; J. \u0026#32; (2015). \u0026#32;Robogami: A Fully Integrated Low-Profile Robotic Origami. Journal of Mechanisms and Robotics,\u0026#32;7(2).\u0026#32;021009. https://doi.org/10.1115/1.4029491 Gafford,\u0026#32; Kesner,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Walsh (2013) Gafford,\u0026#32; J.,\u0026#32; Kesner,\u0026#32; S.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Walsh,\u0026#32; C. \u0026#32; (2013). \u0026#32;Force-sensing surgical grasper enabled by pop-up book MEMS. IEEE International Conference on Intelligent Robots and Systems.\u0026#32;2552–2558. https://doi.org/10.1109/IROS.2013.6696716 Gafford,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Walsh (2016) Gafford,\u0026#32; J.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Walsh,\u0026#32; C. \u0026#32; (2016). \u0026#32;Self-Assembling, Low-Cost, and Modular mm-Scale Force Sensor. IEEE Sensors Journal,\u0026#32;16(1).\u0026#32;69–76. https://doi.org/10.1109/JSEN.2015.2476368 Gafford,\u0026#32; Ranzani,\u0026#32; Russo,\u0026#32; Degirmenci,\u0026#32; Kesner,\u0026#32; Howe,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Walsh (2017) Gafford,\u0026#32; J.,\u0026#32; Ranzani,\u0026#32; T.,\u0026#32; Russo,\u0026#32; S.,\u0026#32; Degirmenci,\u0026#32; A.,\u0026#32; Kesner,\u0026#32; S.,\u0026#32; Howe,\u0026#32; R.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Walsh,\u0026#32; C. \u0026#32; (2017). \u0026#32;Toward Medical Devices With Integrated Mechanisms, Sensors, and Actuators Via Printed-Circuit MEMS. Journal of Medical Devices,\u0026#32;11(1).\u0026#32;011007. https://doi.org/10.1115/1.4035375 Haldane,\u0026#32; Peterson,\u0026#32; Garcia Bermudez\u0026#32;\u0026amp;\u0026#32;Fearing (2013) Haldane,\u0026#32; D.,\u0026#32; Peterson,\u0026#32; K.,\u0026#32; Garcia Bermudez,\u0026#32; F.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2013). \u0026#32; Animal-inspired design and aerodynamic stabilization of a hexapedal millirobot. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2013.6631034 Haldane\u0026#32;\u0026amp;\u0026#32;Fearing (2015) Haldane,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2015). \u0026#32;Running beyond the bio-inspired regime. Proceedings - IEEE International Conference on Robotics and Automation,\u0026#32;2015-June(June).\u0026#32;4539–4546. https://doi.org/10.1109/ICRA.2015.7139828 Hamedi,\u0026#32; Campbell,\u0026#32; Rothemund,\u0026#32; G??der,\u0026#32; Christodouleas,\u0026#32; Bloch\u0026#32;\u0026amp;\u0026#32;Whitesides (2016) Hamedi,\u0026#32; M.,\u0026#32; Campbell,\u0026#32; V.,\u0026#32; Rothemund,\u0026#32; P.,\u0026#32; G??der,\u0026#32; F.,\u0026#32; Christodouleas,\u0026#32; D.,\u0026#32; Bloch,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Whitesides,\u0026#32; G. \u0026#32; (2016). \u0026#32;Electrically Activated Paper Actuators. Advanced Functional Materials,\u0026#32;26(15).\u0026#32;2446–2453. https://doi.org/10.1002/adfm.201505123 Hawkes,\u0026#32; An,\u0026#32; Benbernou,\u0026#32; Tanaka,\u0026#32; Kim,\u0026#32; Demaine,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Wood (2010) Hawkes,\u0026#32; E.,\u0026#32; An,\u0026#32; B.,\u0026#32; Benbernou,\u0026#32; N.,\u0026#32; Tanaka,\u0026#32; H.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2010). \u0026#32;Programmable matter by folding. Proceedings of the National Academy of Sciences,\u0026#32;107(28).\u0026#32;12441–12445. https://doi.org/10.1073/pnas.0914069107 Hoffman\u0026#32;\u0026amp;\u0026#32;Wood (2011) Hoffman,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2011). \u0026#32; Passive undulatory gaits enhance walking in a myriapod millirobot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2011.6094700 Hoover\u0026#32;\u0026amp;\u0026#32;Fearing (2008) Hoover,\u0026#32; A.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2008). \u0026#32;Fast scale prototyping for folded millirobots. 2008 IEEE International Conference on Robotics and Automation.\u0026#32;1777–1778. https://doi.org/10.1109/ROBOT.2008.4543462 Hoover,\u0026#32; Steltz\u0026#32;\u0026amp;\u0026#32;Fearing (2008) Hoover,\u0026#32; A.,\u0026#32; Steltz,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2008). \u0026#32; RoACH: An autonomous 2.4g crawling hexapod robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2008.4651149 Hoover,\u0026#32; Burden,\u0026#32; Shankar Sastry\u0026#32;\u0026amp;\u0026#32;Fearing (2010) Hoover,\u0026#32; A.,\u0026#32; Burden,\u0026#32; S.,\u0026#32; Shankar Sastry,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2010). \u0026#32; Bio-inspired design and dynamic maneuverability of a minimally actuated six-legged robot. \u0026#32; IEEE. https://doi.org/10.1109/BIOROB.2010.5626034 Jafferis,\u0026#32; Helbling,\u0026#32; Karpelson\u0026#32;\u0026amp;\u0026#32;Wood (2019) Jafferis,\u0026#32; N.,\u0026#32; Helbling,\u0026#32; E.,\u0026#32; Karpelson,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2019). \u0026#32;Untethered Flight of an Insect-Sized Flapping-Wing Microscale Aerial Vehicle. Nature. Jansen,\u0026#32; Luck,\u0026#32; Campbell,\u0026#32; Amor\u0026#32;\u0026amp;\u0026#32;Aukes (2017) Jansen,\u0026#32; A.,\u0026#32; Luck,\u0026#32; K.,\u0026#32; Campbell,\u0026#32; J.,\u0026#32; Amor,\u0026#32; H.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2017). \u0026#32; Bio-inspired Robot Design Considering Load-Bearing and Kinematic Ontogeny of Chelonioidea Sea Turtles. \u0026#32; Springer. https://doi.org/10.1007/978-3-319-63537-8_19 Jung,\u0026#32; Member,\u0026#32; Kim,\u0026#32; Koh,\u0026#32; Member\u0026#32;\u0026amp;\u0026#32;Cho (2014) Jung,\u0026#32; G.,\u0026#32; Member,\u0026#32; S.,\u0026#32; Kim,\u0026#32; J.,\u0026#32; Koh,\u0026#32; J.,\u0026#32; Member,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2014). \u0026#32;Role of Compliant Leg in the Flea - Inspired Jumping Mechanism. Karpelson\u0026#32;\u0026amp;\u0026#32;Wood (2008) Karpelson,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2008). \u0026#32;A review of actuation and power electronics options for flapping-wing robotic insects. 2008 IEEE International Conference on Robotics and Automation.\u0026#32;779–786. https://doi.org/10.1109/ROBOT.2008.4543300 Karras,\u0026#32; Fuller,\u0026#32; Carpenter,\u0026#32; Buscicchio,\u0026#32; McKeeby,\u0026#32; Norman,\u0026#32; Parcheta,\u0026#32; Davydychev\u0026#32;\u0026amp;\u0026#32;Fearing (2017) Karras,\u0026#32; J.,\u0026#32; Fuller,\u0026#32; C.,\u0026#32; Carpenter,\u0026#32; K.,\u0026#32; Buscicchio,\u0026#32; A.,\u0026#32; McKeeby,\u0026#32; D.,\u0026#32; Norman,\u0026#32; C.,\u0026#32; Parcheta,\u0026#32; C.,\u0026#32; Davydychev,\u0026#32; I.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2017). \u0026#32; Pop-up mars rover with textile-enhanced rigid-flex PCB body. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2017.7989642 Khodambashi,\u0026#32; Sharifzadeh\u0026#32;\u0026amp;\u0026#32;Aukes (2018) Khodambashi,\u0026#32; R.,\u0026#32; Sharifzadeh,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2018). \u0026#32; An Integrated Design and Simulation Environment for Rapid Prototyping of Laminate Robotic Mechanisms. \u0026#32; American Society of Mechanical Engineers. https://doi.org/10.1115/DETC2018-86359 Khodambashi,\u0026#32; Doroudchi,\u0026#32; Sharifzadeh,\u0026#32; Li,\u0026#32; Fisher,\u0026#32; Marvi,\u0026#32; Peet,\u0026#32; He,\u0026#32; Berman\u0026#32;\u0026amp;\u0026#32;Aukes (2019) Khodambashi,\u0026#32; R.,\u0026#32; Doroudchi,\u0026#32; A.,\u0026#32; Sharifzadeh,\u0026#32; M.,\u0026#32; Li,\u0026#32; D.,\u0026#32; Fisher,\u0026#32; R.,\u0026#32; Marvi,\u0026#32; H.,\u0026#32; Peet,\u0026#32; M.,\u0026#32; He,\u0026#32; X.,\u0026#32; Berman,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2019). \u0026#32;Multi DOF Electrical Control of Hydrogel-based Soft Machines. (under revision).\u0026#32;1–35. Knaup\u0026#32;\u0026amp;\u0026#32;Aukes (2019) Knaup,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2019). \u0026#32; Design, Modeling, And Optimization Of A Hopping Robot Platform. Koh,\u0026#32; Jung,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Cho (2013) Koh,\u0026#32; J.,\u0026#32; Jung,\u0026#32; S.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32;A jumping robotic insect based on a torque reversal catapult mechanism. IEEE International Conference on Intelligent Robots and Systems.\u0026#32;3796–3801. https://doi.org/10.1109/IROS.2013.6696899 Koh\u0026#32;\u0026amp;\u0026#32;Cho (2013) Koh,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32;Omega-Shaped Inchworm-Inspired Crawling Robot With Large-Index-and-Pitch (LIP) SMA Spring Actuators. IEEE/ASME Transactions on Mechatronics,\u0026#32;18(2).\u0026#32;419–429. https://doi.org/10.1109/TMECH.2012.2211033 Kohut,\u0026#32; Zarrouk,\u0026#32; Peterson\u0026#32;\u0026amp;\u0026#32;Fearing (2013) Kohut,\u0026#32; N.,\u0026#32; Zarrouk,\u0026#32; D.,\u0026#32; Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2013). \u0026#32; Aerodynamic steering of a 10 cm high-speed running robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2013.6697167 Laflin,\u0026#32; Morris,\u0026#32; Muqeem\u0026#32;\u0026amp;\u0026#32;Gracias (2012) Laflin,\u0026#32; K.,\u0026#32; Morris,\u0026#32; C.,\u0026#32; Muqeem,\u0026#32; T.\u0026#32;\u0026amp;\u0026#32;Gracias,\u0026#32; D. \u0026#32; (2012). \u0026#32;Laser triggered sequential folding of microstructures. Applied Physics Letters,\u0026#32;101(13). https://doi.org/10.1063/1.4754607 Lee,\u0026#32; Kim,\u0026#32; Kim,\u0026#32; Park\u0026#32;\u0026amp;\u0026#32;Cho (2013) Lee,\u0026#32; D.,\u0026#32; Kim,\u0026#32; J.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Park,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32; Design of Deformable-Wheeled Robot Based on Origami Structure with Shape Memory Alloy Coil Spring. Lee,\u0026#32; Jung,\u0026#32; Sin,\u0026#32; Ahn\u0026#32;\u0026amp;\u0026#32;Cho (2013) Lee,\u0026#32; D.,\u0026#32; Jung,\u0026#32; G.,\u0026#32; Sin,\u0026#32; M.,\u0026#32; Ahn,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32; Deformable wheel robot based on origami structure. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2013.6631383 Li,\u0026#32; Vogt,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Wood (2017) Li,\u0026#32; S.,\u0026#32; Vogt,\u0026#32; D.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2017). \u0026#32;Fluid-driven origami-inspired artificial muscles. Proceedings of the National Academy of Sciences,\u0026#32;114(50).\u0026#32;201713450. https://doi.org/10.1073/pnas.1713450114 Lighthouse\u0026#32;\u0026amp;\u0026#32;Aukes (2019) Lighthouse,\u0026#32; G.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2019). \u0026#32; Extending the Jumping Range of a Small Robot via Collapsible Gliding Wings. \u0026#32; Arizona State University. Liu,\u0026#32; Boyles,\u0026#32; Genzer\u0026#32;\u0026amp;\u0026#32;Dickey (2012) Liu,\u0026#32; Y.,\u0026#32; Boyles,\u0026#32; J.,\u0026#32; Genzer,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Dickey,\u0026#32; M. \u0026#32; (2012). \u0026#32;Self-folding of polymer sheets using local light absorption. Soft Matter,\u0026#32;8(6).\u0026#32;1764. https://doi.org/10.1039/c1sm06564e Luck,\u0026#32; Campbell,\u0026#32; Jansen,\u0026#32; Aukes\u0026#32;\u0026amp;\u0026#32;Ben Amor (2017) Luck,\u0026#32; K.,\u0026#32; Campbell,\u0026#32; J.,\u0026#32; Jansen,\u0026#32; M.,\u0026#32; Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Ben Amor,\u0026#32; H. \u0026#32; (2017). \u0026#32; From the Lab to the Desert: Fast Prototyping and Learning of Robot Locomotion. \u0026#32;Retrieved from\u0026#32; Mao,\u0026#32; Yu,\u0026#32; Isakov,\u0026#32; Wu,\u0026#32; Dunn\u0026#32;\u0026amp;\u0026#32;Jerry Qi (2015) Mao,\u0026#32; Y.,\u0026#32; Yu,\u0026#32; K.,\u0026#32; Isakov,\u0026#32; M.,\u0026#32; Wu,\u0026#32; J.,\u0026#32; Dunn,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Jerry Qi,\u0026#32; H. \u0026#32; (2015). \u0026#32;Sequential Self-Folding Structures by 3D Printed Digital Shape Memory Polymers. Scientific Reports,\u0026#32;5.\u0026#32;13616. https://doi.org/10.1038/srep13616 McClintock,\u0026#32; Temel,\u0026#32; Doshi,\u0026#32; Koh\u0026#32;\u0026amp;\u0026#32;Wood (2018) McClintock,\u0026#32; H.,\u0026#32; Temel,\u0026#32; F.,\u0026#32; Doshi,\u0026#32; N.,\u0026#32; Koh,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2018). \u0026#32;The milliDelta: A high-bandwidth, high-precision, millimeter-scale Delta robot. Science Robotics,\u0026#32;3(14).\u0026#32;eaar3018. https://doi.org/10.1126/scirobotics.aar3018 Mehta\u0026#32;\u0026amp;\u0026#32;Rus (2014) Mehta,\u0026#32; A.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2014). \u0026#32;An end-to-end system for designing mechanical structures for print-and-fold robots. Proceedings - IEEE International Conference on Robotics and Automation.\u0026#32;1460–1465. https://doi.org/10.1109/ICRA.2014.6907044 Mehta,\u0026#32; DelPreto\u0026#32;\u0026amp;\u0026#32;Rus (2015) Mehta,\u0026#32; A.,\u0026#32; DelPreto,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2015). \u0026#32;Integrated Codesign of Printable Robots. Journal of Mechanisms and Robotics,\u0026#32;7(2).\u0026#32;021015. https://doi.org/10.1115/1.4029496 Miyashita,\u0026#32; Onal\u0026#32;\u0026amp;\u0026#32;Rus (2013) Miyashita,\u0026#32; S.,\u0026#32; Onal,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2013). \u0026#32; Self-Folding of an Origami Robot by Uniform Heating. Miyashita,\u0026#32; Guitron,\u0026#32; Ludersdorfer,\u0026#32; Sung\u0026#32;\u0026amp;\u0026#32;Rus (2015) Miyashita,\u0026#32; S.,\u0026#32; Guitron,\u0026#32; S.,\u0026#32; Ludersdorfer,\u0026#32; M.,\u0026#32; Sung,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2015). \u0026#32;An Untethered Miniature Origami Robot that Self-folds , Walks , Swims , and Degrades.\u0026#32;1490–1496. https://doi.org/10.1109/ICRA.2015.7139386 Miyashita,\u0026#32; Guitron,\u0026#32; Li\u0026#32;\u0026amp;\u0026#32;Rus (2017) Miyashita,\u0026#32; S.,\u0026#32; Guitron,\u0026#32; S.,\u0026#32; Li,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2017). \u0026#32;Robotic metamorphosis by origami exoskeletons. Science Robotics,\u0026#32;2(10).\u0026#32;eaao4369. https://doi.org/10.1126/scirobotics.aao4369 Mulgaonkar,\u0026#32; Araki,\u0026#32; Koh,\u0026#32; Guerrero-Bonilla,\u0026#32; Aukes,\u0026#32; Makineni,\u0026#32; Tolley,\u0026#32; Rus,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Kumar (2016) Mulgaonkar,\u0026#32; Y.,\u0026#32; Araki,\u0026#32; B.,\u0026#32; Koh,\u0026#32; J.,\u0026#32; Guerrero-Bonilla,\u0026#32; L.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Makineni,\u0026#32; A.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Rus,\u0026#32; D.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Kumar,\u0026#32; V. \u0026#32; (2016). \u0026#32; The Flying Monkey: A Mesoscale Robot That Can Run, Fly, And Grasp. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2016.7487667 Niiyama,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Kim (2014) Niiyama,\u0026#32; R.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Kim,\u0026#32; S. \u0026#32; (2014). \u0026#32;Pouch Motors: Printable/Inflatable Soft Actuators for Robotics. IEEE International Conference on Robotics and Automation (ICRA).\u0026#32;6332–6337. https://doi.org/10.1109/ICRA.2014.6907793 Niiyama,\u0026#32; Sun,\u0026#32; Yao,\u0026#32; Ishii,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Kim (2015) Niiyama,\u0026#32; R.,\u0026#32; Sun,\u0026#32; X.,\u0026#32; Yao,\u0026#32; L.,\u0026#32; Ishii,\u0026#32; H.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Kim,\u0026#32; S. \u0026#32; (2015). \u0026#32;Sticky Actuator: Free-Form Planar Actuators for Animated Objects. Proceedings of the Ninth International Conference on Tangible, Embedded, and Embodied Interaction - TEI ’14.\u0026#32;77–84. https://doi.org/10.1145/2677199.2680600 Overvelde,\u0026#32; Weaver,\u0026#32; Hoberman\u0026#32;\u0026amp;\u0026#32;Bertoldi (2017) Overvelde,\u0026#32; J.,\u0026#32; Weaver,\u0026#32; J.,\u0026#32; Hoberman,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Bertoldi,\u0026#32; K. \u0026#32; (2017). \u0026#32;Rational design of reconfigurable prismatic architected materials. Nature,\u0026#32;541(7637).\u0026#32;347–352. https://doi.org/10.1038/nature20824 Paik\u0026#32;\u0026amp;\u0026#32;Wood (2012) Paik,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;A bidirectional shape memory alloy folding actuator. Smart Materials and Structures,\u0026#32;21(6).\u0026#32;065013. https://doi.org/10.1088/0964-1726/21/6/065013 Peraza-Hernandez,\u0026#32; Frei,\u0026#32; Hartl\u0026#32;\u0026amp;\u0026#32;Lagoudas (2014) Peraza-Hernandez,\u0026#32; E.,\u0026#32; Frei,\u0026#32; K.,\u0026#32; Hartl,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Lagoudas,\u0026#32; D. \u0026#32; (2014). \u0026#32;Folding patterns and shape optimization using SMA-based self-folding laminates.\u0026#32;90571G. https://doi.org/10.1117/12.2045561 Peterson\u0026#32;\u0026amp;\u0026#32;Fearing (2011) Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2011). \u0026#32;Experimental dynamics of wing assisted running for a bipedal ornithopter. IEEE International Conference on Intelligent Robots and Systems.\u0026#32;5080–5086. https://doi.org/10.1109/IROS.2011.6048800 Peterson,\u0026#32; Birkmeyer,\u0026#32; Dudley\u0026#32;\u0026amp;\u0026#32;Fearing (2011) Peterson,\u0026#32; K.,\u0026#32; Birkmeyer,\u0026#32; P.,\u0026#32; Dudley,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2011). \u0026#32;A wing-assisted running robot and implications for avian flight evolution. Bioinspiration and Biomimetics,\u0026#32;6(4). https://doi.org/10.1088/1748-3182/6/4/046008 Pister,\u0026#32; Judy,\u0026#32; Burgett\u0026#32;\u0026amp;\u0026#32;Fearing (1992) Pister,\u0026#32; K.,\u0026#32; Judy,\u0026#32; M.,\u0026#32; Burgett,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (1992). \u0026#32;Microfabricated hinges. Sensors and Actuators A: Physical,\u0026#32;33(3).\u0026#32;249–256. https://doi.org/10.1016/0924-4247(92)80172-Y Reid,\u0026#32; Bright\u0026#32;\u0026amp;\u0026#32;Butler (1998) Reid,\u0026#32; J.,\u0026#32; Bright,\u0026#32; V.\u0026#32;\u0026amp;\u0026#32;Butler,\u0026#32; J. \u0026#32; (1998). \u0026#32;Automated assembly of flip-up micromirrors. Sensors and Actuators A: Physical,\u0026#32;66(1-3).\u0026#32;292–298. https://doi.org/10.1016/S0924-4247(97)01719-6 Ryu,\u0026#32; D’Amato,\u0026#32; Cui,\u0026#32; Long,\u0026#32; Jerry Qi\u0026#32;\u0026amp;\u0026#32;Dunn (2012) Ryu,\u0026#32; J.,\u0026#32; D’Amato,\u0026#32; M.,\u0026#32; Cui,\u0026#32; X.,\u0026#32; Long,\u0026#32; K.,\u0026#32; Jerry Qi,\u0026#32; H.\u0026#32;\u0026amp;\u0026#32;Dunn,\u0026#32; M. \u0026#32; (2012). \u0026#32;Photo-origami—Bending and folding polymers with light. Applied Physics Letters,\u0026#32;100(16).\u0026#32;161908. https://doi.org/10.1063/1.3700719 Sahai,\u0026#32; Lee\u0026#32;\u0026amp;\u0026#32;Fearing (2003) Sahai,\u0026#32; R.,\u0026#32; Lee,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2003). \u0026#32;Semi-automated micro assembly for rapid prototyping of a one DOF surgical wrist. Proceedings 2003 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS 2003) (Cat. No.03CH37453),\u0026#32;2(October). https://doi.org/10.1109/IROS.2003.1248918 Sahai,\u0026#32; Avadhanula,\u0026#32; Groff,\u0026#32; Steltz,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Fearing (2006) Sahai,\u0026#32; R.,\u0026#32; Avadhanula,\u0026#32; S.,\u0026#32; Groff,\u0026#32; R.,\u0026#32; Steltz,\u0026#32; E.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2006). \u0026#32;Towards a 3g crawling robot through the integration of microrobot technologies. Proceedings - IEEE International Conference on Robotics and Automation,\u0026#32;2006.\u0026#32;296–302. https://doi.org/10.1109/ROBOT.2006.1641727 Schenk\u0026#32;\u0026amp;\u0026#32;Guest (2011) Schenk,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Guest,\u0026#32; S. \u0026#32; (2011). \u0026#32; Origami Folding : A Structural Engineering Approach. Schulz,\u0026#32; Sung,\u0026#32; Spielberg,\u0026#32; Zhao,\u0026#32; Cheng,\u0026#32; Grinspun,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Matusik (2017) Schulz,\u0026#32; A.,\u0026#32; Sung,\u0026#32; C.,\u0026#32; Spielberg,\u0026#32; A.,\u0026#32; Zhao,\u0026#32; W.,\u0026#32; Cheng,\u0026#32; R.,\u0026#32; Grinspun,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Matusik,\u0026#32; W. \u0026#32; (2017). \u0026#32;Interactive robogami: An end-to-end system for design of robots with ground locomotion. The International Journal of Robotics Research.\u0026#32;1–17. https://doi.org/10.1177/0278364917723465 Sharifzadeh,\u0026#32; Khodambashi,\u0026#32; Zhang\u0026#32;\u0026amp;\u0026#32;Aukes (2018) Sharifzadeh,\u0026#32; M.,\u0026#32; Khodambashi,\u0026#32; R.,\u0026#32; Zhang,\u0026#32; W.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2018). \u0026#32; On Locomotion of a Laminated Fish-Inspired Robot in a Small-to-Size Environment. \u0026#32; American Society of Mechanical Engineers. https://doi.org/10.1115/DETC2018-85594 Sharifzadeh\u0026#32;\u0026amp;\u0026#32;Aukes (2021) Sharifzadeh,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2021). \u0026#32;Curvature-Induced Buckling for Flapping-Wing Vehicles. IEEE/ASME Transactions on Mechatronics,\u0026#32;26(1).\u0026#32;503–514. https://doi.org/10.1109/TMECH.2020.3034659 Sharifzadeh,\u0026#32; Jiang\u0026#32;\u0026amp;\u0026#32;Aukes (2021) Sharifzadeh,\u0026#32; M.,\u0026#32; Jiang,\u0026#32; Y.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2021). \u0026#32;Compensation of Material Deformation in Foldable Robots (A Case Study of Spherical Parallel Manipulators Fabricated via Laminate Processes). ASME Journal of Mechanisms and Robotics (In Prep). Shigemune,\u0026#32; Maeda,\u0026#32; Hara,\u0026#32; Koike\u0026#32;\u0026amp;\u0026#32;Hashimoto (2015) Shigemune,\u0026#32; H.,\u0026#32; Maeda,\u0026#32; S.,\u0026#32; Hara,\u0026#32; Y.,\u0026#32; Koike,\u0026#32; U.\u0026#32;\u0026amp;\u0026#32;Hashimoto,\u0026#32; S. \u0026#32; (2015). \u0026#32; Kirigami robot: Making paper robot using desktop cutting plotter and inkjet printer. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2015.7353506 Shimada,\u0026#32; Thompson,\u0026#32; Yan,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Fearing (2000) Shimada,\u0026#32; E.,\u0026#32; Thompson,\u0026#32; J.,\u0026#32; Yan,\u0026#32; J.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2000). \u0026#32;Prototyping millirobots using dextrous microassembly and folding. Symposium on Microrobotics ASME Int. Mechanical Engineering Cong. and Exp.\u0026#32;1–8. Shin,\u0026#32; Felton,\u0026#32; Tolley\u0026#32;\u0026amp;\u0026#32;Wood (2014) Shin,\u0026#32; B.,\u0026#32; Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32; Self-assembling sensors for printable machines. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2014.6907503 Shuch,\u0026#32; Rogers,\u0026#32; Shafa\u0026#32;\u0026amp;\u0026#32;Aukes (2019) Shuch,\u0026#32; B.,\u0026#32; Rogers,\u0026#32; E.,\u0026#32; Shafa,\u0026#32; T.\u0026#32;\u0026amp;\u0026#32;Aukes,\u0026#32; D. \u0026#32; (2019). \u0026#32; Design Of A Two Dof Laminate Leg Transmission For Creating Walking Robot Platforms. Sitti (2003) Sitti,\u0026#32; M. \u0026#32; (2003). \u0026#32;Piezoelectrically actuated four-bar mechanism with two flexible links for micromechanical flying insect thorax. IEEE/ASME Transactions on Mechatronics,\u0026#32;8(1).\u0026#32;26–36. https://doi.org/10.1109/TMECH.2003.809126 Sreetharan,\u0026#32; Whitney,\u0026#32; Strauss\u0026#32;\u0026amp;\u0026#32;Wood (2012) Sreetharan,\u0026#32; P.,\u0026#32; Whitney,\u0026#32; J.,\u0026#32; Strauss,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;Monolithic fabrication of millimeter-scale machines. Journal of Micromechanics and Microengineering,\u0026#32;22(5).\u0026#32;55027. https://doi.org/10.1088/0960-1317/22/5/055027 Stellman,\u0026#32; Arora,\u0026#32; Takahashi,\u0026#32; Demaine\u0026#32;\u0026amp;\u0026#32;Barbastathis (2005) Stellman,\u0026#32; P.,\u0026#32; Arora,\u0026#32; W.,\u0026#32; Takahashi,\u0026#32; S.,\u0026#32; Demaine,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Barbastathis,\u0026#32; G. \u0026#32; (2005). \u0026#32; Kinematics and Dynamics of Nanostructured Origami™. \u0026#32; ASME. https://doi.org/10.1115/IMECE2005-81824 Stuart,\u0026#32; Wang,\u0026#32; Gardineer,\u0026#32; Christensen,\u0026#32; Aukes\u0026#32;\u0026amp;\u0026#32;Cutkosky (2014) Stuart,\u0026#32; H.,\u0026#32; Wang,\u0026#32; S.,\u0026#32; Gardineer,\u0026#32; B.,\u0026#32; Christensen,\u0026#32; D.,\u0026#32; Aukes,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Cutkosky,\u0026#32; M. \u0026#32; (2014). \u0026#32; A compliant underactuated hand with suction flow for underwater mobile manipulation. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2014.6907847 Sun,\u0026#32; Felton,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Kim (2015) Sun,\u0026#32; X.,\u0026#32; Felton,\u0026#32; S.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Kim,\u0026#32; S. \u0026#32; (2015). \u0026#32;Printing angle sensors for foldable robots. IEEE International Conference on Intelligent Robots and Systems,\u0026#32;2015-Decem.\u0026#32;1725–1731. https://doi.org/10.1109/IROS.2015.7353600 Teoh,\u0026#32; Fuller,\u0026#32; Chirarattananon,\u0026#32; Prez-Arancibia,\u0026#32; Greenberg\u0026#32;\u0026amp;\u0026#32;Wood (2012) Teoh,\u0026#32; Z.,\u0026#32; Fuller,\u0026#32; S.,\u0026#32; Chirarattananon,\u0026#32; P.,\u0026#32; Prez-Arancibia,\u0026#32; N.,\u0026#32; Greenberg,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;A hovering flapping-wing microrobot with altitude control and passive upright stability. IEEE International Conference on Intelligent Robots and Systems.\u0026#32;3209–3216. https://doi.org/10.1109/IROS.2012.6386151 Tolley,\u0026#32; Felton,\u0026#32; Miyashita,\u0026#32; Xu,\u0026#32; ,\u0026#32; Zhou,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Wood (2013) Tolley,\u0026#32; M.,\u0026#32; Felton,\u0026#32; S.,\u0026#32; Miyashita,\u0026#32; S.,\u0026#32; Xu,\u0026#32; L.,\u0026#32; ,\u0026#32; Zhou,\u0026#32; M.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2013). \u0026#32; Self-folding shape memory laminates for automated fabrication. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2013.6697068 Vaccaro,\u0026#32; Kubota,\u0026#32; Fleischmann,\u0026#32; Saravanan\u0026#32;\u0026amp;\u0026#32;Aida (2003) Vaccaro,\u0026#32; P.,\u0026#32; Kubota,\u0026#32; K.,\u0026#32; Fleischmann,\u0026#32; T.,\u0026#32; Saravanan,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Aida,\u0026#32; T. \u0026#32; (2003). \u0026#32;Valley-fold and mountain-fold in the micro-origami technique. Microelectronics Journal,\u0026#32;34(5-8).\u0026#32;447–449. https://doi.org/10.1016/S0026-2692(03)00070-3 Wang,\u0026#32; Plecnik\u0026#32;\u0026amp;\u0026#32;Fearing (2016) Wang,\u0026#32; L.,\u0026#32; Plecnik,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2016). \u0026#32; Robotic folding of 2D and 3D structures from a ribbon. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2016.7487550 Wood,\u0026#32; Avadhanula,\u0026#32; Menon\u0026#32;\u0026amp;\u0026#32;Fearing (2003) Wood,\u0026#32; R.,\u0026#32; Avadhanula,\u0026#32; S.,\u0026#32; Menon,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2003). \u0026#32; Microrobotics using composite materials: the micromechanical flying insect thorax. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2003.1241863 Wood,\u0026#32; Steltz\u0026#32;\u0026amp;\u0026#32;Fearing (2005) Wood,\u0026#32; R.,\u0026#32; Steltz,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2005). \u0026#32;Optimal energy density piezoelectric bending actuators. Sensors and Actuators A: Physical,\u0026#32;119(2).\u0026#32;476–488. https://doi.org/10.1016/j.sna.2004.10.024 Wood (2008) Wood,\u0026#32; R. \u0026#32; (2008). \u0026#32;The First Takeoff of a Biologically Inspired At-Scale Robotic Insect. IEEE Transactions on Robotics,\u0026#32;24(2).\u0026#32;341–347. https://doi.org/10.1109/TRO.2008.916997 Yan,\u0026#32; Wood,\u0026#32; Avadhanula,\u0026#32; Sitti\u0026#32;\u0026amp;\u0026#32;Fearing (2001) Yan,\u0026#32; J.,\u0026#32; Wood,\u0026#32; R.,\u0026#32; Avadhanula,\u0026#32; S.,\u0026#32; Sitti,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2001). \u0026#32; Towards flapping wing control for a micromechanical flying insect. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2001.933225 Yang,\u0026#32; Zhang,\u0026#32; Kan,\u0026#32; Zeng\u0026#32;\u0026amp;\u0026#32;Wang (2019) Yang,\u0026#32; Y.,\u0026#32; Zhang,\u0026#32; Y.,\u0026#32; Kan,\u0026#32; Z.,\u0026#32; Zeng,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Wang,\u0026#32; M. \u0026#32; (2019). \u0026#32;Hybrid Jamming for Bioinspired Soft Robotic Fingers. Soft Robotics.\u0026#32;soro.2019.0093. https://doi.org/10.1089/soro.2019.0093 Yeh,\u0026#32; Kruglick\u0026#32;\u0026amp;\u0026#32;Pister (1995) Yeh,\u0026#32; R.,\u0026#32; Kruglick,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Pister,\u0026#32; K. \u0026#32; (1995). \u0026#32; Microelectromechanical Components For Articulated Microrobots. \u0026#32; IEEE. https://doi.org/10.1109/SENSOR.1995.721817 Yi\u0026#32;\u0026amp;\u0026#32;Liu (1999) Yi,\u0026#32; Y.\u0026#32;\u0026amp;\u0026#32;Liu,\u0026#32; C. \u0026#32; (1999). \u0026#32;Magnetic actuation of hinged microstructures. Journal of Microelectromechanical Systems,\u0026#32;8(1).\u0026#32;10–17. https://doi.org/10.1109/84.749397 Zhakypov,\u0026#32; Belke\u0026#32;\u0026amp;\u0026#32;Paik (2017) Zhakypov,\u0026#32; Z.,\u0026#32; Belke,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Paik,\u0026#32; J. \u0026#32; (2017). \u0026#32; Tribot: A deployable, self-righting and multi-locomotive origami robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2017.8206445 ","permalink":"https://foldable-robotics.github.io/modules/introduction/01-foldable-background/","tags":null,"title":"Foldable Robotics Background"},{"categories":null,"contents":"1992-1995 ( Citation: Pister,\u0026#32;Judy \u0026amp; al.,\u0026#32;1992 Pister,\u0026#32; K.,\u0026#32; Judy,\u0026#32; M.,\u0026#32; Burgett,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (1992). \u0026#32;Microfabricated hinges. Sensors and Actuators A: Physical,\u0026#32;33(3).\u0026#32;249–256. https://doi.org/10.1016/0924-4247(92)80172-Y ) ( Citation: Yeh,\u0026#32;Kruglick \u0026amp; al.,\u0026#32;1995 Yeh,\u0026#32; R.,\u0026#32; Kruglick,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Pister,\u0026#32; K. \u0026#32; (1995). \u0026#32; Microelectromechanical Components For Articulated Microrobots. \u0026#32; IEEE. https://doi.org/10.1109/SENSOR.1995.721817 ) ( Citation: Reid,\u0026#32;Bright \u0026amp; al.,\u0026#32;1998 Reid,\u0026#32; J.,\u0026#32; Bright,\u0026#32; V.\u0026#32;\u0026amp;\u0026#32;Butler,\u0026#32; J. \u0026#32; (1998). \u0026#32;Automated assembly of flip-up micromirrors. Sensors and Actuators A: Physical,\u0026#32;66(1-3).\u0026#32;292–298. https://doi.org/10.1016/S0924-4247(97)01719-6 ) 1998-2001 ( Citation: Shimada,\u0026#32;Thompson \u0026amp; al.,\u0026#32;2000 Shimada,\u0026#32; E.,\u0026#32; Thompson,\u0026#32; J.,\u0026#32; Yan,\u0026#32; J.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2000). \u0026#32;Prototyping millirobots using dextrous microassembly and folding. Symposium on Microrobotics ASME Int. Mechanical Engineering Cong. and Exp.\u0026#32;1–8. ) ( Citation: Fearing,\u0026#32;Chiang \u0026amp; al.,\u0026#32;2000 Fearing,\u0026#32; R.,\u0026#32; Chiang,\u0026#32; K.,\u0026#32; Dickinson,\u0026#32; M.,\u0026#32; Pick,\u0026#32; D.,\u0026#32; Sitti,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Yan,\u0026#32; J. \u0026#32; (2000). \u0026#32; Wing transmission for a micromechanical flying insect. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2000.844811 ) ( Citation: Yan,\u0026#32;Wood \u0026amp; al.,\u0026#32;2001 Yan,\u0026#32; J.,\u0026#32; Wood,\u0026#32; R.,\u0026#32; Avadhanula,\u0026#32; S.,\u0026#32; Sitti,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2001). \u0026#32; Towards flapping wing control for a micromechanical flying insect. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2001.933225 ) 2003-2004 ( Citation: Sahai,\u0026#32;Lee \u0026amp; al.,\u0026#32;2003 Sahai,\u0026#32; R.,\u0026#32; Lee,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2003). \u0026#32;Semi-automated micro assembly for rapid prototyping of a one DOF surgical wrist. Proceedings 2003 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS 2003) (Cat. No.03CH37453),\u0026#32;2(October). https://doi.org/10.1109/IROS.2003.1248918 ) ( Citation: Wood,\u0026#32;Avadhanula \u0026amp; al.,\u0026#32;2003 Wood,\u0026#32; R.,\u0026#32; Avadhanula,\u0026#32; S.,\u0026#32; Menon,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2003). \u0026#32; Microrobotics using composite materials: the micromechanical flying insect thorax. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2003.1241863 ) ( Citation: Buchner,\u0026#32;2004 Buchner,\u0026#32; T. \u0026#32; (2004). \u0026#32;Kinematics of 3D Folding Structures for Nanostructured Origami.\u0026#32;Retrieved from\u0026#32; ) 2005-2006 ( Citation: Avadhanula\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32;2005 Avadhanula,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2005). \u0026#32; Flexure design rules for carbon fiber microrobotic mechanisms. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2005.1570339 ) ( Citation: Wood,\u0026#32;Steltz \u0026amp; al.,\u0026#32;2005 Wood,\u0026#32; R.,\u0026#32; Steltz,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2005). \u0026#32;Optimal energy density piezoelectric bending actuators. Sensors and Actuators A: Physical,\u0026#32;119(2).\u0026#32;476–488. https://doi.org/10.1016/j.sna.2004.10.024 ) ( Citation: Sahai,\u0026#32;Avadhanula \u0026amp; al.,\u0026#32;2006 Sahai,\u0026#32; R.,\u0026#32; Avadhanula,\u0026#32; S.,\u0026#32; Groff,\u0026#32; R.,\u0026#32; Steltz,\u0026#32; E.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2006). \u0026#32;Towards a 3g crawling robot through the integration of microrobot technologies. Proceedings - IEEE International Conference on Robotics and Automation,\u0026#32;2006.\u0026#32;296–302. https://doi.org/10.1109/ROBOT.2006.1641727 ) 2008 ( Citation: Hoover\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32;2008 Hoover,\u0026#32; A.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2008). \u0026#32;Fast scale prototyping for folded millirobots. 2008 IEEE International Conference on Robotics and Automation.\u0026#32;1777–1778. https://doi.org/10.1109/ROBOT.2008.4543462 ) ( Citation: Wood,\u0026#32;2008 Wood,\u0026#32; R. \u0026#32; (2008). \u0026#32;The First Takeoff of a Biologically Inspired At-Scale Robotic Insect. IEEE Transactions on Robotics,\u0026#32;24(2).\u0026#32;341–347. https://doi.org/10.1109/TRO.2008.916997 ) ( Citation: Hoover,\u0026#32;Steltz \u0026amp; al.,\u0026#32;2008 Hoover,\u0026#32; A.,\u0026#32; Steltz,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2008). \u0026#32; RoACH: An autonomous 2.4g crawling hexapod robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2008.4651149 ) 2009-2010 ( Citation: Birkmeyer,\u0026#32;Peterson \u0026amp; al.,\u0026#32;2009 Birkmeyer,\u0026#32; P.,\u0026#32; Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2009). \u0026#32;DASH: A dynamic 16g hexapedal robot. 2009 IEEE/RSJ International Conference on Intelligent Robots and Systems.\u0026#32;2683–2689. https://doi.org/10.1109/IROS.2009.5354561 ) ( Citation: Hoover,\u0026#32;Burden \u0026amp; al.,\u0026#32;2010 Hoover,\u0026#32; A.,\u0026#32; Burden,\u0026#32; S.,\u0026#32; Shankar Sastry,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2010). \u0026#32; Bio-inspired design and dynamic maneuverability of a minimally actuated six-legged robot. \u0026#32; IEEE. https://doi.org/10.1109/BIOROB.2010.5626034 ) ( Citation: Hawkes,\u0026#32;An \u0026amp; al.,\u0026#32;2010 Hawkes,\u0026#32; E.,\u0026#32; An,\u0026#32; B.,\u0026#32; Benbernou,\u0026#32; N.,\u0026#32; Tanaka,\u0026#32; H.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2010). \u0026#32;Programmable matter by folding. Proceedings of the National Academy of Sciences,\u0026#32;107(28).\u0026#32;12441–12445. https://doi.org/10.1073/pnas.0914069107 ) 2011 ( Citation: Peterson\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32;2011 Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2011). \u0026#32;Experimental dynamics of wing assisted running for a bipedal ornithopter. IEEE International Conference on Intelligent Robots and Systems.\u0026#32;5080–5086. https://doi.org/10.1109/IROS.2011.6048800 ) ( Citation: Peterson,\u0026#32;Birkmeyer \u0026amp; al.,\u0026#32;2011 Peterson,\u0026#32; K.,\u0026#32; Birkmeyer,\u0026#32; P.,\u0026#32; Dudley,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2011). \u0026#32;A wing-assisted running robot and implications for avian flight evolution. Bioinspiration and Biomimetics,\u0026#32;6(4). https://doi.org/10.1088/1748-3182/6/4/046008 ) ( Citation: Hoffman\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32;2011 Hoffman,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2011). \u0026#32; Passive undulatory gaits enhance walking in a myriapod millirobot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2011.6094700 ) 2012 ( Citation: Sreetharan,\u0026#32;Whitney \u0026amp; al.,\u0026#32;2012 Sreetharan,\u0026#32; P.,\u0026#32; Whitney,\u0026#32; J.,\u0026#32; Strauss,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;Monolithic fabrication of millimeter-scale machines. Journal of Micromechanics and Microengineering,\u0026#32;22(5).\u0026#32;55027. https://doi.org/10.1088/0960-1317/22/5/055027 ) 2013 ( Citation: Koh\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32;2013 Koh,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32;Omega-Shaped Inchworm-Inspired Crawling Robot With Large-Index-and-Pitch (LIP) SMA Spring Actuators. IEEE/ASME Transactions on Mechatronics,\u0026#32;18(2).\u0026#32;419–429. https://doi.org/10.1109/TMECH.2012.2211033 ) ( Citation: Haldane,\u0026#32;Peterson \u0026amp; al.,\u0026#32;2013 Haldane,\u0026#32; D.,\u0026#32; Peterson,\u0026#32; K.,\u0026#32; Garcia Bermudez,\u0026#32; F.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2013). \u0026#32; Animal-inspired design and aerodynamic stabilization of a hexapedal millirobot. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2013.6631034 ) ( Citation: Lee,\u0026#32;Jung \u0026amp; al.,\u0026#32;2013 Lee,\u0026#32; D.,\u0026#32; Jung,\u0026#32; G.,\u0026#32; Sin,\u0026#32; M.,\u0026#32; Ahn,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32; Deformable wheel robot based on origami structure. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2013.6631383 ) ( Citation: Lee,\u0026#32;Kim \u0026amp; al.,\u0026#32;2013 Lee,\u0026#32; D.,\u0026#32; Kim,\u0026#32; J.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Park,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32; Design of Deformable-Wheeled Robot Based on Origami Structure with Shape Memory Alloy Coil Spring. ) ( Citation: Kohut,\u0026#32;Zarrouk \u0026amp; al.,\u0026#32;2013 Kohut,\u0026#32; N.,\u0026#32; Zarrouk,\u0026#32; D.,\u0026#32; Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2013). \u0026#32; Aerodynamic steering of a 10 cm high-speed running robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2013.6697167 ) ( Citation: Felton,\u0026#32;Tolley \u0026amp; al.,\u0026#32;2013 Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Shin,\u0026#32; B.,\u0026#32; Onal,\u0026#32; C.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2013). \u0026#32;Self-folding with shape memory composites. Soft Matter,\u0026#32;9(32).\u0026#32;7688. https://doi.org/10.1039/c3sm51003d ) 2014 ( Citation: Baisch,\u0026#32;Ozcan \u0026amp; al.,\u0026#32;2014 Baisch,\u0026#32; A.,\u0026#32; Ozcan,\u0026#32; O.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Ithier,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;High speed locomotion for a quadrupedal microrobot. The International Journal of Robotics Research. https://doi.org/10.1177/0278364914521473 ) ( Citation: Felton,\u0026#32;Tolley \u0026amp; al.,\u0026#32;2014 Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;A method for building self-folding machines. Science,\u0026#32;345(6197).\u0026#32;644–646. https://doi.org/10.1126/science.1252610 ) 2015 ( Citation: Miyashita,\u0026#32;Guitron \u0026amp; al.,\u0026#32;2015 Miyashita,\u0026#32; S.,\u0026#32; Guitron,\u0026#32; S.,\u0026#32; Ludersdorfer,\u0026#32; M.,\u0026#32; Sung,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2015). \u0026#32;An Untethered Miniature Origami Robot that Self-folds , Walks , Swims , and Degrades.\u0026#32;1490–1496. https://doi.org/10.1109/ICRA.2015.7139386 ) ( Citation: Firouzeh\u0026#32;\u0026amp;\u0026#32;Paik,\u0026#32;2015 Firouzeh,\u0026#32; A.\u0026#32;\u0026amp;\u0026#32;Paik,\u0026#32; J. \u0026#32; (2015). \u0026#32;Robogami: A Fully Integrated Low-Profile Robotic Origami. Journal of Mechanisms and Robotics,\u0026#32;7(2).\u0026#32;021009. https://doi.org/10.1115/1.4029491 ) 2016 ( Citation: Mulgaonkar,\u0026#32;Araki \u0026amp; al.,\u0026#32;2016 Mulgaonkar,\u0026#32; Y.,\u0026#32; Araki,\u0026#32; B.,\u0026#32; Koh,\u0026#32; J.,\u0026#32; Guerrero-Bonilla,\u0026#32; L.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Makineni,\u0026#32; A.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Rus,\u0026#32; D.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Kumar,\u0026#32; V. \u0026#32; (2016). \u0026#32; The Flying Monkey: A Mesoscale Robot That Can Run, Fly, And Grasp. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2016.7487667 ) ( Citation: Wang,\u0026#32;Plecnik \u0026amp; al.,\u0026#32;2016 Wang,\u0026#32; L.,\u0026#32; Plecnik,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2016). \u0026#32; Robotic folding of 2D and 3D structures from a ribbon. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2016.7487550 ) 2017 ( Citation: Overvelde,\u0026#32;Weaver \u0026amp; al.,\u0026#32;2017 Overvelde,\u0026#32; J.,\u0026#32; Weaver,\u0026#32; J.,\u0026#32; Hoberman,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Bertoldi,\u0026#32; K. \u0026#32; (2017). \u0026#32;Rational design of reconfigurable prismatic architected materials. Nature,\u0026#32;541(7637).\u0026#32;347–352. https://doi.org/10.1038/nature20824 ) ( Citation: Karras,\u0026#32;Fuller \u0026amp; al.,\u0026#32;2017 Karras,\u0026#32; J.,\u0026#32; Fuller,\u0026#32; C.,\u0026#32; Carpenter,\u0026#32; K.,\u0026#32; Buscicchio,\u0026#32; A.,\u0026#32; McKeeby,\u0026#32; D.,\u0026#32; Norman,\u0026#32; C.,\u0026#32; Parcheta,\u0026#32; C.,\u0026#32; Davydychev,\u0026#32; I.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2017). \u0026#32; Pop-up mars rover with textile-enhanced rigid-flex PCB body. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2017.7989642 ) ( Citation: Li,\u0026#32;Vogt \u0026amp; al.,\u0026#32;2017 Li,\u0026#32; S.,\u0026#32; Vogt,\u0026#32; D.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2017). \u0026#32;Fluid-driven origami-inspired artificial muscles. Proceedings of the National Academy of Sciences,\u0026#32;114(50).\u0026#32;201713450. https://doi.org/10.1073/pnas.1713450114 ) ( Citation: Zhakypov,\u0026#32;Belke \u0026amp; al.,\u0026#32;2017 Zhakypov,\u0026#32; Z.,\u0026#32; Belke,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Paik,\u0026#32; J. \u0026#32; (2017). \u0026#32; Tribot: A deployable, self-righting and multi-locomotive origami robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2017.8206445 ) ( Citation: Schulz,\u0026#32;Sung \u0026amp; al.,\u0026#32;2017 Schulz,\u0026#32; A.,\u0026#32; Sung,\u0026#32; C.,\u0026#32; Spielberg,\u0026#32; A.,\u0026#32; Zhao,\u0026#32; W.,\u0026#32; Cheng,\u0026#32; R.,\u0026#32; Grinspun,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Matusik,\u0026#32; W. \u0026#32; (2017). \u0026#32;Interactive robogami: An end-to-end system for design of robots with ground locomotion. The International Journal of Robotics Research.\u0026#32;1–17. https://doi.org/10.1177/0278364917723465 ) 2018 ( Citation: McClintock,\u0026#32;Temel \u0026amp; al.,\u0026#32;2018 McClintock,\u0026#32; H.,\u0026#32; Temel,\u0026#32; F.,\u0026#32; Doshi,\u0026#32; N.,\u0026#32; Koh,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2018). \u0026#32;The milliDelta: A high-bandwidth, high-precision, millimeter-scale Delta robot. Science Robotics,\u0026#32;3(14).\u0026#32;eaar3018. https://doi.org/10.1126/scirobotics.aar3018 ) Bibliography Avadhanula\u0026#32;\u0026amp;\u0026#32;Fearing (2005) Avadhanula,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2005). \u0026#32; Flexure design rules for carbon fiber microrobotic mechanisms. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2005.1570339 Baisch,\u0026#32; Ozcan,\u0026#32; Goldberg,\u0026#32; Ithier\u0026#32;\u0026amp;\u0026#32;Wood (2014) Baisch,\u0026#32; A.,\u0026#32; Ozcan,\u0026#32; O.,\u0026#32; Goldberg,\u0026#32; B.,\u0026#32; Ithier,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;High speed locomotion for a quadrupedal microrobot. The International Journal of Robotics Research. https://doi.org/10.1177/0278364914521473 Birkmeyer,\u0026#32; Peterson\u0026#32;\u0026amp;\u0026#32;Fearing (2009) Birkmeyer,\u0026#32; P.,\u0026#32; Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2009). \u0026#32;DASH: A dynamic 16g hexapedal robot. 2009 IEEE/RSJ International Conference on Intelligent Robots and Systems.\u0026#32;2683–2689. https://doi.org/10.1109/IROS.2009.5354561 Buchner (2004) Buchner,\u0026#32; T. \u0026#32; (2004). \u0026#32;Kinematics of 3D Folding Structures for Nanostructured Origami.\u0026#32;Retrieved from\u0026#32; Fearing,\u0026#32; Chiang,\u0026#32; Dickinson,\u0026#32; Pick,\u0026#32; Sitti\u0026#32;\u0026amp;\u0026#32;Yan (2000) Fearing,\u0026#32; R.,\u0026#32; Chiang,\u0026#32; K.,\u0026#32; Dickinson,\u0026#32; M.,\u0026#32; Pick,\u0026#32; D.,\u0026#32; Sitti,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Yan,\u0026#32; J. \u0026#32; (2000). \u0026#32; Wing transmission for a micromechanical flying insect. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2000.844811 Felton,\u0026#32; Tolley,\u0026#32; Shin,\u0026#32; Onal,\u0026#32; Demaine,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Wood (2013) Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Shin,\u0026#32; B.,\u0026#32; Onal,\u0026#32; C.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2013). \u0026#32;Self-folding with shape memory composites. Soft Matter,\u0026#32;9(32).\u0026#32;7688. https://doi.org/10.1039/c3sm51003d Felton,\u0026#32; Tolley,\u0026#32; Demaine,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Wood (2014) Felton,\u0026#32; S.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2014). \u0026#32;A method for building self-folding machines. Science,\u0026#32;345(6197).\u0026#32;644–646. https://doi.org/10.1126/science.1252610 Firouzeh\u0026#32;\u0026amp;\u0026#32;Paik (2015) Firouzeh,\u0026#32; A.\u0026#32;\u0026amp;\u0026#32;Paik,\u0026#32; J. \u0026#32; (2015). \u0026#32;Robogami: A Fully Integrated Low-Profile Robotic Origami. Journal of Mechanisms and Robotics,\u0026#32;7(2).\u0026#32;021009. https://doi.org/10.1115/1.4029491 Haldane,\u0026#32; Peterson,\u0026#32; Garcia Bermudez\u0026#32;\u0026amp;\u0026#32;Fearing (2013) Haldane,\u0026#32; D.,\u0026#32; Peterson,\u0026#32; K.,\u0026#32; Garcia Bermudez,\u0026#32; F.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2013). \u0026#32; Animal-inspired design and aerodynamic stabilization of a hexapedal millirobot. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2013.6631034 Hawkes,\u0026#32; An,\u0026#32; Benbernou,\u0026#32; Tanaka,\u0026#32; Kim,\u0026#32; Demaine,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Wood (2010) Hawkes,\u0026#32; E.,\u0026#32; An,\u0026#32; B.,\u0026#32; Benbernou,\u0026#32; N.,\u0026#32; Tanaka,\u0026#32; H.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Demaine,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2010). \u0026#32;Programmable matter by folding. Proceedings of the National Academy of Sciences,\u0026#32;107(28).\u0026#32;12441–12445. https://doi.org/10.1073/pnas.0914069107 Hoffman\u0026#32;\u0026amp;\u0026#32;Wood (2011) Hoffman,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2011). \u0026#32; Passive undulatory gaits enhance walking in a myriapod millirobot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2011.6094700 Hoover\u0026#32;\u0026amp;\u0026#32;Fearing (2008) Hoover,\u0026#32; A.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2008). \u0026#32;Fast scale prototyping for folded millirobots. 2008 IEEE International Conference on Robotics and Automation.\u0026#32;1777–1778. https://doi.org/10.1109/ROBOT.2008.4543462 Hoover,\u0026#32; Steltz\u0026#32;\u0026amp;\u0026#32;Fearing (2008) Hoover,\u0026#32; A.,\u0026#32; Steltz,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2008). \u0026#32; RoACH: An autonomous 2.4g crawling hexapod robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2008.4651149 Hoover,\u0026#32; Burden,\u0026#32; Shankar Sastry\u0026#32;\u0026amp;\u0026#32;Fearing (2010) Hoover,\u0026#32; A.,\u0026#32; Burden,\u0026#32; S.,\u0026#32; Shankar Sastry,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2010). \u0026#32; Bio-inspired design and dynamic maneuverability of a minimally actuated six-legged robot. \u0026#32; IEEE. https://doi.org/10.1109/BIOROB.2010.5626034 Karras,\u0026#32; Fuller,\u0026#32; Carpenter,\u0026#32; Buscicchio,\u0026#32; McKeeby,\u0026#32; Norman,\u0026#32; Parcheta,\u0026#32; Davydychev\u0026#32;\u0026amp;\u0026#32;Fearing (2017) Karras,\u0026#32; J.,\u0026#32; Fuller,\u0026#32; C.,\u0026#32; Carpenter,\u0026#32; K.,\u0026#32; Buscicchio,\u0026#32; A.,\u0026#32; McKeeby,\u0026#32; D.,\u0026#32; Norman,\u0026#32; C.,\u0026#32; Parcheta,\u0026#32; C.,\u0026#32; Davydychev,\u0026#32; I.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2017). \u0026#32; Pop-up mars rover with textile-enhanced rigid-flex PCB body. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2017.7989642 Koh\u0026#32;\u0026amp;\u0026#32;Cho (2013) Koh,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32;Omega-Shaped Inchworm-Inspired Crawling Robot With Large-Index-and-Pitch (LIP) SMA Spring Actuators. IEEE/ASME Transactions on Mechatronics,\u0026#32;18(2).\u0026#32;419–429. https://doi.org/10.1109/TMECH.2012.2211033 Kohut,\u0026#32; Zarrouk,\u0026#32; Peterson\u0026#32;\u0026amp;\u0026#32;Fearing (2013) Kohut,\u0026#32; N.,\u0026#32; Zarrouk,\u0026#32; D.,\u0026#32; Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2013). \u0026#32; Aerodynamic steering of a 10 cm high-speed running robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2013.6697167 Lee,\u0026#32; Kim,\u0026#32; Kim,\u0026#32; Park\u0026#32;\u0026amp;\u0026#32;Cho (2013) Lee,\u0026#32; D.,\u0026#32; Kim,\u0026#32; J.,\u0026#32; Kim,\u0026#32; S.,\u0026#32; Park,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32; Design of Deformable-Wheeled Robot Based on Origami Structure with Shape Memory Alloy Coil Spring. Lee,\u0026#32; Jung,\u0026#32; Sin,\u0026#32; Ahn\u0026#32;\u0026amp;\u0026#32;Cho (2013) Lee,\u0026#32; D.,\u0026#32; Jung,\u0026#32; G.,\u0026#32; Sin,\u0026#32; M.,\u0026#32; Ahn,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Cho,\u0026#32; K. \u0026#32; (2013). \u0026#32; Deformable wheel robot based on origami structure. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2013.6631383 Li,\u0026#32; Vogt,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Wood (2017) Li,\u0026#32; S.,\u0026#32; Vogt,\u0026#32; D.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2017). \u0026#32;Fluid-driven origami-inspired artificial muscles. Proceedings of the National Academy of Sciences,\u0026#32;114(50).\u0026#32;201713450. https://doi.org/10.1073/pnas.1713450114 McClintock,\u0026#32; Temel,\u0026#32; Doshi,\u0026#32; Koh\u0026#32;\u0026amp;\u0026#32;Wood (2018) McClintock,\u0026#32; H.,\u0026#32; Temel,\u0026#32; F.,\u0026#32; Doshi,\u0026#32; N.,\u0026#32; Koh,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2018). \u0026#32;The milliDelta: A high-bandwidth, high-precision, millimeter-scale Delta robot. Science Robotics,\u0026#32;3(14).\u0026#32;eaar3018. https://doi.org/10.1126/scirobotics.aar3018 Miyashita,\u0026#32; Guitron,\u0026#32; Ludersdorfer,\u0026#32; Sung\u0026#32;\u0026amp;\u0026#32;Rus (2015) Miyashita,\u0026#32; S.,\u0026#32; Guitron,\u0026#32; S.,\u0026#32; Ludersdorfer,\u0026#32; M.,\u0026#32; Sung,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Rus,\u0026#32; D. \u0026#32; (2015). \u0026#32;An Untethered Miniature Origami Robot that Self-folds , Walks , Swims , and Degrades.\u0026#32;1490–1496. https://doi.org/10.1109/ICRA.2015.7139386 Mulgaonkar,\u0026#32; Araki,\u0026#32; Koh,\u0026#32; Guerrero-Bonilla,\u0026#32; Aukes,\u0026#32; Makineni,\u0026#32; Tolley,\u0026#32; Rus,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Kumar (2016) Mulgaonkar,\u0026#32; Y.,\u0026#32; Araki,\u0026#32; B.,\u0026#32; Koh,\u0026#32; J.,\u0026#32; Guerrero-Bonilla,\u0026#32; L.,\u0026#32; Aukes,\u0026#32; D.,\u0026#32; Makineni,\u0026#32; A.,\u0026#32; Tolley,\u0026#32; M.,\u0026#32; Rus,\u0026#32; D.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Kumar,\u0026#32; V. \u0026#32; (2016). \u0026#32; The Flying Monkey: A Mesoscale Robot That Can Run, Fly, And Grasp. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2016.7487667 Overvelde,\u0026#32; Weaver,\u0026#32; Hoberman\u0026#32;\u0026amp;\u0026#32;Bertoldi (2017) Overvelde,\u0026#32; J.,\u0026#32; Weaver,\u0026#32; J.,\u0026#32; Hoberman,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Bertoldi,\u0026#32; K. \u0026#32; (2017). \u0026#32;Rational design of reconfigurable prismatic architected materials. Nature,\u0026#32;541(7637).\u0026#32;347–352. https://doi.org/10.1038/nature20824 Peterson\u0026#32;\u0026amp;\u0026#32;Fearing (2011) Peterson,\u0026#32; K.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2011). \u0026#32;Experimental dynamics of wing assisted running for a bipedal ornithopter. IEEE International Conference on Intelligent Robots and Systems.\u0026#32;5080–5086. https://doi.org/10.1109/IROS.2011.6048800 Peterson,\u0026#32; Birkmeyer,\u0026#32; Dudley\u0026#32;\u0026amp;\u0026#32;Fearing (2011) Peterson,\u0026#32; K.,\u0026#32; Birkmeyer,\u0026#32; P.,\u0026#32; Dudley,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2011). \u0026#32;A wing-assisted running robot and implications for avian flight evolution. Bioinspiration and Biomimetics,\u0026#32;6(4). https://doi.org/10.1088/1748-3182/6/4/046008 Pister,\u0026#32; Judy,\u0026#32; Burgett\u0026#32;\u0026amp;\u0026#32;Fearing (1992) Pister,\u0026#32; K.,\u0026#32; Judy,\u0026#32; M.,\u0026#32; Burgett,\u0026#32; S.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (1992). \u0026#32;Microfabricated hinges. Sensors and Actuators A: Physical,\u0026#32;33(3).\u0026#32;249–256. https://doi.org/10.1016/0924-4247(92)80172-Y Reid,\u0026#32; Bright\u0026#32;\u0026amp;\u0026#32;Butler (1998) Reid,\u0026#32; J.,\u0026#32; Bright,\u0026#32; V.\u0026#32;\u0026amp;\u0026#32;Butler,\u0026#32; J. \u0026#32; (1998). \u0026#32;Automated assembly of flip-up micromirrors. Sensors and Actuators A: Physical,\u0026#32;66(1-3).\u0026#32;292–298. https://doi.org/10.1016/S0924-4247(97)01719-6 Sahai,\u0026#32; Lee\u0026#32;\u0026amp;\u0026#32;Fearing (2003) Sahai,\u0026#32; R.,\u0026#32; Lee,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2003). \u0026#32;Semi-automated micro assembly for rapid prototyping of a one DOF surgical wrist. Proceedings 2003 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS 2003) (Cat. No.03CH37453),\u0026#32;2(October). https://doi.org/10.1109/IROS.2003.1248918 Sahai,\u0026#32; Avadhanula,\u0026#32; Groff,\u0026#32; Steltz,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Fearing (2006) Sahai,\u0026#32; R.,\u0026#32; Avadhanula,\u0026#32; S.,\u0026#32; Groff,\u0026#32; R.,\u0026#32; Steltz,\u0026#32; E.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2006). \u0026#32;Towards a 3g crawling robot through the integration of microrobot technologies. Proceedings - IEEE International Conference on Robotics and Automation,\u0026#32;2006.\u0026#32;296–302. https://doi.org/10.1109/ROBOT.2006.1641727 Schulz,\u0026#32; Sung,\u0026#32; Spielberg,\u0026#32; Zhao,\u0026#32; Cheng,\u0026#32; Grinspun,\u0026#32; Rus\u0026#32;\u0026amp;\u0026#32;Matusik (2017) Schulz,\u0026#32; A.,\u0026#32; Sung,\u0026#32; C.,\u0026#32; Spielberg,\u0026#32; A.,\u0026#32; Zhao,\u0026#32; W.,\u0026#32; Cheng,\u0026#32; R.,\u0026#32; Grinspun,\u0026#32; E.,\u0026#32; Rus,\u0026#32; D.\u0026#32;\u0026amp;\u0026#32;Matusik,\u0026#32; W. \u0026#32; (2017). \u0026#32;Interactive robogami: An end-to-end system for design of robots with ground locomotion. The International Journal of Robotics Research.\u0026#32;1–17. https://doi.org/10.1177/0278364917723465 Shimada,\u0026#32; Thompson,\u0026#32; Yan,\u0026#32; Wood\u0026#32;\u0026amp;\u0026#32;Fearing (2000) Shimada,\u0026#32; E.,\u0026#32; Thompson,\u0026#32; J.,\u0026#32; Yan,\u0026#32; J.,\u0026#32; Wood,\u0026#32; R.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2000). \u0026#32;Prototyping millirobots using dextrous microassembly and folding. Symposium on Microrobotics ASME Int. Mechanical Engineering Cong. and Exp.\u0026#32;1–8. Sreetharan,\u0026#32; Whitney,\u0026#32; Strauss\u0026#32;\u0026amp;\u0026#32;Wood (2012) Sreetharan,\u0026#32; P.,\u0026#32; Whitney,\u0026#32; J.,\u0026#32; Strauss,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Wood,\u0026#32; R. \u0026#32; (2012). \u0026#32;Monolithic fabrication of millimeter-scale machines. Journal of Micromechanics and Microengineering,\u0026#32;22(5).\u0026#32;55027. https://doi.org/10.1088/0960-1317/22/5/055027 Wang,\u0026#32; Plecnik\u0026#32;\u0026amp;\u0026#32;Fearing (2016) Wang,\u0026#32; L.,\u0026#32; Plecnik,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2016). \u0026#32; Robotic folding of 2D and 3D structures from a ribbon. \u0026#32; IEEE. https://doi.org/10.1109/ICRA.2016.7487550 Wood,\u0026#32; Avadhanula,\u0026#32; Menon\u0026#32;\u0026amp;\u0026#32;Fearing (2003) Wood,\u0026#32; R.,\u0026#32; Avadhanula,\u0026#32; S.,\u0026#32; Menon,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2003). \u0026#32; Microrobotics using composite materials: the micromechanical flying insect thorax. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2003.1241863 Wood,\u0026#32; Steltz\u0026#32;\u0026amp;\u0026#32;Fearing (2005) Wood,\u0026#32; R.,\u0026#32; Steltz,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2005). \u0026#32;Optimal energy density piezoelectric bending actuators. Sensors and Actuators A: Physical,\u0026#32;119(2).\u0026#32;476–488. https://doi.org/10.1016/j.sna.2004.10.024 Wood (2008) Wood,\u0026#32; R. \u0026#32; (2008). \u0026#32;The First Takeoff of a Biologically Inspired At-Scale Robotic Insect. IEEE Transactions on Robotics,\u0026#32;24(2).\u0026#32;341–347. https://doi.org/10.1109/TRO.2008.916997 Yan,\u0026#32; Wood,\u0026#32; Avadhanula,\u0026#32; Sitti\u0026#32;\u0026amp;\u0026#32;Fearing (2001) Yan,\u0026#32; J.,\u0026#32; Wood,\u0026#32; R.,\u0026#32; Avadhanula,\u0026#32; S.,\u0026#32; Sitti,\u0026#32; M.\u0026#32;\u0026amp;\u0026#32;Fearing,\u0026#32; R. \u0026#32; (2001). \u0026#32; Towards flapping wing control for a micromechanical flying insect. \u0026#32; IEEE. https://doi.org/10.1109/ROBOT.2001.933225 Yeh,\u0026#32; Kruglick\u0026#32;\u0026amp;\u0026#32;Pister (1995) Yeh,\u0026#32; R.,\u0026#32; Kruglick,\u0026#32; E.\u0026#32;\u0026amp;\u0026#32;Pister,\u0026#32; K. \u0026#32; (1995). \u0026#32; Microelectromechanical Components For Articulated Microrobots. \u0026#32; IEEE. https://doi.org/10.1109/SENSOR.1995.721817 Zhakypov,\u0026#32; Belke\u0026#32;\u0026amp;\u0026#32;Paik (2017) Zhakypov,\u0026#32; Z.,\u0026#32; Belke,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Paik,\u0026#32; J. \u0026#32; (2017). \u0026#32; Tribot: A deployable, self-righting and multi-locomotive origami robot. \u0026#32; IEEE. https://doi.org/10.1109/IROS.2017.8206445 ","permalink":"https://foldable-robotics.github.io/modules/introduction/02-foldable-timeline/","tags":null,"title":"Foldable Robotics Timeline"},{"categories":null,"contents":"Introduction Non-Conservative Forces Damping $$\\vec{f} = -b\\vec{v}$$\nFriction Friction is typically formulated as the forces acting between two bodies $A$ and $B$\n$$\\vec{f} = \\mu|\\vec{n}|\\frac{\\vec{v}}{|\\vec{v}|}$$\nwhere $\\mu$ is the coefficient of friction, determined experimentally, $\\vec{n}$ is the magnitude of the normal force between two rigid bodies, and $\\vec{v}$ is the relative velocity of the contact point on $B$ with respect to the contact point on $A$. If $|\\vec{v}|==0$, you must be careful to ensure that the expression does not evaluate as NaN.\nTorsional Friction Because the normal force not easily derived from a rigid body analysis, we often apply a\n$$\\vec{f} = -f\\frac{\\vec{v}}{|\\vec{v}|}$$\nwhere f is a constant value determined experimentally and where $\\vec{v}$ is a unit vector describing the rotational velocity. If $|\\vec{v}|==0$, you must be careful to ensure that the expression does not evaluate as NaN.\nApplying Forces in Pynamics Forces and torques are added to the system with the generic addforce method. The first parameter supplied is a vector describing the force applied at a point or the torque applied along a given rotational axis. The second parameter is the vector describing the linear speed (for an applied force) or the angular velocity(for an applied torque)\nConservative Forces Springs Traditional Hookian springs obey the rule\n$$\\vec{f}=-k\\vec{x}$$\nwhere $k$ is a constant value obtained experimentally and $\\vec{x}$ indicates the stretch of the spring from its neutral point.\nSprings in Pynamics Spring forces are a special case because the energy stored in springs is conservative and should be considered when calculating the system\u0026rsquo;s potential energy. To do this, use the add_spring_force command. In this method, the first value is the linear spring constant. The second value is the \u0026ldquo;stretch\u0026rdquo; vector, indicating the amount of deflection from the neutral point of the spring. The final parameter is, as above, the linear or angluar velocity vector (depending on whether your spring is a linear or torsional spring)\nIn this case, the torques applied to each joint are dependent upon whether qA, qB, and qC are absolute or relative rotations, as defined above.\nGravity $$\\vec{f} = m\\vec{g}$$\nGravity in Pynamics Again, like springs, the force of gravity is conservative and should be applied to all bodies. To globally apply the force of gravity to all particles and bodies, you can use the special addforcegravity method, by supplying the acceleration due to gravity as a vector. This will get applied to all bodies defined in your system.\n","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/06-forces-and-torques/","tags":null,"title":"Forces and Torques"},{"categories":null,"contents":"%matplotlib inline \u0026#34;\u0026#34;\u0026#34; Written by Daniel M. Aukes Email: danaukes\u0026lt;at\u0026gt;gmail.com Please see LICENSE for full license. \u0026#34;\u0026#34;\u0026#34; '\\nWritten by Daniel M. Aukes\\nEmail: danaukes\u0026lt;at\u0026gt;gmail.com\\nPlease see LICENSE for full license.\\n' import pynamics from pynamics.frame import Frame import idealab_tools.units from pynamics.variable_types import Differentiable,Constant from pynamics.system import System from pynamics.body import Body from pynamics.dyadic import Dyadic from pynamics.output import Output,PointsOutput from pynamics.particle import Particle import pynamics.integration from pynamics.constraint import KinematicConstraint,AccelerationConstraint import sympy import numpy import matplotlib.pyplot as plt plt.ion() from math import pi system = System() pynamics.set_system(__name__,system) idealab_tools.units.Unit.set_scaling(meter=1) lA = Constant(1.1*idealab_tools.units.length,\u0026#39;lA\u0026#39;,system) lB = Constant(1*idealab_tools.units.length,\u0026#39;lB\u0026#39;,system) lC = Constant(.9*idealab_tools.units.length,\u0026#39;lC\u0026#39;,system) lD = Constant(1.01*idealab_tools.units.length,\u0026#39;lD\u0026#39;,system) m = Constant(1*idealab_tools.units.mass,\u0026#39;m\u0026#39;,system) g = Constant(9.81*idealab_tools.units.acceleration,\u0026#39;g\u0026#39;,system) Ixx_A = Constant(1*idealab_tools.units.inertia,\u0026#39;Ixx_A\u0026#39;,system) Iyy_A = Constant(1*idealab_tools.units.inertia,\u0026#39;Iyy_A\u0026#39;,system) Izz_A = Constant(1*idealab_tools.units.inertia,\u0026#39;Izz_A\u0026#39;,system) Ixx_B = Constant(1*idealab_tools.units.inertia,\u0026#39;Ixx_B\u0026#39;,system) Iyy_B = Constant(1*idealab_tools.units.inertia,\u0026#39;Iyy_B\u0026#39;,system) Izz_B = Constant(1*idealab_tools.units.inertia,\u0026#39;Izz_B\u0026#39;,system) Ixx_C = Constant(1*idealab_tools.units.inertia,\u0026#39;Ixx_C\u0026#39;,system) Iyy_C = Constant(1*idealab_tools.units.inertia,\u0026#39;Iyy_C\u0026#39;,system) Izz_C = Constant(1*idealab_tools.units.inertia,\u0026#39;Izz_C\u0026#39;,system) Ixx_D = Constant(1*idealab_tools.units.inertia,\u0026#39;Ixx_D\u0026#39;,system) Iyy_D = Constant(1*idealab_tools.units.inertia,\u0026#39;Iyy_D\u0026#39;,system) Izz_D = Constant(1*idealab_tools.units.inertia,\u0026#39;Izz_D\u0026#39;,system) qA,qA_d,qA_dd = Differentiable(\u0026#39;qA\u0026#39;,system) qB,qB_d,qB_dd = Differentiable(\u0026#39;qB\u0026#39;,system) qC,qC_d,qC_dd = Differentiable(\u0026#39;qC\u0026#39;,system) qD,qD_d,qD_dd = Differentiable(\u0026#39;qD\u0026#39;,system) initialvalues = {} initialvalues[qA]=20*pi/180*idealab_tools.units.radian initialvalues[qA_d]=0*pi/180*idealab_tools.units.rotational_speed initialvalues[qB]=90*pi/180*idealab_tools.units.radian initialvalues[qB_d]=0*pi/180*idealab_tools.units.rotational_speed initialvalues[qC]=140*pi/180*idealab_tools.units.radian initialvalues[qC_d]=0*pi/180*idealab_tools.units.rotational_speed initialvalues[qD]=-90*pi/180*idealab_tools.units.radian initialvalues[qD_d]=0*pi/180*idealab_tools.units.rotational_speed statevariables = system.get_state_variables() N = Frame(\u0026#39;N\u0026#39;,system) A = Frame(\u0026#39;A\u0026#39;,system) B = Frame(\u0026#39;B\u0026#39;,system) C = Frame(\u0026#39;C\u0026#39;,system) D = Frame(\u0026#39;D\u0026#39;,system) system.set_newtonian(N) A.rotate_fixed_axis(N,[0,0,1],qA,system) B.rotate_fixed_axis(A,[0,0,1],qB,system) C.rotate_fixed_axis(N,[0,0,1],qC,system) D.rotate_fixed_axis(C,[0,0,1],qD,system) pNA = 0*N.x pAB = pNA + lA*A.x pBD = pAB + lB*B.x pCD = pNA + lC*C.x pDB = pCD + lD*D.x points = [pBD,pAB,pNA,pCD,pDB] statevariables = system.get_state_variables() ini0 = [initialvalues[item] for item in statevariables] eq = [] eq.append(pBD-pDB) eq_scalar = [] eq_scalar.append(eq[0].dot(N.x)) eq_scalar.append(eq[0].dot(N.y)) c=KinematicConstraint(eq_scalar) variables = [qB,qD] constant_states = list(set(system.get_q(0))-set(variables)) constants = system.constant_values.copy() for key in constant_states: constants[key] = initialvalues[key] guess = [initialvalues[item] for item in variables] result = c.solve_numeric(variables,guess,constants) ini = [] for item in system.get_state_variables(): if item in variables: ini.append(result[item]) else: ini.append(initialvalues[item]) points = PointsOutput(points, constant_values=system.constant_values) points.calc(numpy.array([ini0,ini]),[0,1]) points.plot_time() 2022-03-02 15:15:58,654 - pynamics.output - INFO - calculating outputs 2022-03-02 15:15:58,657 - pynamics.output - INFO - done calculating outputs \u0026lt;AxesSubplot:\u0026gt; pAcm=pNA+lA/2*A.x pBcm=pAB+lB/2*B.x pCcm=pNA+lC/2*C.x pDcm=pCD+lD/2*D.x wND = N.get_w_to(D) IA = Dyadic.build(A,Ixx_A,Iyy_A,Izz_A) IB = Dyadic.build(B,Ixx_B,Iyy_B,Izz_B) IC = Dyadic.build(C,Ixx_C,Iyy_C,Izz_C) ID = Dyadic.build(D,Ixx_D,Iyy_D,Izz_D) BodyA = Body(\u0026#39;BodyA\u0026#39;,A,pAcm,m,IA,system) BodyB = Body(\u0026#39;BodyB\u0026#39;,B,pBcm,m,IB,system) BodyC = Body(\u0026#39;BodyC\u0026#39;,C,pCcm,m,IC,system) BodyC = Body(\u0026#39;BodyC\u0026#39;,D,pDcm,m,ID,system) #BodyA = Particle(pAcm,m,\u0026#39;ParticleA\u0026#39;,system) #BodyB = Particle(pBcm,m,\u0026#39;ParticleB\u0026#39;,system) #BodyC = Particle(pCcm,m,\u0026#39;ParticleC\u0026#39;,system) #BodyD = Particle(pDcm,m,\u0026#39;ParticleD\u0026#39;,system) system.addforcegravity(-g*N.y) eq_d = [item.time_derivative() for item in eq] eq_dd = [item.time_derivative() for item in eq_d] eq_dd_scalar = [] eq_dd_scalar.append(eq_dd[0].dot(N.x)) eq_dd_scalar.append(eq_dd[0].dot(N.y)) system.add_constraint(AccelerationConstraint(eq_dd_scalar)) f,ma = system.getdynamics() func1 = system.state_space_post_invert(f,ma) 2022-03-02 15:15:59,007 - pynamics.system - INFO - getting dynamic equations 2022-03-02 15:15:59,295 - pynamics.system - INFO - solving a = f/m and creating function 2022-03-02 15:15:59,356 - pynamics.system - INFO - substituting constrained in Ma-f. 2022-03-02 15:15:59,450 - pynamics.system - INFO - done solving a = f/m and creating function fps = 30/(1*idealab_tools.units.time) tinitial = 0*idealab_tools.units.time tfinal = 5*idealab_tools.units.time tstep = 1/fps t = numpy.r_[tinitial:tfinal:tstep] tolerance = 1e-12 states=pynamics.integration.integrate_odeint(func1,ini,t,rtol=tolerance,atol=tolerance,args=({\u0026#39;constants\u0026#39;:system.constant_values},)) 2022-03-02 15:15:59,470 - pynamics.integration - INFO - beginning integration 2022-03-02 15:15:59,471 - pynamics.system - INFO - integration at time 0000.00 2022-03-02 15:15:59,740 - pynamics.system - INFO - integration at time 0001.00 2022-03-02 15:15:59,995 - pynamics.system - INFO - integration at time 0001.79 2022-03-02 15:16:00,248 - pynamics.system - INFO - integration at time 0004.10 2022-03-02 15:16:00,419 - pynamics.integration - INFO - finished integration KE = system.get_KE() PE = system.getPEGravity(pNA) - system.getPESprings() points.calc(states,t) points.plot_time() 2022-03-02 15:16:00,439 - pynamics.output - INFO - calculating outputs 2022-03-02 15:16:00,445 - pynamics.output - INFO - done calculating outputs \u0026lt;AxesSubplot:\u0026gt; points.animate(fps = fps,movie_name = \u0026#39;four_bar.mp4\u0026#39;,lw=2) \u0026lt;AxesSubplot:\u0026gt; from matplotlib import animation, rc from IPython.display import HTML HTML(points.anim.to_html5_video()) Your browser does not support the video tag. ","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/four-bar-dynamics-with-scaling/","tags":null,"title":"Four Bar Dynamics with unit Scaling"},{"categories":null,"contents":"Frames When analyzing a system, sometimes it\u0026rsquo;s convenient or simple to represent a system in a specific way. We all know of the Cartesian system of coordinates which span a three dimensional space, but did you know that there are an infinte number of ways to describe that same space? Just as we are familiar with the x,y, and z directions, we can use different reference frames to navigate and represent the same coordinates and vectors in different ways.\nTake the example of your professor standing in front of you, giving a lecture. If both of you were to stretch your right hand out to your right, you wouldn\u0026rsquo;t be pointing in the same direction. To get to the door behind youyour professor would say go forward. Direction is relative to each of you based on your frame of reference.\nSometimes the ability to select your directional representation is useful in dynamics, because depending on the representation, it may take many more or far fewer variables to do so. For example, when discussing the motion of a plane or car, it is often useful to describe the forces acting on the plane from the car\u0026rsquo;s perspective, even if you\u0026rsquo;re more interested in where the plane goes relative to your perspective standing on the ground. The planes perspective and the grounds perspective, in terms of their directional components, can be considered separate reference frames.\nBasis Vectors The purpose of a reference frame is to hold a set of unique basis vectors which in linear algebra terms span an $R^3$ space. As long as these basis vectors span the space, they are capable of describing any vector within that space, a minimum requirement for a 3 dimensional reference frame. However, there are some other useful qualities of these basis vectors which typically make life easier, which are also enforced in pynamics.\nOrthogonal: The basis vectors in an orthogonal reference frame are themselves orthogonal, or mutually perpendicular to each other. This means that there are no shared components of vectors; each basis vector is completely independent of each other. a more mathy way to describe this is that $\\vec{b}_1 \\cdot \\vec{b}_2 =0$, where $\\vec{b}_1$ and $\\vec{b}_2$ are any two basis vectors in a reference frame.\nNormal: Basis vectors in a pynamics reference frame are normal, meaning their lengths have been normalized. They are unit vectors.\nIn Pynamics, frames are implemented as a Python class, and serve to hold three orthonormal (orthogonal and normal) vectors. Frames can be named when created, and no two names can be the same; this name is applied to the x,y, and z basis vectors in each frame. Thus, no two basis vectors may be named the same in pynamics.\nVectors Vectors in pynamics are represented as linear combinations of basis vectors from one or more frames. Once frames are created, the basis vectors they contain may be combined with other literal or symbolic variables to create symbolic vector expressions.\nVectors are represented as a Python class, and leverage the ability to overload Python\u0026rsquo;s mathematical operators with other functionality. In this way, common operators such as $+$,$-$,$*$ and $/$ take on their own meaning when used in expressions with scalars, vectors, dyads, or dyadics. In this way\nVectors cannot be created without a reference frame. Therefore, each frame supplies three orthogonal unit basis vectors which contain all the frame\u0026rsquo;s information and which can be used to construct a vector.\nMath Vectors have a number of general properties that are all made possible in pynamics. Below is a list of valid operations and their result.\nOperation Operator Other Vector Order Result Commutative Addition + vector before $\\vec{v}+\\vec{v}_{other}$ y Addition + vector after $s\\vec{v}$ y Addition * vector before $s\\vec{v}$ y Addition * vector after $s\\vec{v}$ y dot .dot() vector before $\\vec{v}_{other} \\cdot \\vec{v}$ y dot .dot() vector after $\\vec{v} \\cdot \\vec{v}_{other}$ y cross .cross() vector before $\\vec{v}_{other} \\times \\vec{v}$ n cross .cross() vector after $\\vec{v} \\times \\vec{v}_{other}$ n Note: at this time, division with scalars, ie\nv/s is not possible. Instead, simply invert the scalar and then multiply, as with\n(1/s)*v %matplotlib inline import pynamics from pynamics.system import System from pynamics.frame import Frame system = System() pynamics.set_system(__name__,system) A = Frame(\u0026#39;A\u0026#39;,system); B = Frame(\u0026#39;B\u0026#39;,system); C = Frame(\u0026#39;C\u0026#39;,system); Vector addition works out of the box because vectors don\u0026rsquo;t necessarily need to be represented using each others\u0026rsquo; basis vectors\nv = A.x + B.y + C.z; v A.x + B.y + C.z Additionally, multiplication with a scalar works well:\ns = 3 print(s*v) print(v*s) 3*A.x + 3*B.y + 3*C.z 3*A.x + 3*B.y + 3*C.z Furthermore, dot and cross product works well for vectors expressed by the same basis vectors:\nv1 = 1*A.x+2*A.y v2 = 3*A.z+4*A.x print(v1.dot(v2)) print(v1.cross(v2)) 4 6*A.x - 3*A.y - 8*A.z However, out of the box, performing a dot or cross product with vectors composed of different basis vectors will not work, because a relationship needs to be established between them. For example, the following code will produce a custom error saying, \u0026ldquo;Frames don\u0026rsquo;t share a common parent\u0026rdquo;\nv1 = A.x+B.y v2 = B.z+C.x print(\u0026#34;v1.dot(v2)=\u0026#34;,v1.dot(v2)) print(\u0026#34;v1.cross(v2)=\u0026#34;,v1.cross(v2)) This can be addressed by defining a relationship between frames through rotations.\nimport sympy a = sympy.symbols(\u0026#39;a\u0026#39;) b = sympy.symbols(\u0026#39;b\u0026#39;) B.rotate_fixed_axis(A,[0,0,1],a,system) C.rotate_fixed_axis(B,[0,1,0],b,system) Now the following code should work\nv1 = A.x+B.y v2 = B.z+C.x print(\u0026#34;v1.dot(v2)=\u0026#34;,v1.dot(v2)) print(\u0026#34;v1.cross(v2)=\u0026#34;,v1.cross(v2)) v1.dot(v2)= cos(a)*cos(b) v1.cross(v2)= -A.y + B.x*(sin(a)*sin(b) - sin(b) + 1) + B.y*sin(b)*cos(a) + B.z*(sin(a)*cos(b) - cos(b)) Other Functions Express If enough information is supplied, vectors can also be expressed in other reference frames. This uses the rotation information stored when the frame rotations are defined to transform all basis vectors stored within a vector type into a desired type. This can be useful for finding the shortest representation of a vector, or the resulting math. For example,\nprint(v1.express(B)) print(v1.express(A)) B.x*cos(a) + B.y*(1 - sin(a)) A.x*(1 - sin(a)) + A.y*cos(a) produces quite similar size representations, but complex expressions may benefit from shorter representations. Take this example where v is the cross product of vectors expressed in frames separated by two separate rotations.\nv = (A.x+A.y+A.z).cross(C.x+C.y+C.z) v B.x*((-sin(a) + cos(a))*(-sin(b) + cos(b)) - 1) + B.y*(-(sin(a) + cos(a))*(-sin(b) + cos(b)) + sin(b) + cos(b)) + B.z*(-(-sin(a) + cos(a))*(sin(b) + cos(b)) + sin(a) + cos(a)) When you express v in A, B, and C basis vectors, you will see that the middle frame is by far the shortest representation\nv.express(A) A.x*(((-sin(a) + cos(a))*(-sin(b) + cos(b)) - 1)*cos(a) - (-(sin(a) + cos(a))*(-sin(b) + cos(b)) + sin(b) + cos(b))*sin(a)) + A.y*(((-sin(a) + cos(a))*(-sin(b) + cos(b)) - 1)*sin(a) + (-(sin(a) + cos(a))*(-sin(b) + cos(b)) + sin(b) + cos(b))*cos(a)) + A.z*(-(-sin(a) + cos(a))*(sin(b) + cos(b)) + sin(a) + cos(a)) v.express(B) B.x*((-sin(a) + cos(a))*(-sin(b) + cos(b)) - 1) + B.y*(-(sin(a) + cos(a))*(-sin(b) + cos(b)) + sin(b) + cos(b)) + B.z*(-(-sin(a) + cos(a))*(sin(b) + cos(b)) + sin(a) + cos(a)) v.express(C) C.x*(((-sin(a) + cos(a))*(-sin(b) + cos(b)) - 1)*cos(b) - (-(-sin(a) + cos(a))*(sin(b) + cos(b)) + sin(a) + cos(a))*sin(b)) + C.y*(-(sin(a) + cos(a))*(-sin(b) + cos(b)) + sin(b) + cos(b)) + C.z*(((-sin(a) + cos(a))*(-sin(b) + cos(b)) - 1)*sin(b) + (-(-sin(a) + cos(a))*(sin(b) + cos(b)) + sin(a) + cos(a))*cos(b)) del v,v1,v2,A,B,C,a,b,system This can have a real-world impact on the time to compute and integrate pynamics expressions\nDerivatives Vectors can also have their time derivatives taken. For this to be possible, the variables that define the magnitude and direction of vectors need to be explicitly defined if they are time-differentiable. For more information on time-differentiable variables, see the variable-types module.\nimport pynamics from pynamics.frame import Frame from pynamics.variable_types import Differentiable,Constant,Variable from pynamics.system import System system = System() pynamics.set_system(__name__,system) N = Frame(\u0026#39;N\u0026#39;,system); A = Frame(\u0026#39;A\u0026#39;,system); qA,qA_d,qA_dd = Differentiable(\u0026#39;qA\u0026#39;,system) x,x_d,x_dd = Differentiable(\u0026#39;x\u0026#39;,system) system.set_newtonian(N) A.rotate_fixed_axis(N,[0,0,1],qA,system) pos = x*A.x vel=pos.time_derivative(N) acc=vel.time_derivative(N) print(\u0026#39;pos = \u0026#39;,pos) print(\u0026#39;vel = \u0026#39;,vel) print(\u0026#39;acc = \u0026#39;,acc) pos = x*A.x vel = qA_d*x*A.y + x_d*A.x acc = A.x*(-qA_d**2*x + x_dd) + A.y*(2*qA_d*x_d + qA_dd*x) You can combine derivatives with the express function to print the derivative in other frames\nvel.express(N) acc.express(N) N.x*(-(2*qA_d*x_d + qA_dd*x)*sin(qA) + (-qA_d**2*x + x_dd)*cos(qA)) + N.y*((2*qA_d*x_d + qA_dd*x)*cos(qA) + (-qA_d**2*x + x_dd)*sin(qA)) and you can combine with the dot product to extract the coeffecients in front of basis vectors:\nvx = vel.express(N).dot(N.x) print(vx) vy = vel.express(N).dot(N.y) print(vy) vz = vel.express(N).dot(N.z) print(vz) -qA_d*x*sin(qA) + x_d*cos(qA) qA_d*x*cos(qA) + x_d*sin(qA) 0 Use Cases Vectors are typically used in a number of cases\ndescribing the kinematics of a structure defining the magnitude and direction of a force, or the axis of rotation for a torque. vectors may Example of Working With Vectors import pynamics from pynamics.system import System from pynamics.frame import Frame from pynamics.variable_types import Constant import sympy import matplotlib.pyplot as plt import numpy system = System() pynamics.set_system(__name__,system) a = Constant(3,\u0026#39;a\u0026#39;,system) b = Constant(2,\u0026#39;b\u0026#39;,system) c = Constant(2,\u0026#39;c\u0026#39;,system) d = Constant(3,\u0026#39;d\u0026#39;,system) N = Frame(\u0026#39;N\u0026#39;,system) o = 0*N.x+0*N.y v1 = a*N.x+b*N.y v2 = c*N.x+d*N.y v1n = [o,v1] v1n = [item.subs(system.constant_values) for item in v1n] v1n = [(item.dot(N.x),item.dot(N.y)) for item in v1n] v1n = numpy.array(v1n,dtype=float) print(v1n) [[0. 0.] [3. 2.]] v2n = [v2,] v2n = [item.subs(system.constant_values) for item in v2n] v2n = [(item.dot(N.x),item.dot(N.y)) for item in v2n] v2n = numpy.array(v2n,dtype=float) print(v2n) [[2. 3.]] plt.plot(v1n[:,0],v1n[:,1],\u0026#39;b-\u0026#39;) plt.plot(v2n[:,0],v2n[:,1],\u0026#39;ro\u0026#39;) plt.axis(\u0026#39;equal\u0026#39;) (-0.15000000000000002, 3.15, -0.15000000000000002, 3.15) v3 = v1.dot(v2)/(v1.dot(v1))*v1 print(v3) a*N.x*(a*c + b*d)/(a**2 + b**2) + b*N.y*(a*c + b*d)/(a**2 + b**2) v3n = [o,v3] v3n = [item.subs(system.constant_values) for item in v3n] v3n = [(item.dot(N.x),item.dot(N.y)) for item in v3n] v3n = numpy.array(v3n,dtype=float) print(v3n) [[0. 0. ] [2.76923077 1.84615385]] plt.plot(v1n[:,0],v1n[:,1],\u0026#39;b-\u0026#39;) plt.plot(v2n[:,0],v2n[:,1],\u0026#39;ro\u0026#39;) plt.plot(v3n[:,0],v3n[:,1],\u0026#39;ro-\u0026#39;) plt.axis(\u0026#39;equal\u0026#39;) (-0.15000000000000002, 3.15, -0.15000000000000002, 3.15) ","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/02-vectors/","tags":null,"title":"Frames, Basis Vectors, and Vectors"},{"categories":null,"contents":"%matplotlib inline import foldable_robotics import foldable_robotics.dxf import numpy import shapely.geometry as sg from foldable_robotics.layer import Layer from foldable_robotics.laminate import Laminate import foldable_robotics.manufacturing import foldable_robotics.parts.castellated_hinge1 import idealab_tools.plot_tris from math import pi, sin,cos,tan import idealab_tools.text_to_polygons foldable_robotics.display_height=200 foldable_robotics.line_width=.5 from foldable_robotics.layer import Layer from foldable_robotics.laminate import Laminate import foldable_robotics import foldable_robotics.dxf import foldable_robotics.manufacturing import foldable_robotics.parts.castellated_hinge1 foldable_robotics.display_height=200 foldable_robotics.line_width=.5 #import workflow_support as ws import os import foldable_robotics.solidworks_support def get_bodies(filename, layername, num_layers): body = foldable_robotics.dxf.read_lwpolylines(filename,layer=layername, arc_approx = 10) bodies = [Layer(sg.Polygon(item)) for item in body] body = bodies.pop(0) for item in bodies: body ^= item body = body.to_laminate(num_layers) return body def get_hinge_lines(filename,layername): hinge_lines1 = foldable_robotics.dxf.read_lines(filename,layer=layername) hinge_lines2 = foldable_robotics.dxf.read_lwpolylines(filename,layer=layername) hinge_lines3 = [] for points in hinge_lines2: hinge_lines3.append(points[:2]) hinge_lines = hinge_lines1 +hinge_lines3 return hinge_lines def hinge_lines_to_hinges(hinge_lines,hinge): lam = Layer().to_laminate(len(hinge)) all_hinges = [] for p3,p4 in hinge_lines: all_hinges.append(hinge.map_line_stretch((0,0),(1,0),p3,p4)) all_hinges = lam.unary_union(*all_hinges) return all_hinges def get_cuts(filename,layername,thickness,num_layers): cut_lines = foldable_robotics.dxf.read_lines(filename,layer=layername) cut_lines += foldable_robotics.dxf.read_lwpolylines(filename,layer=layername, arc_approx = 10) cuts = [] for item in cut_lines: cuts.append(Layer(sg.LineString(item))) cuts = Layer().unary_union(*cuts) cuts\u0026lt;\u0026lt;=thickness/2 cuts = cuts.to_laminate(num_layers) return cuts def get_holes(filename, layername,num_layers): holes = foldable_robotics.dxf.read_circles(filename,layer=\u0026#39;holes\u0026#39;) holes2 = [] for center, radius in holes: holes2.append(sg.Point(*center).buffer(radius)) holes_layer = Layer(*holes2) holes_lam = holes_layer.to_laminate(num_layers) return holes_lam def hinge_width_calculator(desired_degrees,thickness): theta = (180-desired_degrees)*pi/180 w=thickness/tan(theta) return w def polys_to_layer(l1): l1 = [sg.Polygon(item) for item in l1] l11 = Layer(l1.pop(0)) for item in l1: l11 ^= Layer(item) return l11 def output_pdf(filename,design2,x,y,layers_separate = True): design2 = design2.translate(x,y) design2=design2.scale(1/25.4,1/25.4) design2=design2.scale(foldable_robotics.pdf.ppi,foldable_robotics.pdf.ppi) if isinstance(design2,Laminate): if not layers_separate: p=foldable_robotics.pdf.Page(filename+\u0026#39;.pdf\u0026#39;) for d in design2: # d = design2[0] for item in d.exteriors()+d.interiors(): p.draw_poly(item) p.close() else: for ii,d in enumerate(design2): p=foldable_robotics.pdf.Page(filename+\u0026#39;{0:03f}.pdf\u0026#39;.format(ii)) for item in d.exteriors()+d.interiors(): p.draw_poly(item) p.close() elif isinstance(design2,Layer): p=foldable_robotics.pdf.Page(filename+\u0026#39;.pdf\u0026#39;) for item in design2.exteriors()+design2.interiors(): p.draw_poly(item) p.close() def build_layer_numbers(num_layers, text_size = None, prop=None): text_size = text_size or 1 prop = prop or {\u0026#39;family\u0026#39;:\u0026#39;Arial\u0026#39;,\u0026#39;size\u0026#39;:text_size} layer_ids = [] for ii in range(num_layers): l = idealab_tools.text_to_polygons.text_to_polygons(\u0026#39;Layer \u0026#39;+str(ii),prop=prop) layer_ids.append(l) layer_ids = [polys_to_layer(item) for item in layer_ids] layer_id = Laminate(*layer_ids) return layer_id def build_web(design2,keepout,support_width,jig_diameter,jig_hole_spacing,is_adhesive): num_layers = len(design2) layer_id = build_layer_numbers(num_layers,text_size=jig_diameter) design_outer = foldable_robotics.manufacturing.unary_union(design2) bb1= (design_outer\u0026lt;\u0026lt;jig_hole_spacing/2).bounding_box() (x1,y1),p2 = bb1.bounding_box_coords() w,h = bb1.get_dimensions() w2 = round(w/jig_hole_spacing)*jig_hole_spacing h2 = round(h/jig_hole_spacing)*jig_hole_spacing points = [] points.append(sg.Point(x1,y1)) points.append(sg.Point(x1+w2,y1)) points.append(sg.Point(x1,y1+h2)) points.append(sg.Point(x1+w2,y1+h2)) layer_id = layer_id.translate(x1+jig_diameter,y1-jig_diameter/2) placement_holes2 = Layer(*points) placement_holes2\u0026lt;\u0026lt;=(jig_diameter/2) sheet = (placement_holes2\u0026lt;\u0026lt;10).bounding_box() placement_holes2=placement_holes2.to_laminate(num_layers) sheet=sheet.to_laminate(num_layers) removable_scrap = calculate_removable_scrap(design2,sheet,support_width,is_adhesive) web = (removable_scrap-placement_holes2)-layer_id return web,sheet def calculate_removable_scrap(design,sheet,width,is_adhesive): \u0026#39;\u0026#39;\u0026#39;this computes all removable scrap given a sheet, a design, and a clearance width\u0026#39;\u0026#39;\u0026#39; all_scrap = sheet-design ru = foldable_robotics.manufacturing.not_removable_up(design,is_adhesive) rd = foldable_robotics.manufacturing.not_removable_down(design,is_adhesive) removable_scrap_up = all_scrap-(ru\u0026lt;\u0026lt;width) removable_scrap_down = all_scrap-(rd\u0026lt;\u0026lt;width) removable_scrap = removable_scrap_up|removable_scrap_down return removable_scrap user_path = os.path.abspath(os.path.expanduser(\u0026rsquo;~\u0026rsquo;)) user_path\nfolder = \u0026#39;../../../../ignore/_cad/spherical_example/\u0026#39; input_filename = folder+\u0026#39;spherical - Sheet1_Drawing View2.yaml\u0026#39; output_file_name = \u0026#39;design.dxf\u0026#39; round_digits = 5 prescale=1000 body_prebuffer=-.01 joint_tolerance = 1e-5 round_digits = 2 prescale=1000 jig_diameter = 5 support_width = 1 kerf = .05 jig_hole_spacing=20 is_adhesive = [False,True,False,True,False] arc_approx = 10 foldable_robotics.solidworks_support.process(input_filename,output_file_name,prescale,round_digits,body_prebuffer,joint_tolerance) (\u0026lt;foldable_robotics.layer.Layer at 0x1de03ad0c40\u0026gt;, \u0026lt;foldable_robotics.layer.Layer at 0x1de03ae2580\u0026gt;, [\u0026lt;foldable_robotics.solidworks_support.Component at 0x1de03aac6d0\u0026gt;, \u0026lt;foldable_robotics.solidworks_support.Component at 0x1de03ad0040\u0026gt;, \u0026lt;foldable_robotics.solidworks_support.Component at 0x1de03ad0400\u0026gt;, \u0026lt;foldable_robotics.solidworks_support.Component at 0x1de03ad0460\u0026gt;, \u0026lt;foldable_robotics.solidworks_support.Component at 0x1de03ad0310\u0026gt;]) hinge = foldable_robotics.parts.castellated_hinge1.generate() w=hinge_width_calculator(150,1.1) hinge = hinge.scale(1,w) hinge.plot() NUMLAYERS = len(hinge) body = get_bodies(output_file_name,\u0026#39;body\u0026#39;,NUMLAYERS) body = foldable_robotics.manufacturing.cleanup(body,.02) body.plot() joint_lines= get_hinge_lines(output_file_name,\u0026#39;joints\u0026#39;) joints = hinge_lines_to_hinges(joint_lines,hinge) joints = foldable_robotics.manufacturing.cleanup(joints,.02) joints.plot() cuts = get_cuts(output_file_name,\u0026#39;cuts\u0026#39;,.02,NUMLAYERS) #cuts.plot() holes = get_holes(output_file_name,\u0026#39;holes\u0026#39;,NUMLAYERS) #holes.plot() hole,dummy = foldable_robotics.manufacturing.calc_hole(joint_lines,w) hole = hole.to_laminate(NUMLAYERS) hole\u0026lt;\u0026lt;=.2 hole.plot() design2 = body- hole - joints - cuts - holes design2.plot() keepout = foldable_robotics.manufacturing.keepout_laser(design2) keepout.plot() web,sheet=build_web(design2,keepout,support_width,jig_diameter,jig_hole_spacing,is_adhesive) web.plot() sheet.plot() second_pass_scrap = sheet-keepout first_pass_scrap = sheet - design2-second_pass_scrap first_pass_scrap = foldable_robotics.manufacturing.cleanup(first_pass_scrap,.00001) first_pass_scrap.plot() support = foldable_robotics.manufacturing.support(design2,foldable_robotics.manufacturing.keepout_laser,support_width,support_width/2) support.plot() #Calculate the web by using only the material which can be cut, minus a gap determined by the support width. Is that the only material you can use? supported_design = web|design2|support supported_design.plot() #cut_line = keepout\u0026lt;\u0026lt;kerf cut_material = (keepout\u0026lt;\u0026lt;kerf)-keepout cut_material.plot() final_cut = sheet - keepout final_cut = final_cut[0] final_cut.plot() remaining_material = supported_design-cut_material remaining_material.plot() remaining_parts = foldable_robotics.manufacturing.find_connected(remaining_material,is_adhesive) for item in remaining_parts: item.plot(new=True) d3=design2\u0026gt;\u0026gt;1 for item in remaining_parts: if not (item\u0026amp;d3).is_null(): break item.plot() check = (item^design2) check\u0026gt;\u0026gt;=1e-5 check.plot() ('zero-size array to reduction operation minimum which has no identity',) w,h = supported_design.get_dimensions() p0,p1 = supported_design.bounding_box_coords() rigid_layer = supported_design[0] | (supported_design[-1].translate(w+10,0)) rigid_layer.plot() l4 = supported_design[3].scale(-1,1) p2,p3 = l4.bounding_box_coords() l4 = l4.translate(p0[0]-p2[0]+10+w,p0[1]-p2[1]) adhesive_layer = supported_design[1] | l4 adhesive_layer.plot() first_pass = Laminate(rigid_layer,adhesive_layer,supported_design[2]) if check.is_null(): first_pass.export_dxf(\u0026#39;first_pass\u0026#39;) final_cut.export_dxf(\u0026#39;final_cut\u0026#39;) ","permalink":"https://foldable-robotics.github.io/modules/manufacturing/generated/full-workflow/","tags":null,"title":"Full Design Pipeline"},{"categories":null,"contents":"Functions The structure of a function is:\ndef my_function_1(my_variable_1,my_variable_2): result = my_variable_1+my_variable_2 return result Where my_function_1 is the function, and my_variable_1 and my_variable_2 are the \u0026ldquo;arguments\u0026rdquo;. You can define a function by running\nThere are a couple things to note: first, the function is declared using the def keyword. This tells python to expect a function declaration. You then give the name, all the variables inside a set of parehtheses, finished by a colon. Everything inside the function after that must be indented.\nFinally, you see the result keyword being used to return a calculated value. This does not need to be on its own line, and is completely optional. If you are setting a value to the result of whatever this function runs, however, return tells Python what value to return at the conclusion of this function.\nYou then \u0026ldquo;call\u0026rdquo; the function by running the function with two inputs supplied:\nmy_function_1(0,0) 0 You can use variables or literals when calling a function, and may set a value with whatever the function returns, as well\nvariable_1 = 1 result = my_function_1(variable_1,2) print(result) 3 Arguments There are two main types of variables you can supply to python functions: arguments and keyword arguments. my_function_1 is an example of what a function looks like with only arguments. Keyword arguments can be used instead. These supply a default value to the function, and are thus optional.\ndef my_function_2(my_kw_argument_1=0,my_kw_argument_2=0): result = my_kw_argument_1*my_kw_argument_2 return result Now, when calling my_function_2, you don\u0026rsquo;t need to supply any variables, if your use-case doesn\u0026rsquo;t need it.\nmy_function_2() 0 But you still can\u0026hellip;with literals or variables\nmy_var_2 = 45 my_function_2(2,my_var_2) 90 ","permalink":"https://foldable-robotics.github.io/modules/python/generated/functions/","tags":null,"title":"functions and arguments"},{"categories":null,"contents":"%matplotlib inline import pynamics from pynamics.frame import Frame from pynamics.variable_types import Differentiable,Constant from pynamics.system import System from pynamics.body import Body from pynamics.dyadic import Dyadic from pynamics.output import Output,PointsOutput #from pynamics.particle import Particle import pynamics.integration import sympy import scipy #import logging #pynamics.logger.setLevel(logging.ERROR) #pynamics.system.logger.setLevel(logging.ERROR) import numpy import matplotlib.pyplot as plt plt.ion() \u0026lt;matplotlib.pyplot._IonContext at 0x7fd9bc437ee0\u0026gt; from math import pi, sin, cos system = System() pynamics.set_system(__name__,system) tinitial = 0 tfinal = 5 tstep = 1/30 t = numpy.r_[tinitial:tfinal:tstep] ang_ini = 0 v=1 x,x_d,x_dd = Differentiable(\u0026#39;x\u0026#39;,ini=[0,v*cos(ang_ini*pi/180)]) y,y_d,y_dd = Differentiable(\u0026#39;y\u0026#39;,ini=[1,v*sin(ang_ini*pi/180)]) z,z_d,z_dd = Differentiable(\u0026#39;z\u0026#39;,ini=[0,0]) qA,qA_d,qA_dd = Differentiable(\u0026#39;qA\u0026#39;,ini=[0,0]) qB,qB_d,qB_dd = Differentiable(\u0026#39;qB\u0026#39;,ini=[0,0]) qC,qC_d,qC_dd = Differentiable(\u0026#39;qC\u0026#39;,ini=[ang_ini*pi/180,0]) # mC = Constant(0,\u0026#39;mC\u0026#39;) g = Constant(9.81,\u0026#39;g\u0026#39;) I_11=Constant(6e-3,\u0026#39;I_11\u0026#39;) rho = Constant(1.292,\u0026#39;rho\u0026#39;) r = Constant(0,\u0026#39;r\u0026#39;) # Sw = Constant(.1,\u0026#39;Sw\u0026#39;) # Se = Constant(.025,\u0026#39;Se\u0026#39;) l = Constant(.35,\u0026#39;l\u0026#39;) lw = Constant(-.03,\u0026#39;lw\u0026#39;) le = Constant(.04,\u0026#39;le\u0026#39;) qE = Constant(3*pi/180,\u0026#39;qE\u0026#39;) ini = system.get_ini() N = Frame(\u0026#39;N\u0026#39;,system) A = Frame(\u0026#39;A\u0026#39;,system) B = Frame(\u0026#39;B\u0026#39;,system) C = Frame(\u0026#39;C\u0026#39;,system) E = Frame(\u0026#39;E\u0026#39;,system) system.set_newtonian(N) A.rotate_fixed_axis(N,[1,0,0],qA,system) B.rotate_fixed_axis(A,[0,1,0],qB,system) C.rotate_fixed_axis(B,[0,0,1],qC,system) E.rotate_fixed_axis(C,[0,0,1],-qE,system) pCcm=x*N.x+y*N.y+z*N.z pCcp=pCcm-lw*C.x mC = pi*r**2*.1 pC1 = pCcm pC2 = pCcm-l*C.x pE = pC2-le*E.x vcm = pCcm.time_derivative() vcm = pCcm.time_derivative() IC = Dyadic.build(C,I_11,I_11,I_11) Body(\u0026#39;BodyC\u0026#39;,C,pCcm,mC,IC) Area = 2*pi*r**2 Area_f = 2*pi*.001 #Area_f = 0 vcp=pCcp.time_derivative() f_aero_C = rho * vcp.length()*(vcp.dot(C.y))*Area*C.y f_aero_Cf = rho * vcp.length()*(vcp.dot(C.x))*Area_f *C.x ve=pE.time_derivative() f_aero_E = rho * ve.length()*(ve.dot(E.y))*Area*E.y f_aero_Ef = rho * ve.length()*(ve.dot(E.x))*Area_f*E.x system.addforcegravity(-g*N.y) system.addforce(-f_aero_C,vcp) system.addforce(-f_aero_E,ve) system.addforce(-f_aero_Cf,vcp) system.addforce(-f_aero_Ef,ve) \u0026lt;pynamics.force.Force at 0x7fd98516b430\u0026gt; points = [pC1,pC2] f,ma = system.getdynamics() func1 = system.state_space_post_invert(f,ma) 2022-04-14 14:50:28,174 - pynamics.system - INFO - getting dynamic equations 2022-04-14 14:50:28,467 - pynamics.system - INFO - solving a = f/m and creating function 2022-04-14 14:50:29,429 - pynamics.system - INFO - substituting constrained in Ma-f. 2022-04-14 14:50:30,135 - pynamics.system - INFO - done solving a = f/m and creating function PE = system.getPEGravity(0*N.x) KE = system.get_KE() E = KE-PE E 0.5*I_11*qC_d*(qA_d*sin(qB) + qC_d) + 0.314159265358979*g*r**2*y + 0.15707963267949*r**2*(x_d**2 + y_d**2 + z_d**2) + 0.5*qA_d*(I_11*(qA_d*sin(qB) + qC_d)*sin(qB) - I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qC)*cos(qB) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*cos(qB)*cos(qC)) + 0.5*qB_d*(I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*sin(qC)) PE -0.314159265358979*g*r**2*y def run(args): my_r = args[0] constants = system.constant_values.copy() constants[r] = my_r states=pynamics.integration.integrate_odeint(func1,ini,t, args=({\u0026#39;constants\u0026#39;:constants},)) return states system.get_state_variables() [x, y, z, qA, qB, qC, x_d, y_d, z_d, qA_d, qB_d, qC_d] def measure_perf(args): print(\u0026#39;r: \u0026#39;,args[0]) # if args[0]\u0026gt;1: # return 1000 # if args[0]\u0026lt;=0: # return 1000 try: states = run(args) perf = (1/states[-1,0])**2 + 5*(states[-1,1])**2 return perf except scipy.linalg.LinAlgError: return 1000 yy = [] xx = numpy.r_[0.1:1:5j] for ii in xx: yy.append(measure_perf([ii])) yy = numpy.array(yy) plt.plot(xx,yy) 2022-04-14 14:50:30,271 - pynamics.integration - INFO - beginning integration 2022-04-14 14:50:30,272 - pynamics.system - INFO - integration at time 0000.00 r: 0.1 2022-04-14 14:50:33,779 - pynamics.integration - INFO - finished integration 2022-04-14 14:50:33,781 - pynamics.integration - INFO - beginning integration 2022-04-14 14:50:33,922 - pynamics.system - INFO - integration at time 0000.01 r: 0.325 2022-04-14 14:50:37,229 - pynamics.integration - INFO - finished integration 2022-04-14 14:50:37,231 - pynamics.integration - INFO - beginning integration r: 0.55 2022-04-14 14:50:37,545 - pynamics.system - INFO - integration at time 0000.04 2022-04-14 14:50:41,030 - pynamics.system - INFO - integration at time 0001.04 2022-04-14 14:50:44,278 - pynamics.integration - INFO - finished integration 2022-04-14 14:50:44,279 - pynamics.integration - INFO - beginning integration 2022-04-14 14:50:44,447 - pynamics.system - INFO - integration at time 0000.01 r: 0.775 2022-04-14 14:50:47,857 - pynamics.system - INFO - integration at time 0004.81 2022-04-14 14:50:47,941 - pynamics.integration - INFO - finished integration 2022-04-14 14:50:47,943 - pynamics.integration - INFO - beginning integration r: 1.0 2022-04-14 14:50:51,248 - pynamics.system - INFO - integration at time 0002.72 2022-04-14 14:50:52,408 - pynamics.integration - INFO - finished integration [\u0026lt;matplotlib.lines.Line2D at 0x7fd982e278b0\u0026gt;] result = scipy.optimize.minimize(measure_perf,[.5],method=\u0026#39;powell\u0026#39;,bounds=[(.1,1)]) best = result.x 2022-04-14 14:50:52,615 - pynamics.integration - INFO - beginning integration r: 0.5 2022-04-14 14:50:54,808 - pynamics.system - INFO - integration at time 0003.79 2022-04-14 14:50:54,988 - pynamics.integration - INFO - finished integration 2022-04-14 14:50:54,989 - pynamics.integration - INFO - beginning integration r: 0.4437694101250946 2022-04-14 14:50:58,132 - pynamics.system - INFO - integration at time 0001.21 2022-04-14 14:50:59,976 - pynamics.integration - INFO - finished integration 2022-04-14 14:50:59,977 - pynamics.integration - INFO - beginning integration r: 0.6562305898749052 2022-04-14 14:51:01,431 - pynamics.system - INFO - integration at time 0000.95 2022-04-14 14:51:03,260 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:03,261 - pynamics.integration - INFO - beginning integration r: 0.7875388202501892 2022-04-14 14:51:04,747 - pynamics.system - INFO - integration at time 0001.08 2022-04-14 14:51:06,518 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:06,520 - pynamics.integration - INFO - beginning integration r: 0.7877560928849625 2022-04-14 14:51:07,993 - pynamics.system - INFO - integration at time 0000.91 2022-04-14 14:51:10,593 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:10,595 - pynamics.integration - INFO - beginning integration r: 0.8688260514978312 2022-04-14 14:51:11,322 - pynamics.system - INFO - integration at time 0000.19 2022-04-14 14:51:14,261 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:14,262 - pynamics.integration - INFO - beginning integration r: 0.9189300413871313 2022-04-14 14:51:14,717 - pynamics.system - INFO - integration at time 0000.07 2022-04-14 14:51:18,409 - pynamics.system - INFO - integration at time 0004.59 2022-04-14 14:51:18,712 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:18,714 - pynamics.integration - INFO - beginning integration r: 0.9498960101106999 2022-04-14 14:51:21,806 - pynamics.system - INFO - integration at time 0003.38 2022-04-14 14:51:22,906 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:22,907 - pynamics.integration - INFO - beginning integration r: 0.9690340312764314 2022-04-14 14:51:25,154 - pynamics.system - INFO - integration at time 0002.05 2022-04-14 14:51:27,389 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:27,391 - pynamics.integration - INFO - beginning integration r: 0.9808619788342684 2022-04-14 14:51:28,344 - pynamics.system - INFO - integration at time 0000.28 2022-04-14 14:51:31,537 - pynamics.system - INFO - integration at time 0003.54 2022-04-14 14:51:32,389 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:32,390 - pynamics.integration - INFO - beginning integration r: 0.988172052442163 2022-04-14 14:51:34,817 - pynamics.system - INFO - integration at time 0001.81 2022-04-14 14:51:36,730 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:36,731 - pynamics.integration - INFO - beginning integration r: 0.9926899263921054 2022-04-14 14:51:38,187 - pynamics.system - INFO - integration at time 0000.83 2022-04-14 14:51:41,823 - pynamics.system - INFO - integration at time 0004.72 2022-04-14 14:51:42,172 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:42,174 - pynamics.integration - INFO - beginning integration r: 0.9954821260500576 2022-04-14 14:51:45,390 - pynamics.system - INFO - integration at time 0002.99 2022-04-14 14:51:46,665 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:46,666 - pynamics.integration - INFO - beginning integration r: 0.9972078003420479 2022-04-14 14:51:48,710 - pynamics.system - INFO - integration at time 0001.72 2022-04-14 14:51:50,554 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:50,556 - pynamics.integration - INFO - beginning integration r: 0.9982743257080098 2022-04-14 14:51:51,943 - pynamics.system - INFO - integration at time 0001.15 2022-04-14 14:51:54,157 - pynamics.integration - INFO - finished integration 2022-04-14 14:51:54,159 - pynamics.integration - INFO - beginning integration r: 0.9989334746340381 2022-04-14 14:51:55,382 - pynamics.system - INFO - integration at time 0000.41 2022-04-14 14:51:59,130 - pynamics.system - INFO - integration at time 0004.25 2022-04-14 14:52:00,082 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:00,084 - pynamics.integration - INFO - beginning integration r: 0.9993408510739716 2022-04-14 14:52:02,844 - pynamics.system - INFO - integration at time 0001.87 2022-04-14 14:52:04,428 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:04,430 - pynamics.integration - INFO - beginning integration r: 0.9995926235600665 2022-04-14 14:52:06,139 - pynamics.system - INFO - integration at time 0001.16 2022-04-14 14:52:09,214 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:09,216 - pynamics.integration - INFO - beginning integration 2022-04-14 14:52:09,301 - pynamics.system - INFO - integration at time 0000.00 r: 0.9997482275139051 2022-04-14 14:52:12,676 - pynamics.system - INFO - integration at time 0002.28 2022-04-14 14:52:14,724 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:14,725 - pynamics.integration - INFO - beginning integration r: 0.9998443960461614 2022-04-14 14:52:15,802 - pynamics.system - INFO - integration at time 0000.56 2022-04-14 14:52:18,645 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:18,646 - pynamics.integration - INFO - beginning integration r: 0.9999038314677438 2022-04-14 14:52:18,987 - pynamics.system - INFO - integration at time 0000.03 2022-04-14 14:52:22,310 - pynamics.system - INFO - integration at time 0003.51 2022-04-14 14:52:23,537 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:23,539 - pynamics.integration - INFO - beginning integration r: 0.9999405645784174 2022-04-14 14:52:25,556 - pynamics.system - INFO - integration at time 0001.32 2022-04-14 14:52:28,448 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:28,450 - pynamics.integration - INFO - beginning integration r: 1.4998811291568348 2022-04-14 14:52:28,668 - pynamics.system - INFO - integration at time 0000.01 2022-04-14 14:52:31,773 - pynamics.system - INFO - integration at time 0003.57 2022-04-14 14:52:33,645 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:33,646 - pynamics.integration - INFO - beginning integration r: 0.44376941012509463 2022-04-14 14:52:34,887 - pynamics.system - INFO - integration at time 0000.83 2022-04-14 14:52:37,994 - pynamics.system - INFO - integration at time 0003.52 2022-04-14 14:52:38,415 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:38,416 - pynamics.integration - INFO - beginning integration r: 0.6562305898749053 2022-04-14 14:52:41,082 - pynamics.system - INFO - integration at time 0004.16 2022-04-14 14:52:41,459 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:41,461 - pynamics.integration - INFO - beginning integration r: 0.7875388202501892 2022-04-14 14:52:44,200 - pynamics.system - INFO - integration at time 0004.35 2022-04-14 14:52:44,591 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:44,592 - pynamics.integration - INFO - beginning integration r: 0.7877560835773538 2022-04-14 14:52:47,335 - pynamics.system - INFO - integration at time 0003.67 2022-04-14 14:52:48,207 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:48,208 - pynamics.integration - INFO - beginning integration r: 0.8688260457454127 2022-04-14 14:52:50,409 - pynamics.system - INFO - integration at time 0002.81 2022-04-14 14:52:51,696 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:51,698 - pynamics.integration - INFO - beginning integration r: 0.9189300378319412 2022-04-14 14:52:53,487 - pynamics.system - INFO - integration at time 0001.38 2022-04-14 14:52:55,719 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:55,720 - pynamics.integration - INFO - beginning integration r: 0.9498960079134715 2022-04-14 14:52:56,564 - pynamics.system - INFO - integration at time 0000.34 2022-04-14 14:52:59,522 - pynamics.integration - INFO - finished integration 2022-04-14 14:52:59,523 - pynamics.integration - INFO - beginning integration r: 0.9690340299184697 2022-04-14 14:52:59,739 - pynamics.system - INFO - integration at time 0000.01 2022-04-14 14:53:02,883 - pynamics.system - INFO - integration at time 0003.49 2022-04-14 14:53:03,639 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:03,640 - pynamics.integration - INFO - beginning integration r: 0.9808619779950019 2022-04-14 14:53:05,949 - pynamics.system - INFO - integration at time 0001.35 2022-04-14 14:53:08,286 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:08,287 - pynamics.integration - INFO - beginning integration r: 0.9881720519234678 2022-04-14 14:53:08,993 - pynamics.system - INFO - integration at time 0000.16 2022-04-14 14:53:12,107 - pynamics.system - INFO - integration at time 0004.57 2022-04-14 14:53:12,467 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:12,468 - pynamics.integration - INFO - beginning integration r: 0.9926899260715342 2022-04-14 14:53:15,225 - pynamics.system - INFO - integration at time 0002.37 2022-04-14 14:53:17,200 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:17,201 - pynamics.integration - INFO - beginning integration r: 0.9954821258519336 2022-04-14 14:53:18,328 - pynamics.system - INFO - integration at time 0000.73 2022-04-14 14:53:21,037 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:21,039 - pynamics.integration - INFO - beginning integration r: 0.9972078002196005 2022-04-14 14:53:21,514 - pynamics.system - INFO - integration at time 0000.06 2022-04-14 14:53:24,694 - pynamics.system - INFO - integration at time 0004.82 2022-04-14 14:53:24,776 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:24,777 - pynamics.integration - INFO - beginning integration r: 0.9982743256323331 2022-04-14 14:53:27,809 - pynamics.system - INFO - integration at time 0003.59 2022-04-14 14:53:28,453 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:28,454 - pynamics.integration - INFO - beginning integration r: 0.9989334745872673 2022-04-14 14:53:30,950 - pynamics.system - INFO - integration at time 0001.81 2022-04-14 14:53:32,705 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:32,706 - pynamics.integration - INFO - beginning integration r: 0.9993408510450658 2022-04-14 14:53:34,122 - pynamics.system - INFO - integration at time 0000.94 2022-04-14 14:53:37,388 - pynamics.system - INFO - integration at time 0004.53 2022-04-14 14:53:38,203 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:38,204 - pynamics.integration - INFO - beginning integration r: 0.9995926235422017 2022-04-14 14:53:40,593 - pynamics.system - INFO - integration at time 0003.04 2022-04-14 14:53:41,916 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:41,917 - pynamics.integration - INFO - beginning integration r: 0.9997482275028641 2022-04-14 14:53:43,853 - pynamics.system - INFO - integration at time 0001.12 2022-04-14 14:53:46,666 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:46,668 - pynamics.integration - INFO - beginning integration r: 0.9998443960393376 2022-04-14 14:53:46,957 - pynamics.system - INFO - integration at time 0000.02 2022-04-14 14:53:50,100 - pynamics.system - INFO - integration at time 0004.39 2022-04-14 14:53:50,485 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:50,487 - pynamics.integration - INFO - beginning integration r: 0.9999038314635265 2022-04-14 14:53:53,194 - pynamics.system - INFO - integration at time 0002.37 2022-04-14 14:53:54,844 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:54,846 - pynamics.integration - INFO - beginning integration r: 0.999940564575811 2022-04-14 14:53:56,269 - pynamics.system - INFO - integration at time 0001.03 2022-04-14 14:53:59,010 - pynamics.integration - INFO - finished integration 2022-04-14 14:53:59,011 - pynamics.integration - INFO - beginning integration r: 0.9999632668877154 2022-04-14 14:53:59,360 - pynamics.system - INFO - integration at time 0000.03 2022-04-14 14:54:02,525 - pynamics.system - INFO - integration at time 0004.45 2022-04-14 14:54:02,948 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:02,951 - pynamics.integration - INFO - beginning integration r: 0.9999799315735381 2022-04-14 14:54:05,541 - pynamics.system - INFO - integration at time 0003.31 2022-04-14 14:54:06,972 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:06,974 - pynamics.integration - INFO - beginning integration r: 0.4437694101250945 2022-04-14 14:54:08,492 - pynamics.system - INFO - integration at time 0000.93 2022-04-14 14:54:11,436 - pynamics.system - INFO - integration at time 0004.31 2022-04-14 14:54:11,490 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:11,492 - pynamics.integration - INFO - beginning integration r: 0.6562305898749052 2022-04-14 14:54:14,397 - pynamics.system - INFO - integration at time 0004.96 2022-04-14 14:54:14,405 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:14,406 - pynamics.integration - INFO - beginning integration r: 0.7875388202501892 2022-04-14 14:54:17,372 - pynamics.system - INFO - integration at time 0004.95 2022-04-14 14:54:17,382 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:17,384 - pynamics.integration - INFO - beginning integration r: 0.7877560936006085 2022-04-14 14:54:20,517 - pynamics.system - INFO - integration at time 0003.67 2022-04-14 14:54:21,055 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:21,056 - pynamics.integration - INFO - beginning integration r: 0.8688260519401247 2022-04-14 14:54:23,640 - pynamics.system - INFO - integration at time 0003.21 2022-04-14 14:54:24,361 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:24,363 - pynamics.integration - INFO - beginning integration r: 0.9189300416604838 2022-04-14 14:54:26,855 - pynamics.system - INFO - integration at time 0003.04 2022-04-14 14:54:27,798 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:27,800 - pynamics.integration - INFO - beginning integration r: 0.949896010279641 2022-04-14 14:54:29,989 - pynamics.system - INFO - integration at time 0001.91 2022-04-14 14:54:31,470 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:31,472 - pynamics.integration - INFO - beginning integration r: 0.9690340313808428 2022-04-14 14:54:33,036 - pynamics.system - INFO - integration at time 0001.40 2022-04-14 14:54:35,285 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:35,286 - pynamics.integration - INFO - beginning integration r: 0.9808619788987982 2022-04-14 14:54:36,063 - pynamics.system - INFO - integration at time 0000.23 2022-04-14 14:54:39,075 - pynamics.system - INFO - integration at time 0003.59 2022-04-14 14:54:40,298 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:40,299 - pynamics.integration - INFO - beginning integration r: 0.9881720524820445 2022-04-14 14:54:42,119 - pynamics.system - INFO - integration at time 0001.33 2022-04-14 14:54:43,987 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:43,988 - pynamics.integration - INFO - beginning integration r: 0.9926899264167536 2022-04-14 14:54:45,170 - pynamics.system - INFO - integration at time 0000.81 2022-04-14 14:54:47,966 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:47,967 - pynamics.integration - INFO - beginning integration r: 0.995482126065291 2022-04-14 14:54:48,194 - pynamics.system - INFO - integration at time 0000.01 2022-04-14 14:54:51,210 - pynamics.system - INFO - integration at time 0003.34 2022-04-14 14:54:52,534 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:52,535 - pynamics.integration - INFO - beginning integration r: 0.9972078003514626 2022-04-14 14:54:54,238 - pynamics.system - INFO - integration at time 0001.46 2022-04-14 14:54:56,077 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:56,078 - pynamics.integration - INFO - beginning integration r: 0.9982743257138283 2022-04-14 14:54:57,262 - pynamics.system - INFO - integration at time 0000.86 2022-04-14 14:54:59,577 - pynamics.integration - INFO - finished integration 2022-04-14 14:54:59,578 - pynamics.integration - INFO - beginning integration r: 0.9989334746376343 2022-04-14 14:55:00,271 - pynamics.system - INFO - integration at time 0000.16 2022-04-14 14:55:02,921 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:02,922 - pynamics.integration - INFO - beginning integration r: 0.9993408510761942 2022-04-14 14:55:03,300 - pynamics.system - INFO - integration at time 0000.04 2022-04-14 14:55:06,304 - pynamics.system - INFO - integration at time 0003.28 2022-04-14 14:55:07,118 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:07,120 - pynamics.integration - INFO - beginning integration r: 0.9995926235614401 2022-04-14 14:55:09,291 - pynamics.system - INFO - integration at time 0002.13 2022-04-14 14:55:11,066 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:11,067 - pynamics.integration - INFO - beginning integration r: 0.9997482275147541 2022-04-14 14:55:12,308 - pynamics.system - INFO - integration at time 0000.92 2022-04-14 14:55:15,248 - pynamics.system - INFO - integration at time 0004.19 2022-04-14 14:55:15,588 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:15,589 - pynamics.integration - INFO - beginning integration r: 0.999844396046686 2022-04-14 14:55:18,203 - pynamics.system - INFO - integration at time 0003.71 2022-04-14 14:55:19,359 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:19,361 - pynamics.integration - INFO - beginning integration r: 0.999903831468068 2022-04-14 14:55:21,182 - pynamics.system - INFO - integration at time 0001.31 2022-04-14 14:55:23,750 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:23,752 - pynamics.integration - INFO - beginning integration r: 0.9999405645786179 2022-04-14 14:55:24,259 - pynamics.system - INFO - integration at time 0000.08 2022-04-14 14:55:27,268 - pynamics.system - INFO - integration at time 0004.70 2022-04-14 14:55:27,641 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:27,642 - pynamics.integration - INFO - beginning integration r: 0.9999632668894501 2022-04-14 14:55:30,226 - pynamics.system - INFO - integration at time 0002.92 2022-04-14 14:55:31,315 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:31,316 - pynamics.integration - INFO - beginning integration r: 0.9999772976891678 2022-04-14 14:55:33,159 - pynamics.system - INFO - integration at time 0001.94 2022-04-14 14:55:35,071 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:35,073 - pynamics.integration - INFO - beginning integration r: 0.9999859692002825 2022-04-14 14:55:36,086 - pynamics.system - INFO - integration at time 0000.58 2022-04-14 14:55:38,863 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:38,864 - pynamics.integration - INFO - beginning integration 2022-04-14 14:55:39,014 - pynamics.system - INFO - integration at time 0000.01 r: 0.9999913284888853 2022-04-14 14:55:42,021 - pynamics.system - INFO - integration at time 0004.16 2022-04-14 14:55:42,674 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:42,675 - pynamics.integration - INFO - beginning integration r: 0.9999946407113972 2022-04-14 14:55:45,062 - pynamics.system - INFO - integration at time 0001.58 2022-04-14 14:55:47,527 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:47,529 - pynamics.integration - INFO - beginning integration r: 0.999996687777488 2022-04-14 14:55:48,079 - pynamics.system - INFO - integration at time 0000.10 2022-04-14 14:55:51,097 - pynamics.system - INFO - integration at time 0003.37 2022-04-14 14:55:52,183 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:52,185 - pynamics.integration - INFO - beginning integration r: 0.9999979529339093 2022-04-14 14:55:54,094 - pynamics.system - INFO - integration at time 0001.79 2022-04-14 14:55:55,518 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:55,519 - pynamics.integration - INFO - beginning integration r: 0.9999987348435787 2022-04-14 14:55:57,089 - pynamics.system - INFO - integration at time 0001.27 2022-04-14 14:55:59,053 - pynamics.integration - INFO - finished integration 2022-04-14 14:55:59,055 - pynamics.integration - INFO - beginning integration r: 0.9999992180903305 2022-04-14 14:56:00,105 - pynamics.system - INFO - integration at time 0000.64 2022-04-14 14:56:03,005 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:03,007 - pynamics.integration - INFO - beginning integration 2022-04-14 14:56:03,133 - pynamics.system - INFO - integration at time 0000.00 r: 0.9999995167532482 2022-04-14 14:56:06,075 - pynamics.system - INFO - integration at time 0003.79 2022-04-14 14:56:07,014 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:07,015 - pynamics.integration - INFO - beginning integration r: 0.9999997013370824 2022-04-14 14:56:09,055 - pynamics.system - INFO - integration at time 0001.53 2022-04-14 14:56:11,405 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:11,406 - pynamics.integration - INFO - beginning integration r: 0.9999998154161658 2022-04-14 14:56:12,017 - pynamics.system - INFO - integration at time 0000.13 2022-04-14 14:56:14,982 - pynamics.system - INFO - integration at time 0004.42 2022-04-14 14:56:15,348 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:15,349 - pynamics.integration - INFO - beginning integration r: 0.9999997788400657 2022-04-14 14:56:17,965 - pynamics.system - INFO - integration at time 0002.99 2022-04-14 14:56:19,000 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:19,001 - pynamics.integration - INFO - beginning integration r: 0.999999761022426 2022-04-14 14:56:20,951 - pynamics.system - INFO - integration at time 0001.70 2022-04-14 14:56:22,800 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:22,801 - pynamics.integration - INFO - beginning integration r: 0.9999997887178371 2022-04-14 14:56:23,992 - pynamics.system - INFO - integration at time 0000.72 2022-04-14 14:56:26,638 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:26,639 - pynamics.integration - INFO - beginning integration r: 0.999999772034333 2022-04-14 14:56:27,013 - pynamics.system - INFO - integration at time 0000.04 2022-04-14 14:56:29,953 - pynamics.system - INFO - integration at time 0004.87 2022-04-14 14:56:30,171 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:30,172 - pynamics.integration - INFO - beginning integration r: 0.9999997678281588 2022-04-14 14:56:32,899 - pynamics.system - INFO - integration at time 0003.18 2022-04-14 14:56:34,103 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:34,104 - pynamics.integration - INFO - beginning integration r: 0.9999997746338916 2022-04-14 14:56:35,889 - pynamics.system - INFO - integration at time 0001.52 2022-04-14 14:56:38,274 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:38,275 - pynamics.integration - INFO - beginning integration r: 0.9999997704277174 2022-04-14 14:56:38,834 - pynamics.system - INFO - integration at time 0000.11 2022-04-14 14:56:41,762 - pynamics.system - INFO - integration at time 0004.74 2022-04-14 14:56:41,891 - pynamics.integration - INFO - finished integration states = run([best]) 2022-04-14 14:56:41,896 - pynamics.integration - INFO - beginning integration \u0026lt;lambdifygenerated-1\u0026gt;:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray. return array([[0.314159265358979*r**2, 0, 0, 0, 0, 0], [0, 0.314159265358979*r**2, 0, 0, 0, 0], [0, 0, 0.314159265358979*r**2, 0, 0, 0], [0, 0, 0, I_11*sin(qB)**2 + (I_11*sin(qC)**2*cos(qB) + I_11*cos(qB)*cos(qC)**2)*cos(qB), 0, I_11*sin(qB)], [0, 0, 0, 0, I_11*sin(qC)**2 + I_11*cos(qC)**2, 0], [0, 0, 0, I_11*sin(qB), 0, I_11]]) \u0026lt;lambdifygenerated-2\u0026gt;:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray. return array([[-6.28318530717959*r**2*rho*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qB) + 6.28318530717959*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qC)*cos(qB) - 0.00628318530717959*rho*(sin(qE)*sin(qC) + cos(qE)*cos(qC))*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qB) - 0.00628318530717959*rho*(x_d*cos(qB)*cos(qC) - (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*cos(qC) + (y_d*cos(qA) + z_d*sin(qA))*sin(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qB)*cos(qC)], [-0.314159265358979*g*r**2 - 6.28318530717959*r**2*rho*(sin(qE)*sin(qC) + cos(qE)*cos(qC))*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qA) - 6.28318530717959*r**2*rho*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*sin(qB) + 6.28318530717959*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*sin(qB)*sin(qC) - 6.28318530717959*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qA)*cos(qC) - 0.00628318530717959*rho*(sin(qE)*sin(qC) + cos(qE)*cos(qC))*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*sin(qB) - 0.00628318530717959*rho*(-sin(qE)*cos(qC) + sin(qC)*cos(qE))*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qA) - 0.00628318530717959*rho*(x_d*cos(qB)*cos(qC) - (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*cos(qC) + (y_d*cos(qA) + z_d*sin(qA))*sin(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*sin(qB)*cos(qC) - 0.00628318530717959*rho*(x_d*cos(qB)*cos(qC) - (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*cos(qC) + (y_d*cos(qA) + z_d*sin(qA))*sin(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qC)*cos(qA)], [-6.28318530717959*r**2*rho*(sin(qE)*sin(qC) + cos(qE)*cos(qC))*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA) + 6.28318530717959*r**2*rho*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB)*cos(qA) - 6.28318530717959*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*cos(qC) - 6.28318530717959*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB)*sin(qC)*cos(qA) + 0.00628318530717959*rho*(sin(qE)*sin(qC) + cos(qE)*cos(qC))*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB)*cos(qA) - 0.00628318530717959*rho*(-sin(qE)*cos(qC) + sin(qC)*cos(qE))*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA) - 0.00628318530717959*rho*(x_d*cos(qB)*cos(qC) - (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*cos(qC) + (y_d*cos(qA) + z_d*sin(qA))*sin(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*sin(qC) + 0.00628318530717959*rho*(x_d*cos(qB)*cos(qC) - (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*cos(qC) + (y_d*cos(qA) + z_d*sin(qA))*sin(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB)*cos(qA)*cos(qC)], [-I_11*qA_d*qB_d*sin(qB)*cos(qB) + 6.28318530717959*l*r**2*rho*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB)*cos(qE) - 0.00628318530717959*l*rho*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qE)*sin(qB) + 6.28318530717959*le*r**2*rho*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB) + 6.28318530717959*lw*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB) + qB_d*(-I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*cos(qC))*sin(qB) - (I_11*qB_d*(qA_d*sin(qB) + qC_d) - qC_d*(I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*sin(qC)))*cos(qB) - (-I_11*(qA_d*qB_d*sin(qB)*sin(qC) - qA_d*qC_d*cos(qB)*cos(qC) - qB_d*qC_d*sin(qC))*sin(qC) + I_11*(-qA_d*qB_d*sin(qB)*cos(qC) - qA_d*qC_d*sin(qC)*cos(qB) + qB_d*qC_d*cos(qC))*cos(qC))*cos(qB)], [-I_11*(qA_d*qB_d*sin(qB)*sin(qC) - qA_d*qC_d*cos(qB)*cos(qC) - qB_d*qC_d*sin(qC))*cos(qC) - I_11*(-qA_d*qB_d*sin(qB)*cos(qC) - qA_d*qC_d*sin(qC)*cos(qB) + qB_d*qC_d*cos(qC))*sin(qC) + qA_d*(I_11*(qA_d*sin(qB) + qC_d)*cos(qB) + I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)*sin(qC) - I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*sin(qB)*cos(qC)) - qC_d*(-I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*cos(qC))], [-I_11*qA_d*qB_d*cos(qB) + 6.28318530717959*l*r**2*rho*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qE) - 0.00628318530717959*l*rho*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qE) + 6.28318530717959*le*r**2*rho*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB))) + 6.28318530717959*lw*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB))) - qA_d*(I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*sin(qC))*cos(qB) + qB_d*(-I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*cos(qC))]]) 2022-04-14 14:56:45,004 - pynamics.system - INFO - integration at time 0003.93 2022-04-14 14:56:45,737 - pynamics.integration - INFO - finished integration po = PointsOutput(points,system) po.calc(states,t) po.plot_time() po.animate(fps = 30, movie_name=\u0026#39;glider.mp4\u0026#39;,lw=2,marker=\u0026#39;o\u0026#39;) 2022-04-14 14:56:45,752 - pynamics.output - INFO - calculating outputs 2022-04-14 14:56:45,757 - pynamics.output - INFO - done calculating outputs \u0026lt;AxesSubplot:\u0026gt; from matplotlib import animation, rc from IPython.display import HTML HTML(po.anim.to_html5_video()) Your browser does not support the video tag. o1 = Output([E],system,system.constant_values) def maximize_energy(args): print(\u0026#39;r: \u0026#39;,args[0]) # if args[0]\u0026gt;1: # return 1000 # if args[0]\u0026lt;=0: # return 1000 try: states = run(args) y = o1.calc(states,t) perf = 1/y[-1] return perf except scipy.linalg.LinAlgError: return 1000 #best=.1 result = scipy.optimize.minimize(maximize_energy,[.5],method=\u0026#39;powell\u0026#39;,bounds=[(.1,1)]) best = result.x 2022-04-14 14:56:52,210 - pynamics.integration - INFO - beginning integration r: 0.5 2022-04-14 14:56:54,493 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:54,494 - pynamics.output - INFO - calculating outputs 2022-04-14 14:56:54,499 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:56:54,501 - pynamics.integration - INFO - beginning integration r: 0.4437694101250946 2022-04-14 14:56:54,723 - pynamics.system - INFO - integration at time 0000.03 2022-04-14 14:56:57,920 - pynamics.system - INFO - integration at time 0001.40 2022-04-14 14:56:59,336 - pynamics.integration - INFO - finished integration 2022-04-14 14:56:59,337 - pynamics.output - INFO - calculating outputs 2022-04-14 14:56:59,342 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:56:59,343 - pynamics.integration - INFO - beginning integration r: 0.6562305898749052 2022-04-14 14:57:01,119 - pynamics.system - INFO - integration at time 0001.67 2022-04-14 14:57:02,468 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:02,470 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:02,475 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:02,476 - pynamics.integration - INFO - beginning integration r: 0.7875388202501892 2022-04-14 14:57:04,293 - pynamics.system - INFO - integration at time 0001.83 2022-04-14 14:57:05,668 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:05,669 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:05,674 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:05,675 - pynamics.integration - INFO - beginning integration r: 0.7312069994504087 2022-04-14 14:57:07,521 - pynamics.system - INFO - integration at time 0001.91 2022-04-14 14:57:08,733 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:08,734 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:08,738 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:08,739 - pynamics.integration - INFO - beginning integration r: 0.7914957689712718 2022-04-14 14:57:10,693 - pynamics.system - INFO - integration at time 0001.56 2022-04-14 14:57:12,320 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:12,322 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:12,326 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:12,327 - pynamics.integration - INFO - beginning integration r: 0.8069181956411859 2022-04-14 14:57:13,854 - pynamics.system - INFO - integration at time 0000.95 2022-04-14 14:57:16,083 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:16,084 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:16,089 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:16,091 - pynamics.integration - INFO - beginning integration r: 0.8806688822970953 2022-04-14 14:57:17,067 - pynamics.system - INFO - integration at time 0000.52 2022-04-14 14:57:20,252 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:20,253 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:20,258 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:20,259 - pynamics.integration - INFO - beginning integration 2022-04-14 14:57:20,297 - pynamics.system - INFO - integration at time 0000.00 r: 0.8099243266534977 2022-04-14 14:57:23,515 - pynamics.system - INFO - integration at time 0004.30 2022-04-14 14:57:23,950 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:23,951 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:23,955 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:23,956 - pynamics.integration - INFO - beginning integration r: 0.8104735739012696 2022-04-14 14:57:26,743 - pynamics.system - INFO - integration at time 0003.23 2022-04-14 14:57:28,073 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:28,074 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:28,079 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:28,080 - pynamics.integration - INFO - beginning integration r: 0.8101257234702286 2022-04-14 14:57:29,944 - pynamics.system - INFO - integration at time 0002.05 2022-04-14 14:57:31,327 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:31,328 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:31,333 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:31,335 - pynamics.integration - INFO - beginning integration r: 0.8101845153810388 2022-04-14 14:57:33,136 - pynamics.system - INFO - integration at time 0002.14 2022-04-14 14:57:34,249 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:34,249 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:34,255 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:34,256 - pynamics.integration - INFO - beginning integration r: 0.8100699669623956 2022-04-14 14:57:36,331 - pynamics.system - INFO - integration at time 0002.62 2022-04-14 14:57:37,646 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:37,647 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:37,653 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:37,654 - pynamics.integration - INFO - beginning integration r: 1.1202514469404572 2022-04-14 14:57:39,494 - pynamics.system - INFO - integration at time 0001.31 2022-04-14 14:57:42,152 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:42,153 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:42,159 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:42,160 - pynamics.integration - INFO - beginning integration r: 0.44376941012509463 2022-04-14 14:57:42,697 - pynamics.system - INFO - integration at time 0000.26 2022-04-14 14:57:45,871 - pynamics.system - INFO - integration at time 0001.89 2022-04-14 14:57:47,068 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:47,069 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:47,074 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:47,076 - pynamics.integration - INFO - beginning integration r: 0.6562305898749052 2022-04-14 14:57:49,033 - pynamics.system - INFO - integration at time 0001.97 2022-04-14 14:57:50,172 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:50,173 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:50,178 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:50,179 - pynamics.integration - INFO - beginning integration r: 0.7875388202501892 2022-04-14 14:57:52,161 - pynamics.system - INFO - integration at time 0002.33 2022-04-14 14:57:53,314 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:53,315 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:53,320 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:53,321 - pynamics.integration - INFO - beginning integration r: 0.7312069520431239 2022-04-14 14:57:55,293 - pynamics.system - INFO - integration at time 0002.40 2022-04-14 14:57:56,173 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:56,174 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:56,178 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:56,179 - pynamics.integration - INFO - beginning integration r: 0.7914926866091372 2022-04-14 14:57:58,460 - pynamics.system - INFO - integration at time 0002.06 2022-04-14 14:57:59,804 - pynamics.integration - INFO - finished integration 2022-04-14 14:57:59,804 - pynamics.output - INFO - calculating outputs 2022-04-14 14:57:59,809 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:57:59,810 - pynamics.integration - INFO - beginning integration r: 0.8069415175532193 2022-04-14 14:58:01,618 - pynamics.system - INFO - integration at time 0001.40 2022-04-14 14:58:04,275 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:04,276 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:04,280 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:04,282 - pynamics.integration - INFO - beginning integration r: 0.8806832960314146 2022-04-14 14:58:04,825 - pynamics.system - INFO - integration at time 0000.11 2022-04-14 14:58:07,989 - pynamics.system - INFO - integration at time 0004.03 2022-04-14 14:58:08,344 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:08,344 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:08,348 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:08,350 - pynamics.integration - INFO - beginning integration r: 0.8098990903846265 2022-04-14 14:58:11,149 - pynamics.system - INFO - integration at time 0003.57 2022-04-14 14:58:11,960 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:11,961 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:11,966 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:11,967 - pynamics.integration - INFO - beginning integration r: 0.8104718723972292 2022-04-14 14:58:14,359 - pynamics.system - INFO - integration at time 0002.24 2022-04-14 14:58:15,138 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:15,139 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:15,144 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:15,146 - pynamics.integration - INFO - beginning integration r: 0.8104310696166354 2022-04-14 14:58:17,574 - pynamics.system - INFO - integration at time 0002.62 2022-04-14 14:58:18,841 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:18,842 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:18,847 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:18,849 - pynamics.integration - INFO - beginning integration r: 0.8372902498269703 2022-04-14 14:58:20,761 - pynamics.system - INFO - integration at time 0001.17 2022-04-14 14:58:23,255 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:23,256 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:23,262 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:23,263 - pynamics.integration - INFO - beginning integration r: 0.8207155810522673 2022-04-14 14:58:23,995 - pynamics.system - INFO - integration at time 0000.21 2022-04-14 14:58:26,769 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:26,770 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:26,777 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:26,779 - pynamics.integration - INFO - beginning integration r: 0.8143846209326022 2022-04-14 14:58:27,183 - pynamics.system - INFO - integration at time 0000.06 2022-04-14 14:58:30,412 - pynamics.system - INFO - integration at time 0003.92 2022-04-14 14:58:30,923 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:30,924 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:30,929 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:30,930 - pynamics.integration - INFO - beginning integration r: 0.8119664093483103 2022-04-14 14:58:33,625 - pynamics.system - INFO - integration at time 0003.92 2022-04-14 14:58:34,453 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:34,454 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:34,459 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:34,461 - pynamics.integration - INFO - beginning integration r: 0.8110427347150996 2022-04-14 14:58:36,798 - pynamics.system - INFO - integration at time 0002.20 2022-04-14 14:58:38,193 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:38,195 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:38,199 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:38,201 - pynamics.integration - INFO - beginning integration r: 0.8106899223997591 2022-04-14 14:58:39,960 - pynamics.system - INFO - integration at time 0001.70 2022-04-14 14:58:41,897 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:41,898 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:41,904 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:41,905 - pynamics.integration - INFO - beginning integration r: 0.8105551600869486 2022-04-14 14:58:43,160 - pynamics.system - INFO - integration at time 0000.93 2022-04-14 14:58:45,610 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:45,612 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:45,617 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:45,619 - pynamics.integration - INFO - beginning integration r: 0.8105036854638575 2022-04-14 14:58:46,369 - pynamics.system - INFO - integration at time 0000.20 2022-04-14 14:58:49,121 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:49,123 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:49,127 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:49,128 - pynamics.integration - INFO - beginning integration r: 0.8104933479341357 2022-04-14 14:58:49,565 - pynamics.system - INFO - integration at time 0000.07 2022-04-14 14:58:52,543 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:52,544 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:52,550 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:52,552 - pynamics.integration - INFO - beginning integration r: 0.8105140229935793 2022-04-14 14:58:52,786 - pynamics.system - INFO - integration at time 0000.02 2022-04-14 14:58:56,054 - pynamics.system - INFO - integration at time 0003.86 2022-04-14 14:58:56,862 - pynamics.integration - INFO - finished integration 2022-04-14 14:58:56,864 - pynamics.output - INFO - calculating outputs 2022-04-14 14:58:56,868 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:58:56,869 - pynamics.integration - INFO - beginning integration r: 0.4437694101250946 2022-04-14 14:58:59,249 - pynamics.system - INFO - integration at time 0001.07 2022-04-14 14:59:01,645 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:01,645 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:01,649 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:01,651 - pynamics.integration - INFO - beginning integration r: 0.6562305898749053 2022-04-14 14:59:02,409 - pynamics.system - INFO - integration at time 0000.26 2022-04-14 14:59:04,797 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:04,798 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:04,802 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:04,804 - pynamics.integration - INFO - beginning integration r: 0.7875388202501892 2022-04-14 14:59:05,607 - pynamics.system - INFO - integration at time 0000.27 2022-04-14 14:59:07,971 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:07,972 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:07,976 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:07,978 - pynamics.integration - INFO - beginning integration r: 0.7312069984594256 2022-04-14 14:59:08,773 - pynamics.system - INFO - integration at time 0000.35 2022-04-14 14:59:11,001 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:11,002 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:11,006 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:11,007 - pynamics.integration - INFO - beginning integration r: 0.7914958362564721 2022-04-14 14:59:11,957 - pynamics.system - INFO - integration at time 0000.34 2022-04-14 14:59:14,553 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:14,553 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:14,558 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:14,559 - pynamics.integration - INFO - beginning integration r: 0.8069190967450603 2022-04-14 14:59:15,097 - pynamics.system - INFO - integration at time 0000.12 2022-04-14 14:59:18,070 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:18,071 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:18,077 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:18,079 - pynamics.integration - INFO - beginning integration r: 0.8806694392099171 2022-04-14 14:59:18,280 - pynamics.system - INFO - integration at time 0000.01 2022-04-14 14:59:21,416 - pynamics.system - INFO - integration at time 0004.24 2022-04-14 14:59:21,921 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:21,922 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:21,927 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:21,929 - pynamics.integration - INFO - beginning integration r: 0.8099491469080832 2022-04-14 14:59:24,616 - pynamics.system - INFO - integration at time 0003.46 2022-04-14 14:59:25,528 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:25,529 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:25,533 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:25,535 - pynamics.integration - INFO - beginning integration r: 0.8103868887719312 2022-04-14 14:59:27,820 - pynamics.system - INFO - integration at time 0002.84 2022-04-14 14:59:28,968 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:28,969 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:28,974 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:28,975 - pynamics.integration - INFO - beginning integration r: 0.8103223280969174 2022-04-14 14:59:31,102 - pynamics.system - INFO - integration at time 0001.41 2022-04-14 14:59:33,213 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:33,215 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:33,219 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:33,220 - pynamics.integration - INFO - beginning integration r: 0.837232434223213 2022-04-14 14:59:34,398 - pynamics.system - INFO - integration at time 0000.61 2022-04-14 14:59:37,348 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:37,349 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:37,353 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:37,355 - pynamics.integration - INFO - beginning integration r: 0.8206409746877907 2022-04-14 14:59:37,689 - pynamics.system - INFO - integration at time 0000.04 2022-04-14 14:59:40,931 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:40,932 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:40,936 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:40,937 - pynamics.integration - INFO - beginning integration 2022-04-14 14:59:40,942 - pynamics.system - INFO - integration at time 0000.00 r: 0.814303601068228 2022-04-14 14:59:44,036 - pynamics.system - INFO - integration at time 0003.79 2022-04-14 14:59:44,318 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:44,319 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:44,323 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:44,324 - pynamics.integration - INFO - beginning integration r: 0.811882939744962 2022-04-14 14:59:47,130 - pynamics.system - INFO - integration at time 0003.38 2022-04-14 14:59:48,337 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:48,338 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:48,343 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:48,344 - pynamics.integration - INFO - beginning integration r: 0.8109583293947266 2022-04-14 14:59:50,244 - pynamics.system - INFO - integration at time 0001.70 2022-04-14 14:59:51,813 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:51,814 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:51,818 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:51,819 - pynamics.integration - INFO - beginning integration r: 0.8106051596672866 2022-04-14 14:59:53,402 - pynamics.system - INFO - integration at time 0001.23 2022-04-14 14:59:55,813 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:55,814 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:55,819 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:55,820 - pynamics.integration - INFO - beginning integration r: 0.8104397247458821 2022-04-14 14:59:56,568 - pynamics.system - INFO - integration at time 0000.20 2022-04-14 14:59:59,972 - pynamics.integration - INFO - finished integration 2022-04-14 14:59:59,974 - pynamics.output - INFO - calculating outputs 2022-04-14 14:59:59,978 - pynamics.output - INFO - done calculating outputs 2022-04-14 14:59:59,979 - pynamics.integration - INFO - beginning integration 2022-04-14 15:00:00,108 - pynamics.system - INFO - integration at time 0000.00 r: 0.8105029152629325 2022-04-14 15:00:03,263 - pynamics.system - INFO - integration at time 0004.15 2022-04-14 15:00:04,134 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:04,135 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:04,139 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:04,140 - pynamics.integration - INFO - beginning integration r: 0.8104638613756288 2022-04-14 15:00:06,389 - pynamics.system - INFO - integration at time 0002.32 2022-04-14 15:00:07,435 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:07,436 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:07,441 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:07,442 - pynamics.integration - INFO - beginning integration r: 0.8104195431996616 2022-04-14 15:00:09,556 - pynamics.system - INFO - integration at time 0002.16 2022-04-14 15:00:11,179 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:11,180 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:11,185 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:11,186 - pynamics.integration - INFO - beginning integration r: 0.8104489441180714 2022-04-14 15:00:12,680 - pynamics.system - INFO - integration at time 0001.00 2022-04-14 15:00:14,556 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:14,558 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:14,563 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:14,565 - pynamics.integration - INFO - beginning integration r: 0.8104320160811714 2022-04-14 15:00:15,806 - pynamics.system - INFO - integration at time 0000.78 2022-04-14 15:00:18,516 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:18,517 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:18,522 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:18,524 - pynamics.integration - INFO - beginning integration r: 0.8104432462327036 2022-04-14 15:00:18,979 - pynamics.system - INFO - integration at time 0000.08 2022-04-14 15:00:22,083 - pynamics.system - INFO - integration at time 0004.80 2022-04-14 15:00:22,146 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:22,147 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:22,152 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:22,153 - pynamics.integration - INFO - beginning integration r: 0.8104367802979705 2022-04-14 15:00:25,229 - pynamics.system - INFO - integration at time 0004.61 2022-04-14 15:00:25,655 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:25,657 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:25,662 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:25,663 - pynamics.integration - INFO - beginning integration r: 0.810441069834157 2022-04-14 15:00:28,313 - pynamics.system - INFO - integration at time 0003.83 2022-04-14 15:00:28,825 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:28,826 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:28,831 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:28,832 - pynamics.integration - INFO - beginning integration r: 0.810438600066858 2022-04-14 15:00:31,414 - pynamics.system - INFO - integration at time 0003.18 2022-04-14 15:00:32,038 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:32,039 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:32,043 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:32,044 - pynamics.integration - INFO - beginning integration r: 0.8104402385238852 2022-04-14 15:00:34,497 - pynamics.system - INFO - integration at time 0003.51 2022-04-14 15:00:35,374 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:35,375 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:35,379 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:35,380 - pynamics.integration - INFO - beginning integration r: 0.8104392951567214 2022-04-14 15:00:37,565 - pynamics.system - INFO - integration at time 0002.47 2022-04-14 15:00:38,581 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:38,582 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:38,587 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:38,588 - pynamics.integration - INFO - beginning integration r: 0.8104399209916167 2022-04-14 15:00:40,622 - pynamics.system - INFO - integration at time 0002.04 2022-04-14 15:00:42,475 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:42,476 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:42,480 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:42,481 - pynamics.integration - INFO - beginning integration r: 0.810439560657424 2022-04-14 15:00:43,800 - pynamics.system - INFO - integration at time 0000.78 2022-04-14 15:00:46,411 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:46,412 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:46,416 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:46,417 - pynamics.integration - INFO - beginning integration r: 0.8104397997050826 2022-04-14 15:00:47,219 - pynamics.system - INFO - integration at time 0000.26 2022-04-14 15:00:50,196 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:50,197 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:50,202 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:50,203 - pynamics.integration - INFO - beginning integration 2022-04-14 15:00:50,345 - pynamics.system - INFO - integration at time 0000.01 r: 0.8104396620696682 2022-04-14 15:00:53,445 - pynamics.system - INFO - integration at time 0004.63 2022-04-14 15:00:53,860 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:53,861 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:53,866 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:53,867 - pynamics.integration - INFO - beginning integration r: 0.810439753377749 2022-04-14 15:00:56,583 - pynamics.system - INFO - integration at time 0003.62 2022-04-14 15:00:57,304 - pynamics.integration - INFO - finished integration 2022-04-14 15:00:57,305 - pynamics.output - INFO - calculating outputs 2022-04-14 15:00:57,309 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:00:57,310 - pynamics.integration - INFO - beginning integration r: 0.8104397008056987 2022-04-14 15:00:59,681 - pynamics.system - INFO - integration at time 0002.21 2022-04-14 15:01:01,018 - pynamics.integration - INFO - finished integration 2022-04-14 15:01:01,018 - pynamics.output - INFO - calculating outputs 2022-04-14 15:01:01,023 - pynamics.output - INFO - done calculating outputs 2022-04-14 15:01:01,024 - pynamics.integration - INFO - beginning integration r: 0.8104396860098517 2022-04-14 15:01:02,816 - pynamics.system - INFO - integration at time 0001.62 2022-04-14 15:01:04,660 - pynamics.integration - INFO - finished integration 2022-04-14 15:01:04,661 - pynamics.output - INFO - calculating outputs 2022-04-14 15:01:04,666 - pynamics.output - INFO - done calculating outputs states = run([best]) 2022-04-14 15:01:04,673 - pynamics.integration - INFO - beginning integration \u0026lt;lambdifygenerated-1\u0026gt;:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray. return array([[0.314159265358979*r**2, 0, 0, 0, 0, 0], [0, 0.314159265358979*r**2, 0, 0, 0, 0], [0, 0, 0.314159265358979*r**2, 0, 0, 0], [0, 0, 0, I_11*sin(qB)**2 + (I_11*sin(qC)**2*cos(qB) + I_11*cos(qB)*cos(qC)**2)*cos(qB), 0, I_11*sin(qB)], [0, 0, 0, 0, I_11*sin(qC)**2 + I_11*cos(qC)**2, 0], [0, 0, 0, I_11*sin(qB), 0, I_11]]) \u0026lt;lambdifygenerated-2\u0026gt;:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray. return array([[-6.28318530717959*r**2*rho*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qB) + 6.28318530717959*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qC)*cos(qB) - 0.00628318530717959*rho*(sin(qE)*sin(qC) + cos(qE)*cos(qC))*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qB) - 0.00628318530717959*rho*(x_d*cos(qB)*cos(qC) - (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*cos(qC) + (y_d*cos(qA) + z_d*sin(qA))*sin(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qB)*cos(qC)], [-0.314159265358979*g*r**2 - 6.28318530717959*r**2*rho*(sin(qE)*sin(qC) + cos(qE)*cos(qC))*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qA) - 6.28318530717959*r**2*rho*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*sin(qB) + 6.28318530717959*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*sin(qB)*sin(qC) - 6.28318530717959*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qA)*cos(qC) - 0.00628318530717959*rho*(sin(qE)*sin(qC) + cos(qE)*cos(qC))*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*sin(qB) - 0.00628318530717959*rho*(-sin(qE)*cos(qC) + sin(qC)*cos(qE))*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qA) - 0.00628318530717959*rho*(x_d*cos(qB)*cos(qC) - (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*cos(qC) + (y_d*cos(qA) + z_d*sin(qA))*sin(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*sin(qB)*cos(qC) - 0.00628318530717959*rho*(x_d*cos(qB)*cos(qC) - (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*cos(qC) + (y_d*cos(qA) + z_d*sin(qA))*sin(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qC)*cos(qA)], [-6.28318530717959*r**2*rho*(sin(qE)*sin(qC) + cos(qE)*cos(qC))*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA) + 6.28318530717959*r**2*rho*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB)*cos(qA) - 6.28318530717959*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*cos(qC) - 6.28318530717959*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB)*sin(qC)*cos(qA) + 0.00628318530717959*rho*(sin(qE)*sin(qC) + cos(qE)*cos(qC))*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB)*cos(qA) - 0.00628318530717959*rho*(-sin(qE)*cos(qC) + sin(qC)*cos(qE))*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA) - 0.00628318530717959*rho*(x_d*cos(qB)*cos(qC) - (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*cos(qC) + (y_d*cos(qA) + z_d*sin(qA))*sin(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qA)*sin(qC) + 0.00628318530717959*rho*(x_d*cos(qB)*cos(qC) - (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*cos(qC) + (y_d*cos(qA) + z_d*sin(qA))*sin(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB)*cos(qA)*cos(qC)], [-I_11*qA_d*qB_d*sin(qB)*cos(qB) + 6.28318530717959*l*r**2*rho*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB)*cos(qE) - 0.00628318530717959*l*rho*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qE)*sin(qB) + 6.28318530717959*le*r**2*rho*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB) + 6.28318530717959*lw*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qB) + qB_d*(-I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*cos(qC))*sin(qB) - (I_11*qB_d*(qA_d*sin(qB) + qC_d) - qC_d*(I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*sin(qC)))*cos(qB) - (-I_11*(qA_d*qB_d*sin(qB)*sin(qC) - qA_d*qC_d*cos(qB)*cos(qC) - qB_d*qC_d*sin(qC))*sin(qC) + I_11*(-qA_d*qB_d*sin(qB)*cos(qC) - qA_d*qC_d*sin(qC)*cos(qB) + qB_d*qC_d*cos(qC))*cos(qC))*cos(qB)], [-I_11*(qA_d*qB_d*sin(qB)*sin(qC) - qA_d*qC_d*cos(qB)*cos(qC) - qB_d*qC_d*sin(qC))*cos(qC) - I_11*(-qA_d*qB_d*sin(qB)*cos(qC) - qA_d*qC_d*sin(qC)*cos(qB) + qB_d*qC_d*cos(qC))*sin(qC) + qA_d*(I_11*(qA_d*sin(qB) + qC_d)*cos(qB) + I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)*sin(qC) - I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*sin(qB)*cos(qC)) - qC_d*(-I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*cos(qC))], [-I_11*qA_d*qB_d*cos(qB) + 6.28318530717959*l*r**2*rho*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*cos(qE) - 0.00628318530717959*l*rho*(l*(qA_d*sin(qB) + qC_d)*sin(qE) + (y_d*cos(qA) + z_d*sin(qA))*(-sin(qE)*cos(qC) + sin(qC)*cos(qE)) + (sin(qE)*sin(qC) + cos(qE)*cos(qC))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB)))*sin(qE) + 6.28318530717959*le*r**2*rho*(-l*(qA_d*sin(qB) + qC_d)*cos(qE) - le*(qA_d*sin(qB) + qC_d) + (y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) + (sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)))*sqrt(l**2*(qA_d*sin(qB) + qC_d)**2 + l**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 + 2*l*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC)) + 2*l*le*(qA_d*sin(qB) + qC_d)**2*cos(qE) - 2*l*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + l*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + le**2*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))**2 + le**2*(qA_d*sin(qB) + qC_d)**2 + 2*le*(qA_d*(sin(qE)*cos(qB)*cos(qC) - sin(qC)*cos(qE)*cos(qB)) + qB_d*(sin(qE)*sin(qC) + cos(qE)*cos(qC)))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) - 2*le*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*(sin(qE)*sin(qC) + cos(qE)*cos(qC)) - 2*le*(qA_d*sin(qB) + qC_d)*(sin(qE)*cos(qC) - sin(qC)*cos(qE))*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA)) + x_d**2 + x_d*(l*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-l*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + l*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB))) + 6.28318530717959*lw*r**2*rho*(-lw*(qA_d*sin(qB) + qC_d) - x_d*sin(qC)*cos(qB) + (-y_d*sin(qA) + z_d*cos(qA))*sin(qB)*sin(qC) + (y_d*cos(qA) + z_d*sin(qA))*cos(qC))*sqrt(lw**2*(qA_d*sin(qB) + qC_d)**2 + lw**2*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))**2 - 2*lw*(qA_d*sin(qB) + qC_d)*(y_d*cos(qA) + z_d*sin(qA))*cos(qC) + lw*(qA_d*sin(qB) + qC_d)*(x_d*cos(qB) + y_d*sin(qA)*sin(qB) - z_d*sin(qB)*cos(qA))*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*(x_d*sin(qB) - y_d*sin(qA)*cos(qB) + z_d*cos(qA)*cos(qB)) + x_d**2 + x_d*(lw*(qA_d*sin(qB) + qC_d)*sin(qC)*cos(qB) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qB)) + y_d**2 + z_d**2 + (-y_d*sin(qA) + z_d*cos(qA))*(-lw*(qA_d*sin(qB) + qC_d)*sin(qB)*sin(qC) + lw*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qB))) - qA_d*(I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*cos(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*sin(qC))*cos(qB) + qB_d*(-I_11*(-qA_d*sin(qC)*cos(qB) + qB_d*cos(qC))*sin(qC) + I_11*(qA_d*cos(qB)*cos(qC) + qB_d*sin(qC))*cos(qC))]]) 2022-04-14 15:01:06,049 - pynamics.system - INFO - integration at time 0000.79 2022-04-14 15:01:08,705 - pynamics.integration - INFO - finished integration po = PointsOutput(points,system) po.calc(states,t) po.plot_time() po.animate(fps = 30, movie_name=\u0026#39;glider.mp4\u0026#39;,lw=2,marker=\u0026#39;o\u0026#39;) 2022-04-14 15:01:08,721 - pynamics.output - INFO - calculating outputs 2022-04-14 15:01:08,726 - pynamics.output - INFO - done calculating outputs \u0026lt;AxesSubplot:\u0026gt; from matplotlib import animation, rc from IPython.display import HTML HTML(po.anim.to_html5_video()) Your browser does not support the video tag. ","permalink":"https://foldable-robotics.github.io/modules/optimization/generated/05-glider-optimization/","tags":null,"title":"Glider Optimization"},{"categories":null,"contents":"Resources Introduction to Colab and Python Getting Started with Google Colab External data: Local Files, Drive, Sheets, and Cloud Storage How to Connect Google Colab with Google Drive Embedding your image in google colab markdown What is Google Colab \u0026ldquo;Colaboratory is a free Jupyter notebook environment that requires no setup and runs entirely in the cloud. With Colaboratory you can write and execute code, save and share your analyses, and access powerful computing resources, all for free from your browser\u0026hellip; As the name suggests, Google Colab comes with collaboration backed in the product. In fact, it is a Jupyter notebook that leverages Google Docs collaboration features. It also runs on Google servers and you don’t need to install anything. Moreover, the notebooks are saved to your Google Drive account.\u0026rdquo; [source]\nAdvantages over Jupyter Notebook\nSimple installation and setup Easy integration with Google Drive and Github Cloud computing (use google servers and GPUs instead of your hardware) Automatically saves progress (in the event of power outage or computer freezes) Collaborative environment for group coding projects Persistent notebook version for all teammates Analogous to using Google Docs instead of Microsoft Word for group reports Plenty of quality of life tools without needing to install extensions Collapsible headings Live markdown preview Table of contents Coding tooltips: autofill defined variables Integrated Widget Cells: forms and sliders for easy data entry Scratch cell: A cell to run test code but which isn’t saved in your notebook. Initial Setup Installing Google Colabatory In google drive, go to New\u0026gt;More\u0026gt;Connect more apps Search for \u0026ldquo;Colaboratory\u0026rdquo; Install the drive add on Starting new Google Colab Notebook In google drive, go to New\u0026gt;More\u0026gt;Google Colaboratory This opens up a fresh Google Colab Notebook in the drive directory you were currently in The file will be a .ipynb file and can be downloaded as a Jupyter Notebook to run on a local instance if needed (File\u0026gt;Download .ipynb) Importing Juypiter Notebook File In google drive, go to New\u0026gt;File Upload Double click the .ipynb file If it does not open the file with collabatory by default; right click\u0026gt;Open With\u0026gt;Google Collaboratory Installing Dependencies pip Install (Recommended) Google Colab comes with most standard packages by default but we can install additional packages using an exclamation mark. In Google Colab, the exclamation mark \u0026ldquo;!\u0026rdquo; is used for executing commands from the underlying operating system. This means that we can use this to execute the pip command and install packages for the current notebook. For example, we can install the standard packages from the Foldable Robotics Website by following the same process but adding the modifier \u0026ldquo;!\u0026rdquo;.\nRUN PIP INSTALL CODE BLOCK\nInstall standard packages\u0026hellip;\n!pip install meshio pygmsh ezdxf pandoc-fignos pandoc-eqnos pypdf4 service_identity ftd2xx pygithub twine paho-mqtt !pip install ntplib pygame pysftp pyserial Install foldable-robotics-specific packages.\n!pip install pypoly2tri idealab_tools foldable_robotics pynamics Manual Install A package can be manually installed by adding the .whl file to Google Drive and using the pip command on this file. For convenience, it is probably best to add it to the same directory as the Google Colab file in your drive. To pip install a .whl file we just have to run the pip command and referencing the path to that file.\nNote: To access a file stored in your Google Drive, your google drive must be mounted to the google Colab notebook. For details regarding mounting our drive see the \u0026ldquo;Mounting Drive to Google Colab\u0026rdquo; section.\nDO NOT RUN IF ALREADY RAN COD IN PIP INSTALL SECTION\nfrom google.colab import drive Where the drive will be mounted in the Colab notebook\nROOT = \u0026#39;/content/drive\u0026#39; Path to the file in YOUR DRIVE. Will be different for you\nFILE_PATH = \u0026#39;/MyDrive/GoogleColabExample/pynamics-0.0.8-py2.py3-none-any.whl\u0026#39; Accessing a file on your drive\ndrive.mount(ROOT, force_remount=True) # Mount the drive to this notebook with open(ROOT+FILE_PATH,\u0026#39;w\u0026#39;) as f: # Open the file in the drive !pip install f # Run the pip install command for the file This next command is to unmount my drive from th notebook so that it my personal files will not be made available if this Google Colab File is shared\ndrive.flush_and_unmount() Verifying Imported Packages RUN THIS COD BLOCK TO ENSURE ALL PACKAGES ARE INSTALLED\nimport pynamics from pynamics.frame import Frame from pynamics.variable_types import Differentiable,Constant from pynamics.system import System from pynamics.constraint import Constraint from pynamics.output import PointsOutput import sympy import numpy as np import matplotlib.pyplot as plt import scipy.optimize from math import pi If there are no errors in the output, the packages have been properly installed\nNote: Packages that do not come installed by default will have to be reinstalled using the pip command for each new notebook.\nMounting Drive to Google Colab** This section is only needed if you need to access external files that are located in your google drive\nIn order for your Google Colab notebook to have access to the files on your Google Drive, you must first \u0026ldquo;mount\u0026rdquo; your drive to the notebook. This process can only mount the top-level drive to a notebook and it will expose all the files in your drive to the Google Colab notebook until it is unmounted. Therefore, it is recommended to always follow mounting your drive with the unmount command if you do not wish to leave the entirety of your drive accessible by a Google Colab notebook. As long as the variable used to store the imported file is not overwritten later in the script, the imported object will remain saved in the notebook.\nNote: When running the \u0026ldquo;drive.mount(ROOT, force_remount=True)\u0026rdquo; mount command, it will ask for authorization to mount the drive associated with the selected google acount. The output of the code cell will provide instructions to complete this process.\nDisclaimer: Your drive will remain mounted to the Google Colab notebook until you unmount it. That means people with access to the notebook will be able to access your drive until it is unmounted. Once unmounted, another party will not be able to access your drive since they would need to perform the authorization process which requires a sign in from your google account.\nMounting and Unmounting a Drive Using a Code Block (Reccomended) from google.colab import drive Where the drive will be mounted in the Colab notebook\nROOT = \u0026#39;/content/drive\u0026#39; Path to the file in your drive. Will be different for you\nFILE_PATH = \u0026#39;/MyDrive/Folder1/Folder2/file\u0026#39; #FILE_PATH = \u0026#39;/Shareddrives/Folder1/Folder2/file\u0026#39; Mount the drive to this notebook\ndrive.mount(ROOT, force_remount=True) Append full path\nfull_path_to_file = ROOT+FILE_PATH ############################################ #### INSERT CODE TO PROCESS/IMPORT FILE #### # EX1 import csv data = csv.reader(full_path_to_file, delimiter=\u0026#39;,\u0026#39;) Example Code\n# EX2 import cv2 img = cv2.imread(full_path_to_file) #### INSERT CODE TO PROCESS/IMPORT FILE #### ############################################ Unmount Drive\ndrive.flush_and_unmount() As long as the variable used to import the file (data/img) is not overwritten or deleted, the variable can be used later in the code with an unmounted drive\nMounting and Unmounting a Drive Using the UI Alternatively, you can use the toolbar on the left to mount the drive to a notebook. This does not require account verification since you are accessing the notebook through your google account. If you do not have any code cells that mount a drive. This can be done by\nSelecting the files button (folder icon) Selecting the Mount Drive button (dark folder with google drive icon) Giving permission for the notebook to access your Google Drive Note: This is not recommended since you will have to manually unmount your drive (using the mount button again) or execute the unmount command in a code block.\nVersion Control Google Colab\u0026rsquo;s Revision History Google Colab has an integrated version control through the ability to view revision history. This is the same process as Google Docs in which you can restore any versions that have been automatically saved at regular intervals. You can view the revision history by going to:\nFile\u0026gt;Revision History\nPushing Google Colab Notebook to Github Also, there is a github integration that commits the file to our github repository which automatically does version control for us through its commit history functionality. To commit a google colab file to github:\nIn colab go to \u0026ldquo;File\u0026gt;Save Copy in Github\u0026rdquo;\nSign into your github account\nSelect the repository where you want your notebook to be saved by using the dropdown box\nYou can append subdirectories in the \u0026ldquo;File Path\u0026rdquo; dialog box by appending \u0026ldquo;folder_name/\u0026rdquo; to the notebook\u0026rsquo;s file name \u0026ldquo;file_name.ipynb\u0026rdquo;\u0026quot;\nEX: \u0026#34;folder/file_name.ipynb\u0026#34; Select \u0026ldquo;ok\u0026rdquo; and the github repository will be updated with the new notebook\nSubmitting Google Colab Notebook to Canvas Submitting a Compiled .ipynb File Download the Google Colab Notebook as a Jupyter Notebook file (.ipynb file). From the Google Colab notebook, select File\u0026gt;Download .ipynb Upload file to canvas Referencing images and files can be slightly different in the Colab notebook (through direct html link or mounted drive) than in Jupyter Notebook (can include by referencing local directory). To the best of my knowledge the notebooks should be functionally identical with the exception of the mounting system I would like to ensure that the a compiled Google Colab Notebook is acceptable for submission before moving forward with it Submitting a PDF File I am currently unaware of a way to easily print a Google Colab Notebook using MiKTeX or other LaTeX typesetting system. Google Colab has a print function that is able to generate a PDF through html but I would assume that this would not be up to submission standards.\nDownload the Google Colab Notebook as a Jupyter Notebook file (.ipynb file). From the Google Colab notebook, select File\u0026gt;Download .ipynb Open the downloaded file in a Jupyter Notebook Session Export the notebook as PDF. File\u0026gt;Download as\u0026gt; PDF via LaTeX (.pdf) Adding Images to Google Colab Notebook Directly Embedding Image using Copy \u0026amp; Paste Google Colab has a very useful of feature that is able to add an image to a text cell by pasting an image from your clipboard. Once an image is pasted, Google Colab will insert the proper syntax for displaying an image embed the raw image data directly into the notebook.\nNote: Although not required, it is reccomended to have a pasted image be in its own markdown cell. This is because the image data in text format is very large and can be difficult to move relative to other text in the same cell. This can be seen by editing the text cell for the image (double click image) in sections 8.1 and 8.2.\nCopy image from web, screenclipping, or other source Start a new text cell Paste the image Adding Custom Images from Google Drive without Mounting Full Tutorial on how to embed images\nAn alternative way to add a custom image to mounting your drive is to get a public link to an image saved on your drive. Once an image has been uploaded into your drive (does not matter where), follow the following steps:\nRight click the image in the drive\nSelect \u0026ldquo;Get Link\u0026rdquo;\nChange the sharing settings from \u0026ldquo;Restricted\u0026rdquo; to \u0026ldquo;Anyone with the link\u0026rdquo;\nPaste this link into a Google Drive Direct Link Generator (link to generator) or follow the steps below to find the direct link manually a. Paste the link into any text editor\n**EX:** https://drive.google.com/file/d/1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti/view?usp=sharing b. Copy the image ID (the long string of random alphanumeric characters)\n**EX:** img_id = 1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti c. Append to the direct image link url: https://drive.google.com/uc?export=view\u0026amp;id=\u0026quot;img_id\u0026quot;\n**EX** https://drive.google.com/uc?export=view\u0026amp;id=1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti Use markdown to display this image\n![Image Example](https://drive.google.com/uc?export=view\u0026amp;id=1jh9A3LRK8e3i982GhgzmRb4kYrvdTJti) ","permalink":"https://foldable-robotics.github.io/modules/python/google-colab-tutorial/","tags":null,"title":"Google Colab Documentation"},{"categories":null,"contents":"A popular way of deriving the desired kinematics of a device graphically has also been employed for centures.\nBy Hand Instructions Download the [part]({{ .site.Params.home }}/assets/graphical-synthesis/part2.sldprt)\nThe following instructions can be done by hand or with a tool like Solidworks. If you do it by hand you will need a ruler and straightedge.\nDraw a constant length line (the output link) in three different positions.\nJoint 1\nDraw a line from the left vertex of the output link in position 1 to the left vertex of the output link in position 2\nDraw a line from the left vertex of the output link in position 2 to the left vertex of the output link in position 3\nFind the perpendicular bisector of these two lines. Where they intersect is the location of joint 1\nJoint 2\nDraw a line from the right vertex of the output link in position 1 to the left vertex of the output link in position 2\nDraw a line from the right vertex of the output link in position 2 to the left vertex of the output link in position 3\nFind the perpendicular bisector of these two lines. Where they intersect is the location of joint 2\nLinks 1 and 3\nThe next step is to draw the coupling links.\nDraw lines from joint 1 to the left vertex of the output link in position 1, 2, and 3\nDraw lines from joint 2 to the right vertex of the output link in position 1, 2, and 3.\nMeasure the length of your output and coupliing links, as well as the distance between joint 1 and 2 (this is the base/fixed link). This is your four-bar design\nWith this design, a body will be guaranteed to move through these three positions.\nThis graphical synthesis method is simplified, because there are more design variables at your fingertips than this rudimentary method permits\u0026hellip;it just gets too complicated to solve for graphically.\nSolidworks Instructions Download the [part]({{ .site.Params.home }}/assets/graphical-synthesis/part1.sldprt)\nIf you want to use the ability of Solidworks to add constraints to objects, this can simplify the process. Below are the steps.\nCreate a new part\nSelect the top plane and create a new sketch\nDraw three lines\nSelect all three lines and add a constraint to make them equal length\nSelect the left vertex of each line and apply a \u0026ldquo;fixed\u0026rdquo; constraint\nStarting with the left vertex of each line segment, draw three lines that meet at a common point\nSelect all three lines and add an \u0026ldquo;equal length\u0026rdquo; constraint\nStarting with the right vertex of each line segment, draw three lines that meet at a common point\nSelect all three lines and add an \u0026ldquo;equal length\u0026rdquo; constraint\nEstablish three equal length constraints with the corresponding line segments\nAdd a fourth line segment and connect its left and right vertices to each of the common points.\nDimension the length of the line segment\nSelect and drag the new line segment. It should be able to move through each of the three positions you defined\n","permalink":"https://foldable-robotics.github.io/modules/kinematics/graphical-synthesis/","tags":null,"title":"Graphical Synthesis"},{"categories":null,"contents":"Hinges import shapely.geometry as sg from foldable_robotics.layer import Layer from foldable_robotics.laminate import Laminate import numpy Hinges are portions of a laminate device where the stiff material has been removed to permit the remaining flexible material to rotate.\nThe simplest hinge in a one-layer laminate is a perforated line\nradius = .01 num_perforations = 5 num_segments = num_perforations*2+1 num_points = num_segments+1 a=numpy.r_[0:1:num_points*1j] lines = [] for ii in range(int(len(a)/2)-1): p1 = sg.Point(a[2*ii+1]+radius,0) p2 = sg.Point(a[2*ii+2]-radius,0) lines.append(sg.LineString((p1,p2))) hinge = Layer(*lines) hinge\u0026lt;\u0026lt;=radius hinge.plot() When you remove a perforated line from a material, it produces a weakened joint along that line:\nbody = Layer(sg.box(0,0,1,1)) joint = body-hinge.translate(0,.5) joint.plot() In a multilayer laminate with a flexible center layer and two rigid outer layers, the simplest hinge is simply all the other layers removed except the flexible layer:\nline = Layer(sg.LineString(((0,0),(1,0)))) line\u0026lt;\u0026lt;=radius line.plot() multilayer_hinge = Laminate(line,line,Layer(),line,line) multilayer_body = Laminate(body,body,body,body,body) joint = multilayer_body - multilayer_hinge.translate(0,.5) joint.plot() Castellated Joints A castellated joint is often preferred because it permits tight radii of curvature. It puts stresses on the rigid layers, though\nnum_segments = 5 b1 = Layer(sg.box(0,0,1,1)) for ii in range(int(num_segments/2))[1:]: print(ii) b1|b1.translate(ii*2,0) b1.plot() 1 num_segments/2 2.5 list(range(int(num_segments/2))) [0, 1] ","permalink":"https://foldable-robotics.github.io/modules/manufacturing/generated/hinges/","tags":null,"title":"Hinges"},{"categories":null,"contents":"Assignment Overview The goal of this assignment is to learn about you, your background, and your interests and abilities.\nInstructions Fill out this survey ","permalink":"https://foldable-robotics.github.io/assignments/incoming-survey/","tags":null,"title":"Incoming Survey"},{"categories":null,"contents":"Rectangular parallelepiped/prism (a box) with length $a$, width $b$, height $c$\n$$V=abc$$\n$$I_{xx}=\\frac{1}{12}m(b^2+c^2)$$ $$I_{yy}=\\frac{1}{12}m(a^2+c^2)$$ $$I_{zz}=\\frac{1}{12}m(a^2+b^2)$$\n$$I_{xy}=I_{yz}=I_{zx}=0$$\nSolid Cylinder with radius $r$ and length $h$\n$$V=\\pi r^2 h$$\n$$I_{xx}=I_{yy}=\\frac{1}{12}m(3r^2+h^2)$$ $$I_{zz}=\\frac{1}{2}m(r^2)$$ $$I_{xy}=I_{yz}=I_{zx}=0$$\nThick-walled cylinder with inner radius $r_i$ and outer radius $r_o$ and length $h$\n$$V=\\pi (r_o^2-r_i^2) h$$\n$$I_{xx}=I_{yy}=\\frac{1}{12}m(3(r_o^2+r_i^2)+h^2)$$ $$I_{zz}=\\frac{1}{2}m(r_o^2+r_i^2)$$ $$I_{xy}=I_{yz}=I_{zx}=0$$\nThin-walled cylinder with radius $r$ and length $h$\n$$I_{xx}=I_{yy}=\\frac{1}{12}m(6r^2+h^2)$$ $$I_{zz}=m(r^2)$$ $$I_{xy}=I_{yz}=I_{zx}=0$$\nSolid Sphere with radius $r$\n$$V=\\frac{4}{3}\\pi r^3$$\n$$I_{xx}=I_{yy}=I_{zz}=\\frac{2}{5}mr^2$$ $$I_{xy}=I_{yz}=I_{zx}=0$$\nThin Hollow Sphere with radius $r$\n$$I_{xx}=I_{yy}=I_{zz}=\\frac{2}{3}mr^2$$ $$I_{xy}=I_{yz}=I_{zx}=0$$\nSolid Ellipsoid with axis lengths $a$, $b$, and $c$\n$$V=\\frac{4}{3}\\pi abc $$\n$$I_{xx}=\\frac{1}{5}m(b^2+c^2)$$ $$I_{yy}=\\frac{1}{5}m(a^2+c^2)$$ $$I_{zz}=\\frac{1}{5}m(a^2+b^2)$$\n$$I_{xy}=I_{yz}=I_{zx}=0$$\nThin Hollow Ellipsoid with axis lengths $a$, $b$, and $c$\n$$I_{xx}=\\frac{1}{3}m(b^2+c^2)$$ $$I_{yy}=\\frac{1}{3}m(a^2+c^2)$$ $$I_{zz}=\\frac{1}{3}m(a^2+b^2)$$\n$$I_{xy}=I_{yz}=I_{zx}=0$$\n","permalink":"https://foldable-robotics.github.io/modules/dynamics/inertias-for-common-shapes/","tags":null,"title":"Inertias for common shapes"},{"categories":null,"contents":"Assignment Overview The goal here is to verify you have CAD installed correctly.\nResources Installing Anaconda Python Tutorial Add folder to system path (Windows) Instructions","permalink":"https://foldable-robotics.github.io/assignments/install-cad/","tags":null,"title":"Install CAD"},{"categories":null,"contents":"Introduction Python is essential for Foldable Robotics. This task leads you through installing the Anaconda Python Distribution. Completing this task will ensure you have the basic packages installed to use Python in the course.\nResources Installing Anaconda Python Tutorial Add folder to system path (Windows) Using Jupyter Notebook Google Colab Tutorial Installing Anaconda Read the entire assignment before starting.\nFollow the instuctions in the Installing Anaconda Python Tutorial for installing the anaconda distribution of python.\nDownload the windows build for ffmpeg, a common video encoder. Unzip and move it into a new root-level folder called \u0026ldquo;c:/binaries\u0026rdquo; or similar. Add this folder to your system path\nOpen up jupyter notebook. In windows 10, type \u0026ldquo;windows+x\u0026rdquo; and then select Windows Powershell or Command Prompt. In the window that opens, type:\njupyter notebook if installed correctly, a browser window should eventually pop open\nCreate a new python 3 notebook.\nPractice creating text/code cells, navigating between cells, running cells, copying and pasting, etc\nskip the next section unless you also want to try Colab\nInstructions for Colab If you decide to use Colab instead, you can skip the first two sections\nGo to https://colab.research.google.com and create a new python 3 notebook.\nPractice creating text/code cells, navigating between cells, running cells, copying and pasting, etc\nCreate a code cell at the top and enter:\n!pip install foldable_robotics idealab_tools shapely pynamics this will install packages that are not commonly installed in colab.\nCommon Instructions The rest of the instructions can be followed whether you are using Jupyter Notebook or Colab.\nIn the next code cell, add\n## EGR557: Install Python Full Name Change the cell type to markdown(Jupyter) or text(Colab) and hit \u0026ldquo;shift+enter\u0026rdquo; to compile\nCreate a new code cell and enter the following:\nfrom matplotlib import animation, rc from IPython.display import HTML import shapely import idealab_tools import foldable_robotics import pynamics import pynamics_examples.pendulum_2_ways Run that code by hitting shift+enter. Some information should pop out, along with a blank plot. There should be a new code window below the first. In this window, enter:\npynamics_examples.pendulum_2_ways.points_output.animate(fps = 30,lw=2) HTML(pynamics_examples.pendulum_2_ways.points_output.anim.to_html5_video()) Run the code.\nEnter and run this last snippet\nfrom foldable_robotics.laminate import Laminate from foldable_robotics.layer import Layer import shapely.geometry as sg box = sg.box(-2,-1,2,1) box = Layer(box) circle =sg.Point((0,0)) circle = Layer(circle)\u0026lt;\u0026lt;1.5 lam = Laminate(box,circle) lam.plot() Test saving your results as a pdf. Did it work? If not you may need to install Miktex (see the software list document).\nSuggestions If you already have Python installed, it may not be what you need. We need the most up-to-date version of the Anaconda distribution with specific packages installed.\nYou can update anaconda from the commandline or powershell with the following command:\nconda update --all Make sure you add anaconda to the system path in the installer\nSubmission No Submission Required\n","permalink":"https://foldable-robotics.github.io/assignments/install-python/","tags":null,"title":"Install Python"},{"categories":null,"contents":"Introduction Anaconda is a distribution of Python that includes the ability to manage packages using the conda package manager as well as the ability to create and manage environments, or collections of packages that work together. Anaconda ships as a ~500 Mb installer. This tutorial gets you started with miniconda, a slimmed down installer that allows you to install just the packages you need. Below are the steps to gettting a working installation of Python with all the packages you need for Foldable Robotics.\nThis tutorial is for installing the anaconda python distribution on windows.\nWindows Installation These installation instructions are for computers that do not have Python or Anaconda installed already. Python and Anaconda do not come installed by default on most computers so if you haven\u0026rsquo;t installed them intentionally, these instructions likely apply to you. If you do have another version of Python installed, then please ask Dr. Aukes for further details.\nAnaconda Instructions Note: These instructions are for the smaller \u0026ldquo;Miniconda\u0026rdquo; distribution, that includes only the conda package manager that you can use to install only the packages that you want. You can also install the full Anaconda distribution, and follow the same basic instructions.\nDownload and install miniconda (win64 quick link) with the following options:\nInstall for \u0026ldquo;Just for Me\u0026rdquo;\nAccept the the default directory (e.g., C:\\ProgramData\\Miniconda3 )\nKeep the options page default, ensuring the \u0026ldquo;Register Miniconda3 as the system Python\u0026rdquo; box is checked\nComplete the installation\nUpdate Conda. In Windows, go to the search bar and type \u0026ldquo;anaconda\u0026rdquo;. Once you see the \u0026ldquo;Anaconda Prompt\u0026rdquo; app in the list, click on it.\nWhen the terminal opens, paste each of the following lines (one at a time) at the command prompt and press enter:\nconda update --all Install course-specific packages\nExternal Resources Managing Conda Environments ","permalink":"https://foldable-robotics.github.io/modules/python/installing-anaconda-python/","tags":null,"title":"Installing Anaconda"},{"categories":null,"contents":"Windows Instructions These instructions are for installing Git along with Git Extensions, a nice GUI for working with repositories.\nDownload and install Git keep default install location I prefer to disable shell integration I prefer to use notepad++ as a text editor, but you must install it separately. keep \u0026ldquo;git from the command line and also from 3rd-party software\u0026rdquo; use openssh use openssl checkout windows-style, commit unix-style use mintty on the next page, check enable file system caching enable git credential manager Install Download and install Kdiff. Keep all options default. Download and install git extensions. install for all users keep default install location Keep all options default keep putty as default. select a language(english) set your username and password in the git extensions settings window that pops up Ubuntu Instructions (Command line only) Open up a terminal window (ctrl+alt+t) Paste the following code(substituting in your name and email) to install git. sudo apt-get install -y git git config --global user.name \u0026#34;LastName, Firstname\u0026#34; git config --global user.email \u0026#34;email@address.com\u0026#34; ","permalink":"https://foldable-robotics.github.io/modules/misc/installing-git/","tags":null,"title":"Installing Git"},{"categories":null,"contents":"import pynamics from pynamics.system import System from pynamics.frame import Frame import sympy system = System() pynamics.set_system(__name__,system) Heading Text\na,b,c=sympy.symbols(\u0026#39;a b c\u0026#39;) N = Frame(\u0026#39;N\u0026#39;,system) A = Frame(\u0026#39;A\u0026#39;,system) B = Frame(\u0026#39;B\u0026#39;,system) A.rotate_fixed_axis(N,[0,0,1],a,system) B.rotate_fixed_axis(A,[0,1,0],b,system) R_BA = B.get_r_from(A) R_AN = A.get_r_from(N) R_BN = B.get_r_from(N) R_BA*R_AN Matrix([ [cos(a)*cos(b), sin(a)*cos(b), -sin(b)], [ -sin(a), cos(a), 0], [sin(b)*cos(a), sin(a)*sin(b), cos(b)]]) R_BN Matrix([ [cos(a)*cos(b), sin(a)*cos(b), -sin(b)], [ -sin(a), cos(a), 0], [sin(b)*cos(a), sin(a)*sin(b), cos(b)]]) v1 = 3*A.x+2*N.z v1.express(N) 3*N.x*cos(a) + 3*N.y*sin(a) + 2*N.z v2 = 7*N.z+4*A.y v2 4*A.y + 7*N.z v1.dot(v2) 14 10*A.x+5*B.x 10*A.x + 5*B.x v1.dot(v1) 13 v1.length() 3.60555127546399 v3 = v1.cross(v2) from math import pi v4 = v3.express(N).subs({a:30*pi/180}) v4 3.57179676972449*N.x - 22.1865334794732*N.y + 12*N.z v4x = v4.dot(N.x) v4x 3.57179676972449 ","permalink":"https://foldable-robotics.github.io/modules/python/generated/intro-to-jupyter-notebook-and-pynamics/","tags":null,"title":"Intro to Jupyter Notebook and Pynamics"},{"categories":null,"contents":"Overview The purpose of this exercise is to get used to working with shapely polygons and to use it to compute some manufacturing geometry. It is your job to determine how to compute the cut files using Python, shapely, and the foldable_robotics package\nRubric Description Points Steps 152 Discussion 48 Total 200 Resources The Shapely User Manual Foldable robotics package repository on GitHub foldable robotics package documentation Instructions Note 2: Please update your foldable robotics package with the following commands before starting:\npip uninstall foldable_robotics pip install --force-reinstall --no-cache-dir --upgrade foldable_robotics Note: Display the result of each step inline with your code. This can be done in the following way:\na = Polygon(...put your arguments in here...) a #the result will plot in your jupyter notebook Import shapely.geometry, foldable.layer, foldable.laminate, and foldable.manufacturing modules for using various shapely geometries, Layer(), and Laminate() classes, as well as for performing advanced computations.\nimport shapely.geometry as sg from foldable_robotics.layer import Layer from foldable_robotics.laminate import Laminate Create a square polygon a using a shapely polygon class, with length and width equal to 1.\nNote: try using the Polygon class itself. You can create a polygon by supplying a list of points.\nresult = sg.Polygon([[x1,y1],[x2,y2],...]) Initialize a new Layer() b using polygon a.\nTranslate b by a quantity (1.1,0), union with b and save as d.\nCreate a new geometry e by dilating d by a value of 0.2 (try the methods .buffer(), .dilate(), as well as the operator \u0026lt;\u0026lt;). Create a new geometry f by eroding e by the same value used in the previous step (try the methods .buffer(), .erode(), as well as the operator \u0026gt;\u0026gt;). Compose a new Laminate() g consisting of d,f,and d, in that order from bottom(first) to top. Using a for loop to index through all the layers of g, create a new Layer() h consisting of a union of all the layers of g. Find a function within the Layer() class that will turn your layer h directly into a new three-layer laminate j. dilate j by 0.25 and save as k. dilate j by 0.50 and save as l. Find a function within the Laminate() class that will find the bounding box of l and save it as m remove k from m and save as n remove g from j and save as o dilate o by .26 and save as p remove j and p from k and save as q. Use the .plot() method to view the result in more detail. combine g, n, and q, and save as r. Individually plot each layer of the resulting laminate (There is a helper method for this inside the laminate class.) dilate j by .02, subtract j from the result, and save as s. remove s from r and save as t. Use the .plot() method to view the result in more detail. Discussion For the purposes of this discussion, assume that g is the desired laminate geometry you wish to create\u0026hellip;the \u0026ldquo;laminate mechanism\u0026rdquo;.\nIdentify what happens when you dilate and then erode d by .1. How could this functionality be useful? What are the smallest dilate/erode values where this behavior is seen, and how is it related to the gap between polygons? Does f look any different from h? What could be the purpose (considering manufacturing) of using g to generate h rather than just using f directly? Please explain the purpose of creating j and k from the perspective of the laminate manufacturing process you have recently observed? What is the manufacturing purpose of n? What is the manufacturing purpose of q? What does s represent, and what does it produce in the the resulting t, from a manufacturing perspective? Submission Please include a Jupyter notebook with the following:\nDetailed description of the completed steps above (included as blocks alongside chunks of related code) Code used in solving the problem (inline in the report in code blocks), along with descriptions detailing your approach Answers to all discussion questions above. Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document with the accompanying jupyter notebook (.ipynb). Make sure the notebook is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\n","permalink":"https://foldable-robotics.github.io/assignments/shapely/","tags":null,"title":"Intro to Manufacturing Computation"},{"categories":null,"contents":"One thing I really like about python is that it is based on good programming practice . if you\u0026rsquo;ve ever looked at python help tutorials online, you\u0026rsquo;ll see the term \u0026ldquo;pythonic\u0026rdquo;. The Zen of python by Tim Peters is copied below\nThe Zen of Python, by Tim Peters1\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren\u0026rsquo;t special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one\u0026ndash; and preferably only one \u0026ndash;obvious way to do it.\nAlthough that way may not be obvious at first unless you\u0026rsquo;re Dutch.\nNow is better than never.\nAlthough never is often better than right now.\nIf the implementation is hard to explain, it\u0026rsquo;s a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea \u0026ndash; let\u0026rsquo;s do more of those!\nPerhaps many of the things I like about python are the things that make it different from other languages. one of the things I don\u0026rsquo;t like about see or C plus plus is how every single line needs to have a semicolon at the end. python make the assumption that because there\u0026rsquo;s a carriage return, that\u0026rsquo;s the end of the statement. Singly, code blocks in Python are indicated by fewer or more tabs. If you are putting code inside a code block that goes in an if statement, see your cplusplus requires beginning and ending characters to indicate where the code black begins and ends. Tabs and spaces are simply window dressing to make the code more readable. Python, on the other hand, uses those window dressing characters as the logic. To me this saves time. Once you get used to it.\nOne of the more difficult things to learn when you\u0026rsquo;re getting used to python is the fact that functions and classes can take variable numbers and types of inputs when you declare them the first time. The same function can take in a float or an int or another class just as easily; only when you start to use the data inside that variable do errors pop up. This implicit model for how variables are used within code has several results. First, it means that you don\u0026rsquo;t have to think through your code before you write it. This can be good or bad. By not having to declare the type of the variable that you\u0026rsquo;re using, it means that the same function or class can be useful in many different ways as your project involves, but it also means that the same function can break when using it with different variable types. often, this is much later than when you wrote the code first time, meaning that you\u0026rsquo;re dead bugging something that you thought already worked much later. However, on the flip side, this means that you\u0026rsquo;re able to write code that remains flexible for a very long time, even if you wrote it during the prototyping stage when you didn\u0026rsquo;t exactly know what the structure or format of your final data structures would be. This permits rapid creation of code that remains fairly robust through its life. As I use Python for research purposes primarily and less in a production environment with clients or users who depend on reliability, I appreciate this flexibility and the relative long-life of the code that I write.\nTo me, one of the more controversial design decisions in Python works is that permits access to from wherever you are to wherever you want to look. There are very few restrictions on how to get data from other data types, classes, etc. This makes python very flexible, but for novices who don\u0026rsquo;t know best practice, it permits the same type of mistakes that you see in other scripted languages. Structuring classes and the flow and exchange of data between classes and other object-oriented types has been one of the steepest learning Curves in my learning a python. However, in the words of Peter Parker\u0026rsquo;s uncle, with great power comes great responsibility. python give you the power to make poor design decisions, and through the mistakes that you make while you\u0026rsquo;re learning it, you learn best practice on the Fly. There are many resources out there on the web that will Guide you on idiomatic python, or best programming practices\nanother thing that python does really well is permit access to structured data at a higher level than other low level programming languages. Included in its base data types are things such as lists, two bulls, dictionaries. within it language and syntax are ways of entering data into those data types and extracting data from those data types much more efficiently than other languages that do not assume higher order data.\nJust as functions put no restriction on what type of data is used within a variable, neither do higher order data types. unlike arrays in C or C plus plus, the data inside a list can be anything. You can have lists of integers, floats, classes, or a mix of all of those things. The same goes for tuples and dictionaries.\nOne of the things that I try to practice when I\u0026rsquo;m writing python code is that my code should be legible without comments. Of course, this is a goal and never truly realized in practice, but I believe that many of the characteristics of python itself permit much more legible code. In terms of variable naming, there are a couple best practices which help identify what the object is that you\u0026rsquo;re working with.\nFunctions methods and attributes should use lower case naming conventions with an underscore between words.\nClasses should use camel case\nConstants can be name blank variables or you can use all caps\nSome other best practices include:\nFour spaces per indentation. Tab characters should not be used in Python code. instead use four space characters to represent a tab. I don\u0026rsquo;t know why, but this is most likely due to different conventions between operating systems and how tabs are used between them. Good python editors will add spaces instead of tab characters when you hit the tab key.\nTabs and spaces shouldn\u0026rsquo;t be mixed\nthere should be blank lines separating important chunks of code\nOne of the other conventions that I don\u0026rsquo;t like to follow is that code should be no more than 80 characters long. I don\u0026rsquo;t follow this, typically because modern monitors are much larger and fit more text, making the size of the viewable windows that you see today much wider than when this rule was created\nbacksplashes, which permit you to run over a single line, can be used but shouldn\u0026rsquo;t be used\nPython blends many of the best parts of a scripted language with the speed of compiled languages. Python can load dlls and modules written and compiled other languages, Meaning that you can separate low-level high-speed code from the organizational code surrounding it. I thought was very good for organizing your thoughts and for exchanging data between high-speed lower-level functions in classes.\nLet\u0026rsquo;s take a look at why I like Python better than that loud Matlab. while both are supported languages, and both permit rapid creation of code, pythonic cells for a couple specific reasons.\nReason #1: Free First, it\u0026rsquo;s free. This accessibility means that anyone can download and run it on almost any computer. the downside is that it is hard to install in operating systems like Windows.\nThe free nature of python does have some negative implications, many of which are getting better. while help is almost never free, python makes it easy to document your code, and the most highly-regarded code is also the most well-documented. In terms of obtaining distributions of code, modern Python has also built in a set of tools for installing and updating python packages from the pypi repository. this Functionality has grown with the transition from python 2 to 3, and some of the conventions imposed by the PIP tools are making things easier than they used to be.\nWhile the python executable installer is not typically the problem, the problem is in many of the packages that need to be used on Windows machines. solve this problem, I have typically turned two distributions a python. Distributions are compiled sets of packages that are produced typically by a company, who then support their distributions for commercial applications with support and Consulting. There are three distributions that I\u0026rsquo;ve used, the Anaconda distribution, a set of compiled packages produced by Christopher Gohlke, and the enthought python distribution.\nAnaconda I\u0026rsquo;ve used Anaconda for only a short time, but at this point it seems to be the easiest way to get python \u0026ndash; and all the scientific package you need for it \u0026ndash; installed on your computer regardless of operating system. Anaconda is a distribution of python with a installer and updater called \u0026ldquo;conda\u0026rdquo; which helps keep everything a bit better maintained than the alternatives(pip / pypi / gohlke / homebrew were my previous solutions, for windows and mac). It doesn\u0026rsquo;t have everything, but it plays nice with installers like pip, for example, and gives you a lot of control over how you install your packages for different problems. It also allows you to install multiple versions of python in different environments, creating a nice sandbox to play in to keep projects small and self-contained.\nI prefer to install miniconda and then create a custom environment for different projects. Install instructions can be found in the tutorials.\nAnother nice thing about Anaconda is that it ships with the IPython interpreter, which is the basis for the Jupyter notebook. Jupyter is a much more visual, interactive version of python, which permits web-based development(with all or many of the bells and whistles you have come to expect in other languages, like tab-completion), and rapid visualization of your results. One of the best things is that it permits the use of markdown cells within your code to produce highly-readable examples for, for example, books like this. We will be using Jupyter a lot.\nReason #2: Licensing Usability comes in many forms, and because I\u0026rsquo;m a researcher And because I\u0026rsquo;m a researcher, I am off and doing my work on the road or away from my desk. Matlab licensing strategies include some which mean that you have to be tied to the network you\u0026rsquo;re using it on, making it infeasible to use on particular days of travel. Python has no such restrictions\nGUIs Similarly there are many GUIs out there, but far and away my longstanding favorite is spyder. Spyder is included in the Anaconda distribution by default. This is one of the reasons why I have selected Anaconda over enthought\u0026rsquo;s more recent distributions. spider Features and environment which would be familiar to Legacy Matlab users. A code window permits the entry of scripts or file based modules, while a command line window permits those scripts or files to be run or executed, and for the user to interact with the data that gets produced at the end. this back and forth between code writing and interacting is critical in the prototyping process that I use when constructing new Python code.\nReason #3: Object-oriented support One thing in the great Matlab vs. python debate is the ease with which you can create object-oriented code. Historically Matlab has encouraged scripting, forcing you to create a new file every time you want to write a new reusable function. Classes enforce a file naming convention when you want to use them. While classes are easier to create and use now in Matlab than they have been in the past, python puts no impediments in your way when trying to structure your code the way you want. Again, with the downside that novice python programmers often the wrong Structural decisions initially.\nMore Reasons: Another admittedly small thing that I like about python is that it uses 0-based indexing versus 1-based indexing. For me, this has meant fewer times when I have to add or subtract 1 from an indexing variable, or have indexing errors. Python\u0026rsquo;s indexing works just as well in the forward direction as it doesn\u0026rsquo;t reverse, meaning that I can start from any index and go to the end of a list or go to any point at the end of a list.\nhttp://docs.python-guide.org/en/latest/writing/style/\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://foldable-robotics.github.io/modules/python/why-python/","tags":null,"title":"Intro to Python"},{"categories":null,"contents":"A Jacobian is a matrix that collects the partial derivatives of rates of change between two vectors. These rates of change are related by\n$$\\dot{a}=\\mathbf{J}\\dot{b}$$\n$$\\mathbf{J}= \\left[\\begin{matrix} j_{11} \u0026amp; j_{12} \u0026amp; \\ldots \u0026amp; j_{1n} \\\\ j_{21} \u0026amp; j_{22} \u0026amp; \\ldots \u0026amp; j_{2n} \\\\ \\vdots \u0026amp; \\vdots \u0026amp; \\ddots \u0026amp; \\vdots \\\\ j_{m1} \u0026amp; j_{m2} \u0026amp; \\ldots \u0026amp; j_{mn} \\\\ \\end{matrix} \\right]$$\nwhere $j_{ij} = \\frac{\\partial \\dot{a}_i}{\\partial \\dot{b}_j}$\nPhysical Meaning $$\\dot{q}_2 = J\\dot{q}_1$$ $$\\tau_1 = J\\tau_2$$ $$J = \\frac{r_1}{r_2}$$\nJacobian $$\\dot{x} = \\mathbf{J} \\dot{q}$$ $$\\left[\\begin{matrix}\\dot{x}\\\\ \\dot{y}\\end{matrix}\\right] = \\mathbf{J} \\left[\\begin{matrix}\\dot{q}_1\\\\ \\dot{q}_2\\end{matrix}\\right]$$\nVirtual Work $$P_{in} = P_{out}$$ $$P_{in} = \\tau^T \\dot{q} = F^T \\dot{y}=P_{out}$$ $$\\tau^T \\dot{q} = F^T \\mathbf{J}\\dot{q}$$ $$\\tau^T = F^T \\mathbf{J}$$ $$\\tau = \\mathbf{J}^T F$$\nTorques and Forces Forces applied at the end-effector can be related kinematically to torques felt by the motors using the Jacobian\n","permalink":"https://foldable-robotics.github.io/modules/kinematics/jacobians/","tags":null,"title":"Jacobians"},{"categories":null,"contents":" Frames Frame A\n$$ {}^{N}{}{\\vec{\\omega}}^{A}{} = \\dot{\\theta} \\hat{n}_z= \\dot{\\theta} \\hat{a}_z $$\nVelocity if point $p$\u0026rsquo;s position is represented by $\\vec{r}$ where\n$$ \\vec{r} = -l\\hat{a}_y $$ then from the example in the derivatives module, we know that $$ \\vec{v} = \\frac{ {}^{N}{}{ d\\vec{r}}{}{}}{dt}= l\\dot{\\theta}\\hat{a}_x $$\nand $$ \\vec{a} = l\\ddot{\\theta}\\hat{a}_x + l\\dot{\\theta}^2\\hat{a}_y $$\nSpeed Variables In this system our speed variable is $\\dot{\\theta}$\nForces There are a number of forces acting within the system\nTwo tension forces, one at point $p$ one at point $o$. These may be considered internal forces if modeled correctly One gravity force acting on point $p$ Partial Velocities\npartial velocity of particle $v_{p1} = v$ partial velocity of f1, f2,f3 $v_{f1} = 0$ $v_{f2} = v$ $v_{f3} = v$ Generalized effective force of a particle $$ {}^{N}{}{F}{Q}{u_r} = \\frac{\\partial{^N\\vec{v}^Q}}{\\partial u_r} \\cdot \\left(m^Q* {}^{N}{}{\\vec{a}}^{Q}{}\\right) $$\nKane\u0026rsquo;s Equation for a system of particles and masses for speed variable $u_r$, $m$ forces, $n$ moments, $o$ particles, and $p$ bodies $$ \\sum_{i=1}^{m}{\\vec{f}i} \\cdot \\frac{\\partial\\vec{v}{\\vec{f}i}}{\\partial u_r} + \\sum{j=1}^{n}{\\vec{\\tau}j} \\cdot \\frac{\\partial\\vec{\\omega}{\\vec{\\tau}j}}{\\partial u_r} = \\sum{k=1}^{o}\\frac{\\partial\\vec{v}{k}}{ \\partial u_r} \\cdot m{k}\\vec{a}{k} + \\sum{l=1}^{p}\\left( \\frac{\\partial\\vec{v}{l}}{\\partial u_r} \\cdot m{l}\\vec{a}{l} + \\frac{\\partial\\vec{\\omega}{l}}{\\partial u_r} \\cdot \\left( \\overrightarrow{I}_{l}\\cdot\\vec{\\alpha}_l\n\\vec{\\omega}l \\times \\overrightarrow{I}{l}\\cdot\\vec{\\omega}_l \\right) \\right) $$ Example 1 This example uses $\\vec{r}=l\\hat{a}_y$ as the position vector for describing particle p\u0026rsquo;s position\n%matplotlib inline # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Written by Daniel M. Aukes Email: danaukes\u0026lt;at\u0026gt;gmail.com Please see LICENSE for full license. \u0026#34;\u0026#34;\u0026#34; import pynamics from pynamics.frame import Frame from pynamics.variable_types import Differentiable,Constant,Variable from pynamics.system import System from pynamics.body import Body from pynamics.dyadic import Dyadic from pynamics.output import Output,PointsOutput from pynamics.particle import Particle import pynamics.integration import sympy import numpy import matplotlib.pyplot as plt plt.rcParams[\u0026#34;animation.html\u0026#34;] = \u0026#34;html5\u0026#34; plt.ion() from math import pi from matplotlib import animation, rc from IPython.display import HTML system = System() pynamics.set_system(__name__,system) lA = Constant(1,\u0026#39;lA\u0026#39;,system) mA = Constant(1,\u0026#39;mA\u0026#39;,system) g = Constant(9.81,\u0026#39;g\u0026#39;,system) tinitial = 0 tfinal = 5 fps = 30 t = numpy.r_[tinitial:tfinal:1/fps] tol=1e-12 qA,qA_d,qA_dd = Differentiable(\u0026#39;qA\u0026#39;,system) initialvalues = {} initialvalues[qA]=0*pi/180 initialvalues[qA_d]=0*pi/180 ini = [initialvalues[item] for item in system.get_state_variables()] N = Frame(\u0026#39;N\u0026#39;) A = Frame(\u0026#39;A\u0026#39;) system.set_newtonian(N) A.rotate_fixed_axis_directed(N,[0,0,1],qA,system) pO = 0*N.x pNA=lA*A.x ParticleA = Particle(pNA,mA,\u0026#39;ParticleA\u0026#39;,system) system.addforcegravity(-g*N.y) f,ma = system.getdynamics() 2020-12-16 08:35:57,486 - pynamics.system - INFO - getting dynamic equations f [-g⋅lA⋅mA⋅cos(qA)] ma ⎡ 2 ⎤ ⎣lA ⋅mA⋅qA_dd⎦ func = system.state_space_post_invert(f,ma) 2020-12-16 08:35:57,571 - pynamics.system - INFO - solving a = f/m and creating function 2020-12-16 08:35:57,571 - pynamics.system - INFO - substituting constrained in Ma-f. 2020-12-16 08:35:57,671 - pynamics.system - INFO - done solving a = f/m and creating function states=pynamics.integration.integrate(func,ini,t,rtol=tol,atol=tol,args=({\u0026#39;constants\u0026#39;:system.constant_values},)) 2020-12-16 08:35:57,972 - pynamics.integration - INFO - beginning integration 2020-12-16 08:35:57,972 - pynamics.system - INFO - integration at time 0000.00 2020-12-16 08:35:58,219 - pynamics.integration - INFO - finished integration points = [pO,pNA] points_output = PointsOutput(points,system) points_output.calc(states) points_output.animate(fps = fps,lw=2) 2020-12-16 08:35:58,241 - pynamics.output - INFO - calculating outputs 2020-12-16 08:35:58,250 - pynamics.output - INFO - done calculating outputs del A,N,ParticleA,system, qA,qA_d,qA_dd,ini,states,t,tfinal,tinitial,tol del pO,pNA del lA,g,mA del f,ma del points Example 2 This example uses $\\vec{r}= x\\hat{n}_x + y\\hat{n}_y$ as the position vector for p. This requires an added constraint to maintain the length of r, as in $|\\vec{r}|=l_A$\nsystem = System() pynamics.set_system(__name__,system) lA = Constant(1,\u0026#39;lA\u0026#39;,system) mA = Constant(1,\u0026#39;mA\u0026#39;,system) g = Constant(9.81,\u0026#39;g\u0026#39;,system) tinitial = 0 tfinal = 5 fps = 30 t = numpy.r_[tinitial:tfinal:1/fps] tol=1e-12 x,x_d,x_dd = Differentiable(\u0026#39;x\u0026#39;,system) y,y_d,y_dd = Differentiable(\u0026#39;y\u0026#39;,system) initialvalues = {} initialvalues[x]=1 initialvalues[x_d]=0 initialvalues[y]=0 initialvalues[y_d]=0 ini = [initialvalues[item] for item in system.get_state_variables()] N = Frame(\u0026#39;N\u0026#39;) system.set_newtonian(N) pO = 0*N.x pNA=x*N.x+y*N.y ParticleA = Particle(pNA,mA,\u0026#39;ParticleA\u0026#39;,system) system.addforcegravity(-g*N.y) eq = [] eq.append(pNA.length() - lA) eq_d=[(system.derivative(item)) for item in eq] eq_dd=[(system.derivative(item)) for item in eq_d] f,ma = system.getdynamics() 2020-12-16 08:35:58,873 - pynamics.system - INFO - getting dynamic equations f [0, -g⋅mA] ma [mA⋅x_dd, mA⋅y_dd] func = system.state_space_post_invert(f,ma,eq_dd) 2020-12-16 08:35:58,958 - pynamics.system - INFO - solving a = f/m and creating function 2020-12-16 08:35:58,958 - pynamics.system - INFO - substituting constrained in Ma-f. 2020-12-16 08:35:59,021 - pynamics.system - INFO - done solving a = f/m and creating function states=pynamics.integration.integrate(func,ini,t,rtol=tol,atol=tol,args=({\u0026#39;constants\u0026#39;:system.constant_values},)) 2020-12-16 08:35:59,043 - pynamics.integration - INFO - beginning integration 2020-12-16 08:35:59,043 - pynamics.system - INFO - integration at time 0000.00 2020-12-16 08:35:59,290 - pynamics.system - INFO - integration at time 0003.90 2020-12-16 08:35:59,359 - pynamics.integration - INFO - finished integration points = [pO,pNA] points_output2 = PointsOutput(points,system) points_output2.calc(states) points_output2.animate(fps = fps,lw=2) 2020-12-16 08:35:59,376 - pynamics.output - INFO - calculating outputs 2020-12-16 08:35:59,388 - pynamics.output - INFO - done calculating outputs HTML(points_output.anim.to_html5_video()) Your browser does not support the video tag. HTML(points_output2.anim.to_html5_video()) Your browser does not support the video tag. ","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/07-kanes-method/","tags":null,"title":"Kane's method"},{"categories":null,"contents":"Prototyping in Paper A second step is to ideate, mock-up, and prototype candidate mechanisms in paper.\nWhile experts may have other tools, like CAD, along with intuition and experience, a novice can gain quick physical intuition by developing families of paper prototypes that help to eliminate infeasible designs, giving clues as to how to alter or optimize a design, and can often result in a very close-to-final kinematic structure. This is also the part of the process which requires the most intuition, creativity, and perseverance.\nSo what I do I mean by prototyping in paper? Do I mean go get a book on origami? No. Do I mean to use printer paper? Not necessarily. For me, paper is cheap, easy to work with using inexpensive tools, and can take you really really far down the path of making a novel and interesting mechanism. It can sometimes get you the whole way. But there can be pitfalls to prototyping in paper; there are a couple things you should know.\nSo how do you do it? First, break every rule you can think of. Get out paper, tape, cardboard, scissors, a stapler, glue, pins, ruler, etc. whatever you think will help you make things fast, break things that don\u0026rsquo;t work, and try again without starting over. We\u0026rsquo;ll figure out exactly what you made later.\nAs a note, I often suggest that to gain true intuition of how a mechanism will work, try to avoid one common error: don\u0026rsquo;t move the output. Moving the output of a poorly defined device often is perfectly able to achieve the motion you are trying to attain. Paper links bend to your will, the complexity of the motion is handled gracefully by the stiffness balance of your creased hinges, and complexity is hidden. Now try to move the input and see if you can recreate that beautiful output motion. Harder, no? Humans are quite adept at simplifying quite difficult kinematic problems with their hands, eyes, and brains, but can\u0026rsquo;t ignore them if they deal only with input motions.\nWhat are the rules?\nMake the joints weaker than the links. This is easy to understand. If you are trying to make a jointed mechanism, you don\u0026rsquo;t want your mechansim to be the stiff parts If you want a big robot you\u0026rsquo;ll need thicker paper Paper is forgiving. If you move to stiffer stuff, it may not work the same. Do you want joints to spring back, or not? Put a tangerine in the center of your robot. Does it fall? Then you may need to go stiffer How do you go stiffer? Common Kinematics Series kinematics devices whose joints connect end-to end to create motion at the tip of something. Think your arm extending from body through shoulder down your upper arm to your elbow, along your lower arm to your wrist and all the way to your fingertip.\nParallel mechanisms are devices which connect to each other in a loop. Think the piston of a locomotive, the\nPlanar\nFour-bar linkages\nFour-Bar linkages are a class of linkages long studied and used in mechanical systems to trace complex prescribed paths. These systems are one DOF, or degree-of-freedom systems, because the motion of one link determines the motion of all others(we always ground one linkage to not move.)\nMany interesting four-bar linkages have been designed. The interesting thing is that the design of these systems is determined by only four values(and really three if you think about it). The lengths of your four linkages are all that determine the motion of your output\nThere are several good ways to derive and solve for the motion of a four-bar linkage analytically. Later in this book we will go through an exercise for solving for the motion of a similar linkage using Python and scripting to solve the problem for us, with some caveats. But for now, I refer you to a good book if you want to solve it further. Needless to say, the derivation uses lots of sines and tangents.\nWhy do I like four-bar linkages? Because they are simple and can still create quite complex motion in one degree of freedom. Also, you see them in nature. The jaws of fish can be approximated by four-bar linkages, and through different species of the same genus/family, the variation in species, nich, and mieal is tied to a variation in morphology.\n","permalink":"https://foldable-robotics.github.io/modules/kinematics/introduction-to-kinematics/","tags":null,"title":"Kinematics Introduction"},{"categories":null,"contents":"Introduction The goal of this assignment is to 1) propose a mechanism that your team can study as part of a larger laminate system, and 2) to get you comfortable sketching the kinematics of foldable systems in CAD, establishing constraints, and counting degrees of freedom.\nRubric Description Points Picture of prototype 50 Evaluation of 2D/3D 10 Drawing of Kinematics 50 DOF 10 Input/Output 20 Range of Motion 20 Discussion 40 Total 200 Prerequisites Solidworks should be installed. It may be downloaded from https://myapps.asu.edu. Instructions Pick one of the three basic kinematic elements we will be working with this semester: a planar four (or five) bar mechanism, a spherical four(or five) bar mechanism, or a sarrus linkage. If you are not familiar with the operation of this mechanism, look it up online.\nDistill the kinematics of this device into a paper-compatible mockup and take a picture of it in several positions.\nStudying your device, conclude whether your system can be represented as a planar system, or if it is composed of three-dimensional elements1\nFollowing the solidworks tutorial for creating 2D or 3D kinematic models, create a 2D or 3D representation of your system kinematics. Include a rendering or screenshot of the model in several positions in your writeup.\nRemember: Make sure you fully \u0026ldquo;ground\u0026rdquo; one link.\nDOF Determine the degrees of freedom of the system. Further constrain your system by adding one dimension at a time (more than those that are needed to ground the base and connect the links together) to further fix/lock your system. Count how many additional dimensions you needed for your system to become immobilized. Record how many degrees of freedom you determined for your mechanism\nHint: Try to add dimensions that define a variable innate to the mechanism \u0026ndash; like the angle between two links \u0026ndash; rather than a world-based dimension, like a horizontal distance measurement to a point, to keep this process simple.\nInput \u0026amp; Output Define the input(s). You will need one input per the device\u0026rsquo;s degrees of freedom to fully define the position of the output. The simplest and most straightforward way to think of an input, from the perspective of an origami-inspired robot, is the joint angle between two neighboring links of your mechanism. Define the output of the mechanism by selecting a point on a rigid link that moves with the device\u0026rsquo;s maximum degrees of freedom. Just like the number of inputs, the motion of the device is determined \u0026ndash; and limited \u0026ndash; by its internal degrees of freedom. Range of motion Now move your device around to the minimum and maximum limits of motion. If more than a one degree-of-freedom device, configure the system to move along the desired path. It may make sense for you to create one iteration of your device at each of its limits.\nMeasure and record the input(s)\u0026rsquo; and output\u0026rsquo;s total range of motion. Discussion Please discuss each of the following points.\nDo any of your joints need to move more than +/- 180 degrees as it moves between its minimum and maximum limit or throughout its workspace? Given the constraints of folded paper, will this be a problem? How do you plan to address it? Can you identify any singularities your mechanism might move through? Is this desirable? How would you avoid unwanted singularities? How do you interpret the relationship between the amount of input and output motion you calculated when studying your device\u0026rsquo;s range of motion? What implications will this have on actuator selection or external \u0026ldquo;gearing\u0026rdquo;? Based on the variables / locations you indicated as inputs, will these spots be good positions to locate actuators? Do you plan to add springs to any joints or between any additional points? Which joints do you plan to leave completely unactuated? Submission Please include a Jupyter notebook and pdf with the following:\nDetailed description of the completed steps above. images should be included in the document screenshots should be included in the document Answers to the above discussion points. Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document as well as a jupyter notebook (.ipynb). If submitted as a notebook, make sure it is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\nspherical mechanisms are considered 3D, for example.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://foldable-robotics.github.io/assignments/kinematics-via-prototyping-and-cad/","tags":null,"title":"Kinematics Via Prototyping \u0026 CAD"},{"categories":null,"contents":"Assignment Overview The purpose of this assignment is to get you comfortable using the computational capabilities of Python and Sympy to start estimating the performance of your design.\nRubric Description Points 1. 10 2. 10 3. 10 4. 10 5. 10 6. 10 7. 10 8. 10 9. 10 10. 10 11. 10 12. 10 13. 10 14. 10 15. 10 Discussion 50 Total 200 Resources Instructions Create a new jupyter/colab notebook. In the first cell, paste in this version of the code you worked on in class:\n%matplotlib inline #import required packages import pynamics from pynamics.frame import Frame from pynamics.system import System import numpy import sympy import matplotlib.pyplot as plt plt.ion() from math import pi #----------------------- # Create a Pynamics System system = System() pynamics.set_system(__name__,system) #----------------------- # Import Variable Types from pynamics.variable_types import Differentiable,Constant # Create Constants lA = Constant(1,\u0026#39;lA\u0026#39;,system) lB = Constant(1,\u0026#39;lB\u0026#39;,system) print(system.constant_values) # Create Differentiable State Variables qA,qA_d,qA_dd = Differentiable(\u0026#39;qA\u0026#39;,system) qB,qB_d,qB_dd = Differentiable(\u0026#39;qB\u0026#39;,system) #----------------------- # Define A Configuration state1 = {} state1[qA]=15*pi/180 state1[qB]=15*pi/180 #----------------------- #Define Frames N = Frame(\u0026#39;N\u0026#39;,system) A = Frame(\u0026#39;A\u0026#39;,system) B = Frame(\u0026#39;B\u0026#39;,system) # Define \u0026#34;N\u0026#34; as the Newtonian Frame system.set_newtonian(N) # Rotate A from N about their shared z axis by amount \u0026#34;qA\u0026#34; A.rotate_fixed_axis(N,[0,0,1],qA,system) # Rotate B from A about their shared z axis by amount \u0026#34;qB\u0026#34; B.rotate_fixed_axis(A,[0,0,1],qB,system) #----------------------- Make a new cell. create a new dictionary, state2, in the same way state1 is defined.\nSelect your own values for the positions of $q_A$ and $q_B$ for state2. Create a new vector to describe the origin, $\\vec{p}^{NA}$, which is equal to $\\vec{p}^{NA} = 0 \\hat{n}_x+0 \\hat{n}_y+0 \\hat{n}_z$.\nit is necessary to describe it in this way so you are creating a vector $\\vec{0}$ rather than a scalar $0$\nCreate a new vector to describe the point between the A link and the B link, $\\vec{p}^{AB}$, which is equal to $\\vec{p}^{AB} = \\vec{p}^{NA}+l_A\\hat{a}_x$\nCreate a new vector for the end effector, $\\vec{p}^{B_{tip}}$, which is equal to $\\vec{p}^{B_{tip}} = \\vec{p}^{AB}+l_B\\hat{b}_x$\nCreate a python list() named points of $\\vec{p}^{NA}$,$\\vec{p}^{AB}$,$\\vec{p}^{B_{tip}}$\nUsing the for keyword in Python, iterate through points and dot each element with $\\hat{n}_x$, saving the new list as px\nHint: look up Python \u0026ldquo;list comprehensions\u0026rdquo; to do this efficiently.\nUsing the .subs() method, substitute out all symbolic variables using the system.constant_values and state1 dictionaries, saving the list as px1. This list should contain values of literal numbers with no symbols. Using the .subs() method, substitute out all symbolic variables using the system.constant_values and state2 dictionaries, saving the list as px2. This list should contain values of literal numbers with no symbols. Repeat step 6.1 with $\\hat{n}_y$, saving the lists as py,py1,and py2\nIn the same figure, plot px1 vs py1 in blue and px2 vs py2 in red, using the plt.plot() function\nSet the axes to equal proportion using the method from your first Python assignment. use the .time_derivative() method of $\\vec{p}^{B_{tip}}$ to take the time derivative of $\\vec{p}^{B_{tip}}$ to obtain $\\vec{v}^{B_{tip}}$, where:\n$$\\vec{v}^{B_{tip}}=\\dot{\\vec{p}}^{B_{tip}} = \\frac{d^{N}(\\vec{p}^{B_{tip}})}{dt}$$\nwith reference to the Newtonian frame, $N$. In the above expression, the $d^N$ denotes the derivative with reference to the $N$ frame.\nNote: the .time_derivative() method takes two optional keyword variables: first, the frame of reference you are taking the derivative in (it default\u0026rsquo;s to the declared Newtonian frame), and second, the current pynamics system. You may keep these optional terms blank in this case.\nObtain the scalar components of $\\vec{v}^{B_{tip}}$ in the $\\hat{n}_x$ and $\\hat{n}_y$ directions, and save as $v^{B{tip}}_x,v^{B{tip}}_y.\nUse the sympy.Matrix() function to create a 2x1 matrix $\\textbf{v}$, where $$\\textbf{v}=\\left[\\begin{array}{c} v^{B{tip}}_x \\\\ v^{B{tip}}_y \\end{array}\\right]$$\nUse the sympy.Matrix() function to create a 2x1 matrix $\\dot{\\textbf{q}}$ (or q_d in python), where\n$$\\dot{\\textbf{q}}=\\left[\\begin{array}{c} \\dot{q}_A \\\\ \\dot{q}_B \\end{array}\\right]$$\nUse the .jacobian() method of $\\textbf{v}$ to compute its Jacobian $\\textbf{J}$ with respect to $\\dot{\\textbf{q}}$. (This should result in a 2x2 matrix).\nUsing the .subs() method of $\\textbf{J}$, identify the numerical value of new variables $\\textbf{J}_1$ and $\\textbf{J}_2$, by substituting system.constant_values and then either state1 or state2. This will result in two new 2x2 arrays with number literals (rather than a symbolic expression).\nUsing $\\textbf{J}_1$, $\\textbf{J}_2$, and $\\dot{\\textbf{q}}=\\left[\\begin{array}{c}3.3 \\\\ 2.4\\end{array}\\right]$, identify $\\textbf{v}_1$ and $\\textbf{v}_2$\nNow, assume that a force $\\vec{f}$, formulated as a sympy.Matrix(), where\n$$\\textbf{f}=\\left[\\begin{array}{c}1.4 \\\\ 2.6\\end{array}\\right]$$ is applied to the end-effector. Compute the torques at the robot\u0026rsquo;s joints at both state1 and state2.\nDiscussion Why are $\\textbf{J}_1$ and $\\textbf{J}_2$ different? Why is possible to determine the torques on each joint of the mechanism due to $\\vec{f}$, but not to arbitrarily apply any 3D force vector on the world given the kinematics described above in your code? What about the structure or content of $\\textbf{J}$ tells you this? What is the meaning of a row of zeros in $\\textbf{J}$? What is the meaning of a column of zeros in $\\textbf{J}$? Final Submission Please include a Jupyter notebook and pdf with the following:\nDetailed description of the completed steps above (included as blocks alongside chunks of related code) Code used in solving the problem (inline in the report in code blocks), along with descriptions detailing your approach. Detailed answers to the discussion questions, included at the bottom. Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document as well as a jupyter notebook (.ipynb). If submitted as a notebook, make sure it is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\n","permalink":"https://foldable-robotics.github.io/assignments/kinematics-with-python/","tags":null,"title":"Kinematics with Python"},{"categories":null,"contents":"%matplotlib inline import numpy import numpy.random import matplotlib.pyplot as plt import numpy.linalg Define your x variable\nx = numpy.r_[-10:10:.5] x array([-10. , -9.5, -9. , -8.5, -8. , -7.5, -7. , -6.5, -6. , -5.5, -5. , -4.5, -4. , -3.5, -3. , -2.5, -2. , -1.5, -1. , -0.5, 0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. , 5.5, 6. , 6.5, 7. , 7.5, 8. , 8.5, 9. , 9.5]) Define y as a function of x. This can be anything\ny = 3*x #y = x**2 y = 2*x**3 y += 2*numpy.sin(x) y /= y.max() y array([-1.16581845e+00, -1.00000000e+00, -8.50824970e-01, -7.17279360e-01, -5.98377987e-01, -4.93191502e-01, -4.00859731e-01, -3.20588089e-01, -2.51627928e-01, -1.93245642e-01, -1.44688088e-01, -1.05152789e-01, -7.37702189e-02, -4.96025012e-02, -3.16588415e-02, -1.89239181e-02, -1.03922769e-02, -5.10030999e-03, -2.14798940e-03, -7.05033996e-04, 0.00000000e+00, 7.05033996e-04, 2.14798940e-03, 5.10030999e-03, 1.03922769e-02, 1.89239181e-02, 3.16588415e-02, 4.96025012e-02, 7.37702189e-02, 1.05152789e-01, 1.44688088e-01, 1.93245642e-01, 2.51627928e-01, 3.20588089e-01, 4.00859731e-01, 4.93191502e-01, 5.98377987e-01, 7.17279360e-01, 8.50824970e-01, 1.00000000e+00]) Now create an array of normally distributed noise\nrand = numpy.random.randn(*y.shape)/10 y_rand = y+rand y_rand array([-1.03966184, -1.11103693, -0.89738405, -0.7897717 , -0.61606444, -0.58075587, -0.32366094, -0.41986849, -0.2252123 , -0.27872011, -0.06530092, -0.05975687, -0.0774088 , -0.1278407 , 0.08502485, -0.06129926, -0.12204749, 0.14838957, 0.02424667, 0.00377575, 0.11386753, 0.00182104, 0.01021305, -0.00858236, 0.14212112, 0.18574359, 0.03174494, -0.01499514, 0.12695571, 0.08401802, 0.21914263, 0.24385571, 0.1560743 , 0.38365295, 0.59747615, 0.46985472, 0.55933946, 0.61241949, 0.9059338 , 0.79946197]) Plot y against the random vector\nplt.plot(x,y) plt.plot(x,y_rand,\u0026#39;o\u0026#39;) [\u0026lt;matplotlib.lines.Line2D at 0x7ff170474310\u0026gt;] Now assume you create a model of the form $y(k)^$ where k are your model coefficients. You want to pick your model in such a way that the error from $y-y^$ is minimized. The residual error, or just residual can be expressed as\n$$r=y-y^*$$\nthus the sum of squared error is\n$$||r||^2 = ||y-y^||^2 = y^T y - 2y^Ty^* + {y^}^T y^$$\nNow in matrix form, $y^$ takes the form $y^=Ak$, where $k$ is your set of model weights in the form\n$$k=\\left[\\begin{matrix}k_1\u0026amp;k_2\u0026amp;\\ldots \u0026amp;k_m\\end{matrix}\\right]^T,$$\nand $A$ is your set of models applied to the input variable $x$ $$A = A(x) = \\left[\\begin{matrix} a_1(x_0) \u0026amp; a_2(x_0)\u0026amp; \\ldots\u0026amp; a_m(x_0)\\ a_1(x_1) \u0026amp; a_2(x_1)\u0026amp; \\ldots \u0026amp;a_m(x_1)\\ \\vdots \u0026amp; \\vdots \u0026amp; \\ddots\u0026amp; \\vdots\\ a_1(x_n) \u0026amp; a_2(x_n)\u0026amp; \\ldots\u0026amp; a_m(x_n)\\ \\end{matrix} \\right]$$\nExample In our case we will try to model our data with $A(x) = \\left[\\begin{matrix}x\u0026amp;x^2\u0026amp;x^3\u0026amp;\\sin(x)\\end{matrix}\\right]$\nA = numpy.array([x,x**2,x**3,x**4,x**5,x**6]).T A.shape (40, 6) With the model stated, we may now expand the sum of squared error with our model:\n$$||r||^2 = y^T y - 2y^T(Ak) + k^TA^TAk$$\nBut when optimizing, you are not optimizing for $x$ or even $A(x)$, which is either given or selected by you, but for the $k$ weighting parameters, which you may select in order to minimize the above equation. Thus the error will be minimized at the point where $$\\frac{d(||r||^2)}{dk}=0,$$ or\n$$ - 2y^T A+ 2k^T A^T A=0$$\nSolving for k, $$ k^T A^T A= y^T A$$ $$ (k^T A^T A)^T= (y^T A)^T$$ $$ (A^T A)^Tk= A^Ty$$ $$ (A^T A)k= A^Ty$$ $$ (A^T A)^{-1}(A^T A)k= (A^T A)^{-1}A^Ty$$\nThe optimimum value for k is thus\n$$ k= (A^T A)^{-1}A^Ty$$\nExample B = numpy.linalg.inv(A.T.dot(A)) coeff = B.dot(A.T.dot(y_rand)) coeff array([-2.18923289e-03, 2.77108020e-03, 1.55743851e-03, -8.14782525e-05, -4.86516898e-06, 4.69654727e-07]) Plotting the coefficients, we see that the weights for $x^3$ are near 1 while all other weights are quite small.\nxx = numpy.r_[:6] labels = \u0026#39;$x$\u0026#39;,\u0026#39;$x^2$\u0026#39;,\u0026#39;$x^3$\u0026#39;,\u0026#39;$x^4$\u0026#39;,\u0026#39;$x^5$\u0026#39;,\u0026#39;$x^6$\u0026#39; f = plt.figure() ax = f.add_subplot() ax.bar(xx,coeff) ax.set_xticks(xx) ax.set_xticklabels(labels) [Text(0, 0, '$x$'), Text(1, 0, '$x^2$'), Text(2, 0, '$x^3$'), Text(3, 0, '$x^4$'), Text(4, 0, '$x^5$'), Text(5, 0, '$x^6$')] To return $y^*$,\ny_model = A.dot(coeff) Plotting the noisy data against the model, we get\nfig = plt.figure() ax = fig.add_subplot() a = ax.plot(x,y_rand,\u0026#39;o\u0026#39;) b = ax.plot(x,y_model) ax.legend(a+b,[\u0026#39;data\u0026#39;,\u0026#39;model\u0026#39;]) \u0026lt;matplotlib.legend.Legend at 0x7ff17008f490\u0026gt; And finally, to plot the residual\nplt.figure() plt.plot(x,y_model-y_rand) [\u0026lt;matplotlib.lines.Line2D at 0x7ff15d69c6d0\u0026gt;] Now try other models, higher resolution data, and different domains\n","permalink":"https://foldable-robotics.github.io/modules/optimization/generated/01-least-squares-optimization/","tags":null,"title":"Least Squares Optimization"},{"categories":null,"contents":"import shapely.geometry as sg from foldable_robotics.layer import Layer from foldable_robotics.laminate import Laminate a = sg.Point(0,0) a b = sg.box(0,0,1,1) b c = Layer(b) c c.translate(.5,.5) c|(c.translate(.5,.5)) c.union((c.translate(.5,.5))) d = Layer(a.buffer(.25)) d e = c-d.translate(.5,.5) e import foldable_robotics foldable_robotics.resolution=4 e.dilate(.2) e.erode(.1) e.plot() e.erode(.1).plot() list(b.centroid.coords) [(0.5, 0.5)] d.bounding_box().plot() d.plot() e\u0026lt;\u0026lt;(.1) e\u0026gt;\u0026gt;.1 f = Laminate(e\u0026lt;\u0026lt;.1,e, e\u0026gt;\u0026gt;.1) f g = [1,2,3] g [1, 2, 3] g[::-1] [3, 2, 1] f[0] f[1] f[2] f[::-1] len(f+f) 6 [1,2,3]+[4,5,6] [1, 2, 3, 4, 5, 6] f\u0026lt;\u0026lt;.1 g = f.rotate(30) g h = g.translate(.5,.5) h f|h f\u0026amp;h f.symmetric_difference(h) import foldable_robotics.manufacturing as fm k = fm.unary_union(f) k l = (k\u0026lt;\u0026lt;.2).bounding_box() m = Laminate(l,l,l) m n = m-f n # this can kill jupyter so do it last in your script or comment it out f.plot_3d() An exception has occurred, use %tb to see the full traceback. SystemExit: 0 C:\\Anaconda3\\lib\\site-packages\\IPython\\core\\interactiveshell.py:3445: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D. warn(\u0026quot;To exit: use 'exit', 'quit', or Ctrl-D.\u0026quot;, stacklevel=1) ","permalink":"https://foldable-robotics.github.io/modules/manufacturing/generated/lec22_example/","tags":null,"title":"Lecture 22 Code"},{"categories":null,"contents":"Introduction Loops are used to repeat code over a fixed number of cycles, or indefinitely based on logic. There are two main types of loops: for loops, and while loops.\nFor Loops For loops run code iteratively, once per item, over each item in an iterable data type like a tuple or list.\nmy_list = [1,2,3,4,5] for item in my_list: print(item) 1 2 3 4 5 While Loops while loops, run code cyclically based on a conditional statement\nii = 0 while ii\u0026lt;5: print(ii) ii=ii+1 0 1 2 3 4 ","permalink":"https://foldable-robotics.github.io/modules/python/generated/loops/","tags":null,"title":"Loops"},{"categories":null,"contents":"Introduction The purpose of this assignment is to make a bibliography page and to include it in your website\nResources https://www.mendeley.com\nInstructions Install Mendeley or another reference manager your team agrees to use. Create a shared collection that your whole team can access, manage, and add to. For each webpage, create a subfolder that has only the references used on that page Add relevant references to each subfolder as needed. Sort by author, then copy and paste the resulting bibliography to the bottom of any page that uses references. Refer to references throughout your page with Suggestions The DOI lookup tool is a handy way to import paper information automatically. On the journal or conference paper\u0026rsquo;s main webpage, look for a Digital Object Identifier address. Copy and paste that into the DOI field in Mendeley and hit the search glass button next to it. In most cases, the paper information will be imported automatically. ","permalink":"https://foldable-robotics.github.io/modules/project/make-a-bibliography/","tags":null,"title":"Make a Bibliography"},{"categories":null,"contents":"Assignment Overview The goal of this assignment is to search externally for origami-inspired mechanisms you could use for your project. Additionally, this assignment is meant to make you think critically about how the manufacturing of foldable robots is intertwined with cutting and joining processes, and to appreciate the automation\nRubric Description Points Narrative of Steps Taken 10 Table of Mechanisms 20 Discussion 30 Pictures 40 Figure(s) 40 Videos 20 References 20 Total 200 External Resources Video Series by D. Birmingham:\nhttps://www.youtube.com/watch?v=aGJZbNh9Phs Itai Cohen Explains The Physics of Origami\nhttp://www.cornell.edu/video/itai-cohen-explains-origami-physics KMMODL Linkage Collection http://kmoddl.library.cornell.edu/index.php Instructions Read the entire assignment before starting.\nRead this paper[1]. Look through other online sources you can find, including the book by Birmingham [2], or google.\nFrom these initial sources, try to learn more about the mechanisms using Google Scholar.\nMake a table of 5 unique popup mechanisms found in research literature including an image, URL t, citation reference (eg [1]), and short description. (All citations must be included in your references section.)\nNow, makine a two-page popup book\u0026hellip;essentially the two covers. When you open the book, your mechanism is revealed by popping up.\nYou can pick your input mechanism to be the book opening, or to be some other input device like a tab-and-slot, or both, but it should be clear what simple translations or rotations power your book\u0026rsquo;s motion. the machine should be composed of more than one mechanism, connected in series or parallel as you see fit, and you should use an example of a planar and spherical mechanism somewhere in it. Identify what is what. If you don\u0026rsquo;t know the difference, ask in class! pick a material: something like poster-board or stiff cardstock (I have some available, please come see me) Focus on generating interesting motion, not tesselations or repeating patterns, using the opening of the book or some other constrained input mechansim like a tab/slot. Draw/plot the cut pattern for each layer of your popup book. Use mountain/valley/cut notation. If you don\u0026rsquo;t know what that is, ask in class!\nEither find and reference a standard way of drawing cut patterns, or define the line styles you use for each.\nTake 3 photos of your final popup book in open, closed, and midway positions. The simple example from above is shown in those three states, for example. Over-draw each joint in a vector drawing program to highlight joint locations in the image.\nTake a video of your popup book and post to YouTube.\nBring to class.\nDiscussion Discuss the following points:\nWhat is the maximum amount one foldable hinge or joint can rotate from its neutral position? Discuss the impact of your answer to question 1 with regard to the types of mechanisms one is and is not able to make. Discuss the deficiency of using the same material at your link as your joint. Describe strategies you could use to stiffen a link. Consider at least two alternatives. Find an example of each. What are the benefits and drawbacks of each? Describe strategies you could use to weaken a joint. Consider at least two alternatives. Find an example of each. What are the benefits and drawbacks of each? Submission Please include:\nReport with the following Detailed narrative of the steps you took, in paragraph form Include the mechansims you found online (image, link, description) Include answers to the discussion points above Include photos of your popup book open, closed, and midway. Include plot/figure of your pattern Include your video link Include a bibliography or references section, including all citations used in this assignment Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This may be a .pdf document or a jupyter notebook (.ipynb). Make sure the notebook is fully compiled.\nPlease also bring your popup book to class on the date assigned in Canvas.\nSuggestions What Worked Well Last year\nBeing Precise If you cut by hand, use a straightedge and x-acto. Consider using a laser cutter to score sheet or weaken. Making things out of one piece Making hinges with flexible materials Consider taping or reinforcing joints. Making links with stiff materials Scoring hinges Practicing What didn\u0026rsquo;t work well last year\nflaps \u0026amp; slides (they catch and jam) small features overlapping parts / features corrugated cardboard misalignments due to assembly your first try hysteresis superglue Bibliography [1] B. G. Winder, S. P. Magleby, and L. L. Howell, \u0026ldquo;Kinematic Representations of Pop-Up Paper Mechanisms,\u0026rdquo; J. Mech. Robot., vol. 1, no. 2, p. 021009, 2009, doi: 10.1115/1.3046128.\nhttps://asmedigitalcollection-asme-org.ezproxy1.lib.asu.edu/mechanismsrobotics/article/1/2/021009/478086/Kinematic-Representations-of-Pop-Up-Paper\n[2] D. Birmingham, \u0026ldquo;Pop-Up! A manual of paper mechanisms.\u0026rdquo; .\n","permalink":"https://foldable-robotics.github.io/assignments/make-a-popup-book/","tags":null,"title":"Make a Pop-up Book"},{"categories":null,"contents":"Introduction The purpose of this post is to help you create a website to share your work. Sharing your work with the class and the broader community is important, as you should generate a persistent portfolio of class work to demonstrate your abilities when you apply for a job or academic career.\nWe will be using github to host and share websites this year. This is for a couple reasons:\nHosting websites on github is free. Git is iterative. As your project evolves we can see how it has changed Editing content is easy, using either the web interface or windows-based clients. Procedure Go to Github.com\nCreate an account under the free plan\nVerify your email\nCreate a new public repository\nname it your-user-name.github.io (ex: danaukestest01.github.io)\nkeep other options blank for now.\nSelect the link to create a new file.\nName it index.md\nPaste in the following code and hit commit\n--- title: Home --- # Home In the main repository, go to settings and scroll down the main settings page.\nEnsure that your site is published.\nNavigate to the linked page (your-user-name.github.io) and check out the results\nNow navigate back to the main repository\nReplace the text in index.md with the following code and hit save:\n--- title: Home --- # Home ## Introduction **Bold Text** _Italic Text_ **_Bold and Italic Text_** ## Research Question * Bullet Point 1 * Bullet Point 2 * Bullet Point 3 ## Background ![image caption](https://idealab.asu.edu/assets/images/research/jumper1.png) [link to background](/background) ## Results 1. Numbered Point 1 1. Numbered Point 2 1. Numbered Point 3 ## Conclusions and Future Work ## External Links [example link to idealab](https://idealab.asu.edu) ## References Navigate back to the repository\nCreate a new file named \u0026ldquo;background.md\u0026rdquo;\nPaste in the following code:\n--- title: Background --- # Background ## Introduction ## Conclusions ## References Refresh the page at your-user-name.github.io and check out the results\n","permalink":"https://foldable-robotics.github.io/modules/project/make-a-website/","tags":null,"title":"Make a Project Repository and Website"},{"categories":null,"contents":"Assignment Overview The purpose of this assignment is to create a project website as a living document that will document all your work for the class.\nResources Make a Project Repository and Website Tutorial https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet pandoc, a useful tool for converting documents of all kinds Instructions Follow the directions in the \u0026ldquo;Make a Project Repository and Website\u0026rdquo; tutorial\nThe website\u0026rsquo;s main page should contain the following information:\nProject Title Team members and contact information links to subpages. These include: All team homework assignments, adapted as a sub-page and linked from the main page (index.md) \u0026ldquo;Develop a Research Question\u0026rdquo; \u0026ldquo;Biomechanics Background and Initial Specifications\u0026rdquo; \u0026hellip; example:\n+--index +--team-assignment-1 +--team-assignment-2 +--... +--team-assignment-N Submission There is no submission associated with this assignment. ","permalink":"https://foldable-robotics.github.io/assignments/make-a-website/","tags":null,"title":"Make a Website"},{"categories":null,"contents":"Manufacturing Computation for Multi-layer Devices Hinge width, laminate thickness, and range of motion The first thing to think about is how the thickness of your laminate will impact and alter the ideal kinematics you have been assuming up to this point. Let\u0026rsquo;s first discuss hinges\nA multilayer hinge typically is made by exposing a softer layer of material which is embedded in a multilayer laminate. IT is typically exposed along a straight line, and the cut away materail usually spans a straight line across the width of a material. In this way, once exposed, the soft material may bend and flex easily along an axis defined by that imaginary line.\n%matplotlib inline import foldable_robotics from foldable_robotics.layer import Layer from foldable_robotics.laminate import Laminate import shapely.geometry as sg foldable_robotics.resolution=4 The first assumption we make for narrow hinges is that the hinge actually rotates about one line. This is not necessarily a valid assumption in all cases, because by exposing an area of soft material we have essentially formed a cantilever beam which bends along its entire length. However, when the length of a hinge is small in comparison to other design geometries, it makes the computation of kinematics much simpler. So whenever possible we make that assumption. Some have attempted to create models which account for this behavior ( Citation: Odhner\u0026#32;\u0026amp;\u0026#32;Dollar,\u0026#32;2012 Odhner,\u0026#32; L.\u0026#32;\u0026amp;\u0026#32;Dollar,\u0026#32; A. \u0026#32; (2012). \u0026#32;The Smooth Curvature Model: An Efficient Representation of Euler–Bernoulli Flexures as Robot Joints. IEEE Transactions on Robotics,\u0026#32;28(4).\u0026#32;761–772. https://doi.org/10.1109/TRO.2012.2193232 ) in similar flexure joints.\nThe second problem is that the thickness of the material can interfere with itself at and around joints. Figure X highlights the problem. As the material rotates about a virtual joint defined by the midpoint of the flexure material, it can come into contact with itself much earlier than anticipated by the ideal, infinitely thin assumption. To determine the needed hinge length given a desired range of motion(b) and laminate thickness(t), you can use the equation (), or conversely, ().\n\\begin{align} \\tan a \u0026amp;= \\frac{\\frac{t}{2}}{\\frac{l}{2}} = \\frac{t}{l}\\ a\u0026amp;=\\tan^{-1} \\left(\\frac{t}{l}\\right)\\ 2a+\\theta\u0026amp;=\\pi\\ \\theta\u0026amp;=\\pi-2a\\ \\theta\u0026amp;=\\pi-2\\tan^{-1} \\left(\\frac{t}{l}\\right)\\ l\u0026amp;=\\frac{t}{\\tan(a)}\\ l\u0026amp;=\\frac{t}{\\tan\\left(\\frac{\\pi-\\theta}{2}\\right)} \\end{align}\nSelective reinforcement This is really the simplest form of mitigation you can do. Use a thin material and reinforce as needed with extra material. This is an entirely customized process though, and assumes your original design was good enough to get you close enough to see what elements needed reinforcing.\nYou can reinforce in a couple ways. You can glue reinforcing material, from a coffee stirrer or piece of hand-cut balsa, to creating a fiberglass or carbon fiber reinforcement which gets laminated on\nOne of the benefits of this method is that you only have to reinforce where you need it. This is more of a guess and check strategy, and not too formulaic, which may not be too efficient, and for the novice, might\n\u0026ldquo;Castellated\u0026rdquo; hinges Castellated hinges address the material conflict issue by removing alternating portions of material near the joint so the radius of curvature remains small. This only works with stiff rigid materials that are strong enough not to bend or break under the added stress of such small bend radii. It does not typicallly work for cardboard.\nimport foldable_robotics.parts.castellated_hinge1 hinge = foldable_robotics.parts.castellated_hinge1.generate() hinge = hinge.scale(1,.1) hinge.plot() Alternating Hinge locations One way to address the problem of material thickness is to have joints which are asymmetrically located in the laminate stack. By having joints on the outer edges, rather than the inner edges of the laminate, you can make your laminate flat foldable at both 0 and 180 degrees. There are some underlying problems to this technique, however. Having your soft hinge material on the outside of your rigid material is an invitiation for delamination \u0026ndash; the material will just peel away unless you have sufficiently bonded your layers. If you are doing this in one material and simply scored the material from one side or another, this may help but you have also potentially created a stress concentration. A good way of doing this strategy would be via molding, where you can build in good flexure design practices ala howell in order to minimize stress while also locating a hinge along the top or bottom of a thick link. But then if you\u0026rsquo;re doing that, hopefully you have exhausted your other, cheaper and easier options first.\nDXF creation The benefit of prototyping in paper is that the design can be easily extracted from the pattern which is folded. One straightforward process to sketch a device involves highlighting each hinge of a paper mockup, and drawing that hinge pattern in a 2d sketching program. Two such programs, inkscape and draftsight, may be used interchangeably for this step. Many commercial and open-source programs permit dimensioning or defining 2d patterns, and we do not advocate or insist on any one in particular, rather the one you are comfortable with. If dimensions are important, you may need a CAD program in order to get it right. If you are at the sketching step simply looking to recreate a topology to be optimized later, any will work. Certain functionality, like being able to define and use layers and line colors will help later, and are recommended features to utilize during the sketching phase. While there are many potential exchange formats, we recommend finding a program which can output dxf\u0026rsquo;s, specifically more modern ascii formats(R2013 ascii format will work fine.)\nA foldable sketch consists of several elements. First, you must define the material layers. This may be accomplished by creating a closed shape. Material inside the shape indicates where material exists. Material outside the shape indicates where material isn\u0026rsquo;t. DXF files provide several sometimes overlapping functionalities for drawing polygons or what look like polygons. The LWpolyline is a more recent addition to the dxf specification, and provides the ability to draw both lines and arcs within the same shape, and to indicate a \u0026ldquo;closed\u0026rdquo; polygon. The scripting language supports lw polylines, and can interpret arc segments as well, (even though it discretizes them as line segments for computation).\npolylines are abstract implementations which do not always produce valid shapes for indicating the presence of material(closed area), so it is important to always draw with a few remembered rules. First, there is no computation of \u0026ldquo;inside\u0026rdquo; or \u0026ldquo;outside\u0026rdquo;. While you can draw polylines where lines intersect or two vertices meet, these shapes are not valid for the purposes of specifiying material. Polylines do not keep track of \u0026ldquo;inside\u0026rdquo; or \u0026ldquo;outside\u0026rdquo; a shape so it is your job to, or to supply your import routine with the proper handling of self-contacting and self-intersecting shapes.\nSecondly, there is no definition of a hole when drawing a polyline. Material with holes or cuts in it must be defined by multiple separate polylines. We will discuss how to gracefully compute this in a few lines of code, but for now, keep in mind that you should try to (for your own sake) make sure polylines don\u0026rsquo;t intersect each other. There are ways to handle this, but there are multiple way sto handle it, and so the best way is to avoid the problem in the first place. Figure x shows two different representations for the same computed shape. Isn\u0026rsquo;t it just easier to keep self-intersections to a minimum?\nAnother type of geometry which is required for foldable robotics is the definition of where hinges go. Think about a hinge. While the geometry required to actually fabricate a hinge may involve many layers and many shapes, it\u0026rsquo;s placement in space often boils down to a straight line between two vertices. Create a layer called \u0026ldquo;hinges\u0026rdquo; and draw separate lines indicating the placement of each hinge.\nAnother type of geometry you may want to define separately is a cut. Cuts may be complex polylines, individual line segments, etc, but are different from the holes supplied in the material layer. Why? They typically indicate cut paths not areas. It is sometimes usefull to treat these things separately in your code. So make another layer called \u0026ldquo;cutlines\u0026rdquo; and draw any lines arcs, polylines, etc.\nAnother type of geometry with sometimes different requirements is circular holes.\nAgain, the above suggestions are simply that: suggestions for a sketching workflow which will help you organize your computations later. You can always put different geometries in different layers; you just need to then modify your script to handle all of them.\nManufacturing Planning This section summarizes recent work towards the development of a scriptable CAM environment which permits robots to be designed and built quickly using a suite of scripts which make the process seamless and repeatable. From a basic set of user assumptions, this scripting environment provides the rest while letting the user drive their design forward with\nThe goal of being able to rapidly develop a robot in the span of an hour or day has become more realistic as rapid prototyping tools have become more advanced.\nMaterial Import all the polylines from the material layer into a list of shapes. These shapes may be approximated as a set of polygons. The final shape s may be computed as\n$$s = \\prod_{i = = 1}^{n}{}s_{i}$$\nWhere the $\\prod_{}^{}{}$ operator\nLayer A layer is a space in 2d which can define the allocation of material. Any regular shape can exist on it, including primitives like prisms, circles, ellipses, etc, but I like to think more in terms of polygons, or polyonal approximations of other things. Why? Polygons are easy to triangulate and to study. If you want to make a circle, make instead a circular polygon with many vertices. If you are willing to take the tolerance errors in that approximation, then you can take advantage of a suite of tools well suited to polygons.\nMost importantly is the concept that a layer defines where material is or isn\u0026rsquo;t. Inside a polygon there is material. Outside there isn\u0026rsquo;t. That means on a layer of one material you can\u0026rsquo;t have\nOverlapping polygons\nStandalone lines or polylines.\nComplex or self-intersecting geometries.\nAll of these things need to either be simplified to a simple polygonal representation or eliminated from a layer.\nAnother assumption which arises from this assumption is that layers are not interesting in the third dimension; this is not always true with laser cutters, water-jet cutters, etc. Sometimes they are capable of producing high draft angles (the profiles they cut are not perfectly straight in the z direction) A layer cannot account for that on its own. Additionally, a layer does not know or care what the thickness of the layer is. Nor does it matter.\nFor the purposes of the next exercise, we will introduce two geometries, a circle and a triangle\ncircle = Layer(sg.Point(0,0)) \u0026lt;\u0026lt; .5 circle = circle.translate(.3,.3) circle.plot() triangle = Layer(sg.Polygon([(0,0),(1,0),(0,1)])) triangle = triangle.translate(.3,.3) triangle.plot() square = Layer(sg.Polygon([(0,0),(1,0),(1,1),(0,1)])) square.plot() Transformations\nOperations Union\nresult = circle | triangle result.plot() Unary Union\nresult = circle.unary_union(triangle,square) result.plot() Intersection\nresult = circle \u0026amp; triangle result.plot() Symmetric Difference\nresult = circle ^ triangle result.plot() Difference\nresult = circle - triangle result.plot() result = triangle - circle result.plot() Transformations\nresult = triangle | triangle.translate(2,0) result.plot() result = triangle |triangle.translate(2,0).rotate(30,(2,0)) result.plot() Transformations\nresult = square | square.affine_transform([1,0,.1,1,2,0]) result.plot() result = square | square.affine_transform([1,.1,0,1,2,0]) result.plot() Dilation\nresult = triangle | (triangle.translate(2,0) \u0026lt;\u0026lt; .1) result.plot() Erosion\nresult = triangle | (triangle.translate(2,0) \u0026gt;\u0026gt; .1) result.plot() Laminate A Laminate is a collection of layers. A laminate enforces a particular ordering of layers, and a particular number of layers. This is established as a geometric ordering, rather than a time based ordering, etc. Therefore two polygons which overlap at the same x, y point, and exist the same layer in two laminates of the same size are assumed to be , thus can be operated upon. This means that laminates of idfferent numbers o flayers produce indeterminate results, thus there are no operations defined for them.\nLaminates don\u0026rsquo;t on their own hold\nThickness\nMaterial type\nSequence of addition\nThis means that a laminate representation cannot represent complex laminates in which layers change their thickness, change their z-elevation, have multiple materials on the same layer, etc.\nYou can create an empty laminate of an arbitrary number by joining several empty layers together. You can augment an existing laminate with empty layers to make it operable against a laminate of a different size. You can eliminate layers to make it smaller and operable against a smaller laminate.\nLaminate specific operations\nCreate\ncircle_lam = Laminate(circle,circle,circle) circle_lam.plot() triangle_lam = Laminate(triangle,triangle,triangle) triangle_lam.plot() square_lam = Laminate(square,square,square) square_lam.plot() Select\nprint(type(circle_lam[0])) circle_lam[0].plot() \u0026lt;class 'foldable_robotics.layer.Layer'\u0026gt; All layer operations can be applied to laminates. This includes\nresult = circle_lam|triangle_lam result.plot() Append / Expand\nLayer-specific extensions\nUnary operations\nBinary operations\nlam = Laminate(circle,triangle,square) lam.plot() Shift Up\nresult = Laminate(Layer(),*lam[:-1]) result.plot() Shift Down\nresult = Laminate(*lam[1:],Layer()) result.plot() Rotate Up\nresult = Laminate(*lam[:-1],*lam[1:]) result.plot() Rotate Down\nresult = Laminate(*lam[1:],*lam[:1]) result.plot() Bibliography Odhner\u0026#32;\u0026amp;\u0026#32;Dollar (2012) Odhner,\u0026#32; L.\u0026#32;\u0026amp;\u0026#32;Dollar,\u0026#32; A. \u0026#32; (2012). \u0026#32;The Smooth Curvature Model: An Efficient Representation of Euler–Bernoulli Flexures as Robot Joints. IEEE Transactions on Robotics,\u0026#32;28(4).\u0026#32;761–772. https://doi.org/10.1109/TRO.2012.2193232 ","permalink":"https://foldable-robotics.github.io/modules/manufacturing/generated/manufacturing_planning/","tags":null,"title":"Manufacturing Computation for Multi-layer Devices"},{"categories":null,"contents":" ","permalink":"https://foldable-robotics.github.io/modules/manufacturing/manufacturing-tutorial/","tags":null,"title":"Manufacturing Tutorial Video"},{"categories":null,"contents":"Basic Operators Operators in Python are just symbols that \u0026ldquo;operate\u0026rdquo; on one or more values. Values can be literal values or variables. Example operators include math operators:\n+ - / * ** % // evaluation operations:\n\u0026gt; \u0026lt; \u0026gt;= \u0026lt;= == != logical operators\nand or not and binary operators\n\u0026amp; | \u0026lt;\u0026lt; \u0026gt;\u0026gt; ^ a = 3 b = 2 c = 0b110011 d = 0x3ab1 a 3 b 2 c 51 d 15025 a+b 5 a-b 1 a*b 6 a**b 9 a%b 1 a/b 1.5 a//b 1 Evaluation a\u0026gt;b True a\u0026lt;b False a==b False a!=b True a\u0026gt;=b True a\u0026lt;=b False Logical Operators True and False False True or False True Binary Operators a=0b11111000 b=0b00011111 bin(a\u0026amp;b) '0b11000' bin(a|b) '0b11111111' bin(a^b) '0b11100111' bin(b\u0026lt;\u0026lt;1) '0b111110' bin(b\u0026gt;\u0026gt;1) '0b1111' ","permalink":"https://foldable-robotics.github.io/modules/python/generated/operators-and-operations/","tags":null,"title":"Operators \u0026 Operations"},{"categories":null,"contents":"Introduction The most important packages that I use when creating python code are those packages which make a python more Matlab-like.\nCommon Packages Numpy https://www.scipy.org/getting-started.html\nthis package permits one to store and access data in arrays multidimensional arrays as one would do natively in Matlab. While python permits nested lists, the Paradigm of being able to slice multidimensional arrays of data, to index through it, too reshape and analyze it across dimensions in multiple ways is provided by this package\nScipy https://docs.scipy.org/doc/scipy/reference/index.html\nScipy complements numpy in that it permits low-level arrays defined in numpy to be analyzed across a wide array of linear algebra and scientific functions. The most notable packages with inside Pi include modules for integration, interpolation, linear algebra, optimization, nonlinear optimization, sparse matrices, spatial operations such as triangulation convex hole Etc and statistics\nModule list: https://docs.scipy.org/doc/scipy/reference/py-modindex.html\nMatplotlib Matplotlib is a package which permits the visualization of data, especially Ray base data used in numpy. matplotlib also provides an interface which is similar to Matlab, making it easy to make the transition between Matlab plotting and plotting in Python. Not live also permits object-oriented-style access to its structures in classes, making it possible to embed object-oriented style code and enhance it with plotting functionality. specialty modules within matplotlib start with pi plot, the scripted interface for creating python plots. Other modules which are worth noting are the path modules, which allow you to access complex geometric classes such as lines and polygons, and to program these shapes at a very low level in order to get the exact type of drawing you want. Another module within matplotlib which is worth knowing about is the color map capability, which allows you to specify and generate colors along a spectrum. A variety of Spectra are predefined, permitting you to ship the color of your plots for different uses very easily. Other common modules are the figure and axis modules, which provide access to the axis and figure classes. One of their module to know about is the image module, which allows you to display image data or bitmapdata and to operate on pictures and images within figures and plots.\nhttps://matplotlib.org/tutorials/index.html\nOther things that you can do in that pot live include animation, simple interactions with data such as clicking and dragging, 3D plotting of all kinds including surfaces contour lines and custom triangulated data. you can do subplots in matplotlib just as you do with Matlab\nOther packages package Description / Use python Get Python 3 numpy basic array types and operations scipy huge, multipurpose numpy-enhancing package, covering many topics including optimization, matrix operations \u0026amp; linear algebra, spatial data, transforms, and integration. sympy symbolic equation manipulation shapely 2d constructive solid geometry, based on libgeos matplotlib the definitive plotting tool for python pyqt / pyside QT GUI development pyyaml yaml file type support spyder great GUI for python editing / debug jupyter great web-based editor for ipython Packages, modules, etc One of the hardest things to understand once you started scripting in Python is how to get access to all of the good code that is already out there, and how to use it once you\u0026rsquo;ve got it installed. At the heart of this issue is the import command, which permits you to load packages of code. packages are term for many different python files, and the folder structure, support files, and data files which support and Surround it. Packages are distributed in a variety of ways, some historically used more and better than others,. once installed, packages typically live within the python distribution folder system itself. A package is a collection of more than just python files, it is the structure of how those files interact. Python packages, when run, can store data inside them, and access files from within their package, and load other modules. Module is a term for a reusable python file that has functions variables and data inside of it.\ntypically the import statement can be used to load both packages and modules. Import can be used in a variety of ways, which makes it unclear exactly how it\u0026rsquo;s being used except for on a case-by-case basis. the simplest import statement looks like this\nimport math what I just done is imported the math package so that I can use it . just from this line of code it is impossible to tell whether the math is a module parentheses file, for a package, folder structure with many files,. Find out I type\ntype(math) I do know running or after running this line of code, is that when I want to access functions within math, I will have to access them by typing\nmath. Math function\nthe import statement imported\n","permalink":"https://foldable-robotics.github.io/modules/python/packages/","tags":null,"title":"Packages in Python"},{"categories":null,"contents":"Introduction The purpose of this assignment is to get your team to model the various aspects of your model including\nThe full system Actuator Parameters Energy Storage Devices System / Link Stiffness Damping and Friction Resources Tracker tutorial Actuator Fitting tutorial Solidworks FEA tutorial Cantilever Beams process Euler-Bernoulli Beams code Rubric Description Points Procedure Writeup 50 Data 20 Images of Setup 30 Figure of Model/Data 30 Code 20 Discussion 50 Total 200 Instructions Part I Your team should have decided what each of your tasks are for this week. Please ensure you describe what your contributions to your team are. For example, you can complete a task such as:\nFrom the plan put together by your team in class, apply this principle of data collection and model fitting to one of your team\u0026rsquo;s unknowns,\nTo find the stiffness and/or damping of a flexure joint. To find the motor constants (L,R,I) for a candidate motor or actuator To identify the material compliance of one or more materials selected for your links using FEA To identify the system stiffness of a number of links and joints collected together. To characterize the dynamic properties of your discrete energy storage devices (e.g. discrete springs or rubber bands) added to the foldable system. \u0026hellip;another one of your tasks agreed to by your team. The information you collect will be used in updating your dynamic model and evaluating the materials you select, the capacity of the actuators you plan on using, and in optimizing the system using known quantities.\nProcess Identify the goal of your experiment. Write up the process or procedure used to collect data, detailing the methods used and any assumptions made. Take pictures of your experimental setup at each step. Include in your process description. Discuss the model you have selected for representing the observed behaviour of your material/subsystem in your team\u0026rsquo;s full dynamic model, and the process used for fitting the data you collected. Describe your process for fitting experimental data to the model. This can be a least squares optimization, nonlinear optimization, or other minimization algorithm. Show the raw data collected, in a table or python array. If it is more than ten data points, it is sufficient to show a sample of the data. Plot a figure or figures of the raw data collected, alongside the model-predicted values in the same range. Clearly label axes and units, use linestyles to differentiate model from data, use a legend, and a clearly identified title. Discussion What could you have done better in your experiment design and setup? Discuss your rationale for the model you selected. Describe any assumptions or simplificaitons this model makes. Include external references used in selecting or understanding your model. Justify the method you selected (least squares, nonlinear least squares, scipy.optimize.minimize(), Evolutionary algorithm, etc. ) for fitting experimental data to the model, as well as the specific algorithm used. How well does your data fit the model you selected? Provide a numerical value as well as a qualitative analysis, using your figure to explain. What are the limits of your model, within which you are confident of a good fit? Do you expect your system to operate outside of those limits? Submission Please include a Jupyter notebook with the following:\nDetailed description of the completed steps above (included inline with blocks alongside chunks of related code) Answers to the discussion points above Code used in solving the problem (inline in the report in code blocks) Raw data. If the data is too long to fit in your ipython notebook, provide the .csv or .xlsx files used to store the raw data Figure(s) of your data and model plotted in the same graph. Images of your experiment setup across multiple steps. Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document as well as the the jupyter notebook (.ipynb). Please ensure the jupyter notebook is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\nPlease also post the completed assignment to your team\u0026rsquo;s website as a rendered jupyter notebook, saved as markdown and uploaded to github.\n","permalink":"https://foldable-robotics.github.io/assignments/parameter-identification/","tags":null,"title":"Parameter Identification"},{"categories":null,"contents":"Introduction The purpose of this assignment is to decide as a team how you will split up the various Parameter ID tasks individually\nRubric Description Points Total 25 Instructions Identify and discuss the materials you plan to use in fabrication. Decide who will be obtaining those materials and distributing them.\nIdentify and Discuss the various parameters you plan to model in your simulation, including\nactuator modeling\ninput signal specification\nmass and inertia properties\nlink and/or joint stiffness\ndamping\nfriction\nDiscuss your plans for experimentally obtaining each of those values, and the model you would like to use for describing each phenomenon.\nIdentify and Discuss how you plan to prototype your system and assign one person to do that\nIdentify and Discuss how you plan to collect system-level motion or force data, including\nmethod (IMU, video, discrete joint sensors, force/torque sensing) data extraction approach Identify and Discuss your plan for shared simulation tasks\nwhich of you will be updating the code adding model fitting routines filtering, interpolating and otherwise massaging input data. Finally, identify and discuss any reporting tasks that may be needed\ncompiling information into a report (may be combined with the simulation if using Jupyter) Split each of these tasks to the individuals on your team, and come up with at least one deliverable for each person for the remainder of the week\nThe remaining tasks will be assigned to the group for next week\u0026rsquo;s assignment.\n","permalink":"https://foldable-robotics.github.io/assignments/parameter-id-plan/","tags":null,"title":"Parameter Identification Plan"},{"categories":null,"contents":"Classroom Purchases Item Link price 9\u0026quot;Laminator https://www.amazon.com/Scotch-Laminator-Technology-Automatically-TL906/dp/B00CLV8ZIU/ $52.99 13\u0026quot; Laminator https://www.amazon.com/dp/B00YZXPGX4/ $151.71 Muse M15 https://signwarehouse.com/collections/vinyl-cutters/products/muse-m15-crafters-starter-bundle $600 15 x 15 t-shirt-press https://www.amazon.com/VEVOR-Multifunctional-Sublimation-Transfer-Rotation/dp/B08X48DHPX/ $260 Parts for Team Kits Item $/Unit # Units Dynamixel XL330 23.9 2 OpenCM 9.04-C or\nOpenRB-150 23.8\n24.9 1 Rivets 26.20 Other Items Link units $/unit Subtotal #/unit # needed Breadboarding wire bundle https://www.adafruit.com/product/153 4 4.95 19.8 1 23 Half-size breadboard https://www.adafruit.com/product/64 0 5 0 1 23 6\u0026rsquo; USB A to micro cable https://www.amazon.com/AmazonBasics-Male-Micro-Cable-Black/dp/B07QD4WVLN%2C372\u0026amp;sr=1-10\u0026amp;th=1 0 21.43 0 5 23 pocket screwdriver https://www.amazon.com/dp/B09JNT52KH 0 12.99 0 10 23 ESP32 https://www.amazon.com/ESP-WROOM-32-Development-Microcontroller-Integrated-Compatible/dp/B08D5ZD528/ 2 19.68 39.36 3 23 kit ruler https://www.amazon.com/Plastic-Standard-Straight-Measuring-Student/dp/B07PHPK8S6/ 1 19.99 19.99 50 23 5V Power Supply https://www.amazon.com/Charger-Besgoods-Charging-Compatible-Wireless/dp/B07QK7PXZK/ 0 15.79 0 4 23 Construction paper https://www.amazon.com/Tru-Ray-Construction-P103031-Standard-Assorted/dp/B00008XPH8/ 23 3.62 83.26 1 23 CONN HEADER VERT 40POS 2.54MM https://www.digikey.com/en/products/detail/sullins-connector-solutions/PREC040SAAN-RC/2774814 5 0.454 2.27 1 23 Kit Stapler https://www.staples.com/swingline-tot-mini-stapler-12-sheet-capacity-black-1000-staples-swi79171/product_2537641 1 3.49 3.49 1 23 Kit Scissors https://www.staples.com/tru-red-5-non-stick-titanium-scissors-straight-handle-tr55021/product_24380503 2 2.25 4.5 1 23 Small Plastic Kit Bin x36 https://www.walmart.com/ip/Sterilite-6-Quart-Storage-Box-White/44785798?baseItemId=15442432 1 49.99 49.99 36 23 Small Plastic Kit Bin x1 https://www.walmart.com/ip/Sterilite-6-Quart-Storage-Box-White/15442432 0 1.28 0 1 0 ball-point pen https://www.amazon.com/BIC-Round-Ballpoint-Medium-36-Count/dp/B00347A8NK 1 6.19 6.19 36 23 Tape with dispenser https://www.amazon.com/OWLKELA-Refillable-Dispensers-Transparent-Dispenser/dp/B0997R1K7H 1 18.99 18.99 16 23 Micro Servo https://www.adafruit.com/product/169 18 5.95 107.1 1 46 CdS Cells 540nm 30 ~ 50kOhm @ 10 lux https://www.digikey.com/en/products/detail/nte-electronics-inc/02-LDR4/15648867 50 0.1956 9.78 1 46 6.8k resistor https://www.digikey.com/en/products/detail/stackpole-electronics-inc/CFM14JT6K80/1742256 0 1.7 0 50 46 Electrolytic Capacitor, 1000uF https://www.digikey.com/en/products/detail/nte-electronics-inc/VHT1000M6-3/11651322 0 0.108 0 1 69 6-ply railroad board, 22x28 https://www.amazon.com/School-Smart-Railroad-Thickness-Assorted/dp/B00PEFDAV2/ 0 73.25 0 100 230 Silicone Rubber Bands https://grifiti.com/products/grifiti-band-joes-18-silicone-bands-100pk 0 10 0 100 200 small plastic straws https://www.amazon.com/2000-Plastic-Coffee-Stirrers-Straws/dp/B08Y3VS69Q 1 7.99 7.99 2000 100 med plastic straws Large, High Temp Hot Glue sticks https://www.amazon.com/Ad-Tech-High-Temp-Glue-Sticks-Pkg/dp/B00DOAVA48/ 0 17.58 0 50 25 hot glue gun https://www.amazon.com/AdTech-0453-2-Temp-Temperature-White/dp/B001689XCQ/ 0 7.62 0 1 5.75 Class Stapler https://www.amazon.com/BOSTITCH-P6C-8-POWERCROWN-Stapling-Plier/dp/B0009HAHHA 0 27.48 0 1 1 Class Staples https://www.amazon.com/Bostitch-STCR50193-8-5M-Power-Staples/dp/B002JG3G86/ 0 15.25 0 1 1 USB-C to A converter https://www.amazon.com/gp/slredirect/picassoRedirect.html/ 5 9.99 49.95 1 5 fishing line https://www.amazon.com/Reaction-Tackle-Blue-100LB-150yd/dp/B07M5VF24B/?th=1\u0026amp;psc=1 0 17.99 0 1 1 bamboo coffee stirrers https://www.amazon.com/Royal-Bamboo-Coffee-Stirrers-Package/dp/B00R9CBJG6/ 0 14.68 0 500 500 sharpie https://www.amazon.com/Sharpie-30001-Permanent-Markers-Point/dp/B00006IFHD/ 1 8.48 8.48 12 6 18\u0026quot; ruler https://www.amazon.com/Westcott-Through-Acrylic-Ruler-Clear/dp/B001B0D7YY/ 6 4.49 26.94 1 6 micro servo horns https://www.adafruit.com/product/4251 10 1.25 12.5 1 10 Box of Staples https://www.staples.com/baseline-staples-25-leg-length-25000-box/product_24417341 0 4.99 0 5 1 Double Sided Tape https://www.staples.com/Scotch-Double-Sided-Tape-1-2-x-250-1-Core-3-pack-3136/product_649280 0 6.99 0 3 5.75 Class Scissor 3 Pack https://www.staples.com/westcott-titanium-bonded-8-titanium-multi-purpose-heavy-duty-scissors-sharp-tip-gray-yellow-3-box/product_24395089 0 29.49 0 3 3 googly eyes https://www.walmart.com/ip/Go-Create-Horizon-Group-Wiggly-Eyes-125-Pieces/47426808?athbdg=L1300 1 1.72 1.72 125 125 popsicle sticks https://www.walmart.com/ip/Go-Create-Jumbo-Wood-Craft-Sticks-75-Pack-Real-Wood-Craft-Sticks/19525319 1 2.97 2.97 75 75 pipe cleaners https://www.walmart.com/ip/Go-Create-Rainbow-Assorted-Color-Fuzzy-Sticks-100-Ct/19525339 1 2.38 2.38 100 100 small wooden dowels https://www.walmart.com/ip/Go-Create-Wood-Dowels-50-Pack-Wooden-Dowel-Rods/658354132 1 1.12 1.12 50 50 Staple Remover https://www.walmart.com/ip/Pen-Gear-Smart-Rustproof-Stapler-Remover-for-School-Office-Home-1-Pack-Black/247483328 0 1.32 0 1 3 Small Black Rubber Bands https://www.walmart.com/ip/Spartan-Super-Stretch-Rubber-Bands-Black-500-Count/10319240 0 1.43 0 500 200 Large Plastic Kit Bin https://www.walmart.com/ip/Sterilite-66-Qt-Latch-Box-Stadium-Blue/202840819?isPACOpen=true 1 7.88 7.88 1 1 Hole Punch https://www.walmart.com/ip/Westcott-Single-Hole-Puncher-Handheld-with-Soft-Grip-Scrapbooking-and-Crafting-Tool/922588967 0 3.22 0 1 3 laminating plastic / pouches\n","permalink":"https://foldable-robotics.github.io/course-documents/parts-list/","tags":null,"title":"Parts List"},{"categories":null,"contents":" %matplotlib inline Visit this matplotlib tutorial on 3d Plotting Another useful reference import matplotlib.pyplot as plt import numpy from math import pi from mpl_toolkits.mplot3d import Axes3D import idealab_tools.matplotlib_tools theta = numpy.r_[0:2*pi:40j] x = numpy.cos(theta) y = .5*numpy.sin(theta) z = numpy.sin(2*theta-pi/4) xyz = numpy.array([x,y,z]).T fig = plt.figure(); ax = fig.add_subplot(111, projection=\u0026#39;3d\u0026#39;); ax.view_init(30, 15) ax.plot3D(xyz[:,0],xyz[:,1],xyz[:,2]) idealab_tools.matplotlib_tools.equal_axes(ax,xyz) ","permalink":"https://foldable-robotics.github.io/modules/python/generated/3d-plotting/","tags":null,"title":"Plotting in 3D"},{"categories":null,"contents":"Assignment Overview Please prepare your group presentation based on your most recent project activities\nRubric Description Points Content Slide 1 35 Slide 2 35 Slide 3 35 Slide 4 35 Slide 5 35 Slide 6 0 Video 25 Total 200 Instructions Create a five-minute powerpoint(roughly 1 slide / minute):\nProject Introduction Team members Your team\u0026rsquo;s refined research question Biomechanics-driven inspiration Prior work on this animal Prior work related to similar robots Biomechanics-derived specifications Proposed mechanism Figure of Layout Picture of Prototype Kinematics Solution approach Estimate of Force/Torque required from actuator(s) Future Plans How does what you learned translate into future action by your team? References list all your references used in this slide Practice your presentation. Use the \u0026ldquo;record narration\u0026rdquo; feature to make it possible to save a narrated .mp4 of your presentation.\nYou will then present these slides in class (5 minute presentation max).\nFinally, after presenting, you will receive feedback from your classmates. Collect this feedback and use it to fine tune your project and presentation.\nSubmission Please include:\nPresentation file Link to your presentation\u0026rsquo;s youtube video. Please also embed your presentation in your team\u0026rsquo;s website. This will be check during the next website update assignment. Please follow all posted submission instructions.\nNo GDrive-Embedded Movies! Due to permissions issues that can crop up when presenting on other computers, please do not embed videos from google drive into your presentation. Embedding Video in Websites If embedding videos from youtube in your website, use the share \u0026ndash;\u0026gt; embed feature available on youtube to create html that you can paste directly into your makrdown document.\nTo embed mp4 video straight in your website, you can alternatively use the following code snippet:\n\u0026lt;iframe width=\u0026#34;420\u0026#34; height=\u0026#34;315\u0026#34; src=\u0026#34;pathtoyourvideo.mp4\u0026#34; frameborder=\u0026#34;0\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; Presentation Focus A successful project report/presentation will do the following:\nAddress deficiencies from the previous presentation. (not applicable in the first presentation) Discuss your progress using your project\u0026rsquo;s research question as the lens. What do you need to know and need to address to be successful in answering this question? Present the most recent design iteration. It should be a physical device, produced as a result of the last presentation. Bring it, show it, and \u0026ndash; in a normal year \u0026ndash; pass it around! Report observations you have made of the device moving, modeling and analysis results you have calculated, and/or sensor data you have obtained, depending on the most recent class topics and group assignments. By the end you should have considered the complete design workflow. The reporting of data should be related to the current class module and follow up from previous modules. Discuss how these observations translate into upcoming design changes, with regard to motion \u0026amp; kinematics, dynamics, sensing, control, etc. Present new concepts/renderings/animations, design files, etc. Answer any questions. ","permalink":"https://foldable-robotics.github.io/assignments/presentation-i/","tags":null,"title":"Presentation I"},{"categories":null,"contents":"Assignment Overview Please prepare your group presentation based on your most recent project activities\nRubric Description Points Content Slide 1 35 Slide 2 35 Slide 3 35 Slide 4 35 Slide 5 35 Slide 6 0 Video 25 Total 200 Instructions Review your team\u0026rsquo;s prior feedback.\nCreate a five-minute powerpoint(roughly 1 slide / minute):\nProject Update\nTeam members Your team\u0026rsquo;s refined research question Has your source of bio-inspiration changed? Have your specs changed based on the realities of physics, material selection, known payloads, etc? Dynamics. Please summarize:\nResults of Dynamics I assignment, including animation Forces and models you will be adding (motor, spring, beam-bending, etc), and Justify why you have made the modeling choices you have.\nData Collection, Parameter Identification, and Model Fitting\nTake through the plan and current status for obtaining and fitting models for each of the parameters used in your models for material properties, actuators, inertia values, etc. Include pictures / videos / simulations / figures of how your results fit reality as possible. Manufacturing\nDiscuss the 1-layer and 5-layer manufacturing designs Discuss manufacturability Discuss how / whether you used this in your prototyping. Future Plans\nHow does what you learned translate into future action by your team? References (backup slide)\nlist all your references used in this slide Practice your presentation. Use the \u0026ldquo;record narration\u0026rdquo; feature to make it possible to save a narrated .mp4 of your presentation.\nYou will then present these slides in class (5 minute presentation max).\nFinally, after presenting, you will receive feedback from your classmates. Collect this feedback and use it to fine tune your project and presentation.\nSubmission Please include:\nPresentation file Link to your presentation\u0026rsquo;s youtube video. Please also embed your presentation in your team\u0026rsquo;s website. This will be check during the next website update assignment. Please follow all posted submission instructions.\nNo GDrive-Embedded Movies! Due to permissions issues that can crop up when presenting on other computers, please do not embed videos from google drive into your presentation. Embedding Video in Websites If embedding videos from youtube in your website, use the share \u0026ndash;\u0026gt; embed feature available on youtube to create html that you can paste directly into your makrdown document.\nTo embed mp4 video straight in your website, you can alternatively use the following code snippet:\n\u0026lt;iframe width=\u0026#34;420\u0026#34; height=\u0026#34;315\u0026#34; src=\u0026#34;pathtoyourvideo.mp4\u0026#34; frameborder=\u0026#34;0\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; Presentation Focus A successful project report/presentation will do the following:\nAddress deficiencies from the previous presentation. (not applicable in the first presentation) Discuss your progress using your project\u0026rsquo;s research question as the lens. What do you need to know and need to address to be successful in answering this question? Present the most recent design iteration. It should be a physical device, produced as a result of the last presentation. Bring it, show it, and \u0026ndash; in a normal year \u0026ndash; pass it around! Report observations you have made of the device moving, modeling and analysis results you have calculated, and/or sensor data you have obtained, depending on the most recent class topics and group assignments. By the end you should have considered the complete design workflow. The reporting of data should be related to the current class module and follow up from previous modules. Discuss how these observations translate into upcoming design changes, with regard to motion \u0026amp; kinematics, dynamics, sensing, control, etc. Present new concepts/renderings/animations, design files, etc. Answer any questions. ","permalink":"https://foldable-robotics.github.io/assignments/presentation-ii/","tags":null,"title":"Presentation II"},{"categories":null,"contents":"Assignment Overview Please prepare your group presentation based on your most recent project activities\nRubric Description Points Content Slide 1 35 Slide 2 35 Slide 3 35 Slide 4 35 Slide 5 35 Slide 6 0 Video 25 Total 200 Instructions Review your team\u0026rsquo;s prior feedback.\nCreate a five-minute powerpoint(roughly 1 slide / minute):\nProject Update Team members Your team\u0026rsquo;s refined research question Parameter ID \u0026amp; Dynamics II Take us through how you obtained and fit models for each of the parameters used in your models for material properties, actuators, inertia values, etc. Discuss updates to your team\u0026rsquo;s model, that were informed by added knowledge of materials and system compliance Discuss whether/how you \u0026ldquo;released\u0026rdquo; your device from the ground frame via new state variables (if applicable) Discuss any new closed-loop constraints (if applicable) Discuss how you computed a valid initial condition (if applicable) How did you simulate actuator control signals (if applicable) Include pictures / videos / simulations / figures of how your results fit reality. Design Optimization \u0026amp; Validation Discuss the variables you were interested in investigating Discuss performance metric selection Discussion of bounds and constraints How did you set up your experimental validation procedure to test for agreement with your model? Plot model-based optimization \u0026amp; experimental results and compare. Final Prototype Overview how the final device was made, materials, layer counts Discuss any changes to manufacturing computation Discuss attachment to off-the-shelf components Show the final cut files Demonstrate its operation Conclusions What is the impact of this work? To roboticists To the broader research community To the public What remains to be done to answer your research question? References (extra slide) list all your references used in this slide Practice your presentation. Use the \u0026ldquo;record narration\u0026rdquo; feature to make it possible to save a narrated .mp4 of your presentation.\nYou will then present these slides in class (5 minute presentation max).\nFinally, after presenting, you will receive feedback from your classmates. Collect this feedback and use it to fine tune your project and presentation.\nSubmission Please include:\nPresentation file Link to your presentation\u0026rsquo;s youtube video. Please also embed your presentation in your team\u0026rsquo;s website. This will be check during the next website update assignment. Please follow all posted submission instructions.\nNo GDrive-Embedded Movies! Due to permissions issues that can crop up when presenting on other computers, please do not embed videos from google drive into your presentation. Embedding Video in Websites If embedding videos from youtube in your website, use the share \u0026ndash;\u0026gt; embed feature available on youtube to create html that you can paste directly into your makrdown document.\nTo embed mp4 video straight in your website, you can alternatively use the following code snippet:\n\u0026lt;iframe width=\u0026#34;420\u0026#34; height=\u0026#34;315\u0026#34; src=\u0026#34;pathtoyourvideo.mp4\u0026#34; frameborder=\u0026#34;0\u0026#34; allowfullscreen\u0026gt;\u0026lt;/iframe\u0026gt; Presentation Focus A successful project report/presentation will do the following:\nAddress deficiencies from the previous presentation. (not applicable in the first presentation) Discuss your progress using your project\u0026rsquo;s research question as the lens. What do you need to know and need to address to be successful in answering this question? Present the most recent design iteration. It should be a physical device, produced as a result of the last presentation. Bring it, show it, and \u0026ndash; in a normal year \u0026ndash; pass it around! Report observations you have made of the device moving, modeling and analysis results you have calculated, and/or sensor data you have obtained, depending on the most recent class topics and group assignments. By the end you should have considered the complete design workflow. The reporting of data should be related to the current class module and follow up from previous modules. Discuss how these observations translate into upcoming design changes, with regard to motion \u0026amp; kinematics, dynamics, sensing, control, etc. Present new concepts/renderings/animations, design files, etc. Answer any questions. ","permalink":"https://foldable-robotics.github.io/assignments/presentation-iii/","tags":null,"title":"Presentation III"},{"categories":null,"contents":"Overview The goal of this assignment is to permit those interested in pitching their ideas to attract a group of people interested in joining them. This pitch will be used to inspire and promote discussion amongst students before teams are formed.\nThis is your opportunity to shape your semester and to accomplish a personal research goal through class. If, after group discussion, you wish to create other pitches, you may upload them independently to the Google Drive Folder listed below.\nRubric Description Points Your Slide 100 Total 100 Instructions Prior To Class Read through this module. Create one slide summarizing an idea that can be studied through a Foldable Robotics team project include points as to how your project satisfies the points discussed in the reading. include any personal motivation 1 During Class (~40 minutes) Break into small, 4-person groups in class\nSpend 2 minutes each presenting just your research question. (~8 minutes total)\nSpend 5 minutes discussing the merits of each question against the discussion points.\nSpend 5 minutes expanding on a selected research question and improving it. As a group, expand the one slide to three slides:\nSlide #1 should introduce your research question. Include the members of your group. Slide #2 should address how that particular question is interesting and worthy of study Slide #3 should address how that particular question can be answered in a tractable way that fits within the definition of Foldable Robotics Do not spend time making your presentation pretty. Teams that form around this idea will do this later.\nReport back to the main room to present your three slides to the rest of the class (3 minutes each x 7 = 21 minutes).\nPost your team\u0026rsquo;s slides to this google drive folder so they can be reviewed offline and voted upon. Name your slides \u0026ldquo;zoom_room_name.pptx\u0026rdquo;.\nSubmission For the graded portion of your submission, please include the slide you brought to class.\nPlease follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. The presentation slide should be submitted as a pdf or pptx.\nthis is your opportunity to shape your semester and to accomplish a personal goal through class\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://foldable-robotics.github.io/assignments/project-pitch/","tags":null,"title":"Project Pitch"},{"categories":null,"contents":"Introduction Instructions Please fill out this survey to indicate your ranked project preferences. Only one team can answer each distinct research question.\nSubmission Please complete your survey by the deadline noted in Canvas.\n","permalink":"https://foldable-robotics.github.io/assignments/project-selection-survey/","tags":null,"title":"Project Selection Survey"},{"categories":null,"contents":" Now What? More Python Making your programs for others Releasing your code Licensing Collaborating Testing / Building Imports Imports should always be written at the top of the file, after any module comments and docstrings.\nImports should be divided according to what is being imported. There are generally three groups:\nstandard library imports (Python’s built-in modules) related third party imports (modules that are installed and do not belong to the current application) local application imports (modules that belong to the current application) Each group of imports should be separated by a blank space.\nhttps://pep8.org/#imports\nNaming Conventions Functions \u0026amp; Variables: lowercase with underscores\nEx: my_special_number, square_root Classes: Use CamelCase\nEx: MyClass, RigidBody, AddressBook Constants\nGRAVITY=9.81 https://pep8.org/#overriding-principle\nStructuring your Python projects Classes* – Containers of data \u0026amp; functions\nModules* – individual python files\nPackages* – like folders of files, often structured that way too\nProjects* – Multiple packages, documentation, examples, unit tests, and distribution code all put together\ncan be much more complicated than this Classes Classes vs Class Instances Inheritance Object class Instance Methods, Class Methods, Methods Make a Class Instance Methods \u0026amp; Class Methods Modules Typical structure: Import packages \u0026amp; modules Define functions Code which always gets run, on import or main Test for main Run local script Packages Typically a folder with code grouped together /folder – this name is the name of the package __init__.py – required to be a package module1.py - submodules module2.py If you want to load a package it should be in your python path. __init__.py gets run when you import a package. Can use this to pre-load submodules or define constants, etc. Packages Any folder with an __init__.py file in it Must be somewhere in PYTHONPATH Packages you already have spyder: Python GUI pyyaml: read/write yaml files (like json) numpy, scipy: arrays and linear algebra sympy: symbolic equations pyqt: GUI development pyopengl, pyqtgraph: matplotlib: plotting jupyter: web-based inline interactive coding shapely: 2D geometry engine pillow, lxml, pandoc, ezdxf, imageio, meshio, Pypoly2tri, idealab_tools, foldable_robotics, pynamics cython: c compiler for python Other Packages OpenCV networkX sphinx tornado pycairo – graphics library for pdf, svg… gitpython – work with git pythonocc – CAD kivy – Android-compatible gui framework pyserial pygame Python Path The list of directories python searches for your code in Looks first in the folder you are running the script from Secondarily, looks in all the places you have added in your $PYTHONPATH environment variable Third, looks in Python system directories (many of them, different by os) This list can be viewed and edited in the sys module under the path variable Projects /Project /documentation /examples /python /package1 __init__.py /subpackage1 __init__.py /package2 __init__.py /licenses – where you put the licenses of the code you are reusing with permission setup.py LICENSE README Example: foldable_robotics Speeding up Python Python is interpreted, not compiled. How do you work with compiled code? Simplest way: load_dll Requires that dll to be in your system path, machine dependent. Try cython. Convert your python code into c Compile your c code into a dll doesn’t have to be from python originally Now supports c++! (with some glue code) Requires a compiler to be installed Import the dll just like a normal python module However, machine dependent. Example: pypoly2tri Making Windows and applications PyQt4 / PyQt5 / PySide – Qt Many others, but this is very cross-platform, used a lot, etc Already have PyQt5 installed in your anaconda distribution Way to create windows, menus, etc Turn your script into a user application Example: putting matplotlib in a window https://github.com/idealabasu/code_idealab_empty_project Collaborative projects Git – versioning tool Command-line tool for tracking and committing changes many guis available I suggest \u0026ldquo;git-extensions\u0026rdquo; for windows Github website built around git: https://github.com/ Other collaboration tools Documentation, bugtracking, code releases Integration with other services Concept of GIT Work simultaneously, merge your code when ready There is no central administration, repositories can be local or on the web Create branches to manage Example Licensing – really important Strongly encourage you to learn about licensing. The future of your work depends on it. Copyright and who owns it. \u0026ldquo;What is Open source?\u0026rdquo; Ability to see/use/change/release others’ code? Ability to use others’ code with your code Copyright vs copyleft GPL, LGPL, MIT, BSD, Apache Distributing your Code setup.py Make a pip project and deploying to Pypi https://packaging.python.org/tutorials/packaging-projects/ Freezing your code Py2exe,pyinstaller, cx_freeze, Creating an Anaconda package Setup script This is the basic way to release and install python code. Installing moves project code from local folder to python system directory. Download source, open command terminal, type \u0026ldquo;python setup.py install\u0026rdquo; Can also build, build_ext, etc. Being phased out in favor of pip Setup script still important Future This class One of a kind Still emerging Chance to define it Research Open field Can move faster New manufacturing processes need new design tools Wrapup You’ve built many parts you find in CAD Motion analysis – nonlinear constraint solving – how sketches are dimensioned, how assemblies are moved around. Python code for Constructive Solid Geometry Union, difference, intersection Manufacturing Accessing the functions for understanding the manufacturing process Dynamics? Some Stiffness? Some Kinematics? Some ","permalink":"https://foldable-robotics.github.io/modules/python/python-development/","tags":null,"title":"Python Development"},{"categories":null,"contents":"Introduction The purpose of this assignment is to get to know Python and Juptyer Notebook.\nResources Python Basic Intro Control Flow: For, if, etc For loops List Comprehensions in Python Arrays NumPy for Matlab users Quickstart Tutorial Absolute Beginners Tutorial Plotting with Matplotlib Matplotlib Tutorials, specifically the pyplot tutorial General Examples and pyplot examples titles equal axis savefig() examples Rubric Description Points Looping 30 Arrays 30 Plotting 40 Total 100 Instructions open jupyter notebook by opening a command prompt and typing jupyter notebook in the first code window add this command: %matplotlib inline. This will generate inline plots. Run the command by typing \u0026ldquo;shift+enter\u0026rdquo;. Looping Read through the above references as well as searching online to become familiar with Python for loops and lists. create a list called list1 filled with the values 1,2,4,'a' and True iterate through and print() each item in the list. Arrays Read through the above references as well as searching online to become familiar with numpy arrays, and their differences from Matlab Create a new list(call it list2) using the range() function, from 0 to 5 Create a numpy array from list2. Call it x Use the numpy.sin() function to compute the sin of x. Call the answer y. Plotting Read through the above references as well as searching online to become familiar with plotting using the matplotlib package. Create a new matplotlib figure, call it f plot x vs y from the previous step set axes to equal proportions Title your figure and axes with something descriptive. Save your figure as a pdf in your python script. Submission Please include a Jupyter notebook with the following:\nDetailed description of the completed steps above (included as blocks alongside chunks of related code) Code used in solving the problem (inline in the report in code blocks), along with descriptions detailing your approach. Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document as well as a jupyter notebook (.ipynb). If submitted as a notebook, make sure it is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\n","permalink":"https://foldable-robotics.github.io/assignments/python-for-loops-arrays-and-plotting/","tags":null,"title":"Python for Loops. Arrays. and Plotting"},{"categories":null,"contents":"Introduction The purpose of this assignment is to get you comfortable understanding the basics of python functions and how to use them with arguments and keyword arguments\nBefore starting this assignment, please become familiar with Python functions, including how you declare and call them.\nRubric Description Points Code 70 Report 30 Total 100 Resources *args and **kwargs in python explained NumPy for Matlab users Instructions Create a function sum1() that takes two arguments x and y and returns their sum. Demonstrate your working function by running the following commands:\nprint(sum1(2,3)) print(sum1(x=3,y=4)) Create a function sum2() that takes two arguments x and y with default values of 10 and 20, respectively, and returns their sum. Demonstrate your working function by running the following commands:\nprint(sum2()) print(sum2(2)) print(sum2(y=5)) Create a list of 100 elements called list1 using range().\nCreate a function sum3() that takes n arguments and computes their sum. Demonstrate your working function by running the following commands:\nprint(sum3()) print(sum3(2,3)) print(sum3(*list1)) Create a dictionary using the following code:\ndict1={\u0026#39;item1\u0026#39;:4, \u0026#39;item2\u0026#39;:7} Create a function sum4() that takes n keyword arguments, prints each key, and computes the sum of all keyed values. Demonstrate your working function by running the following commands\nprint(sum4()) print(sum4(x=2,y=3)) print(sum4(**dict1)) Create a function sum5() which sums an arbitrary number of arguments and the values of any keyword arguments, and prints the key of each keyword arguments. Demonstrate your working function by running the following commands\nprint(sum5()) print(sum5(3,4,x=2,y=3)) print(sum5(*list1,**dict1)) Discussion Describe what happens to x when supplying a function with * within a function call, as in function1(*x).\nDescribe what happens to x when supplying a function with ** within a function call, as in function1(**x).\nIf a function is declared with variables x and y, as specified below, using the * and ** arguments, please describe in what form(data type) those variables are delivered to function, and how to access sub-elements contained within them.\ndef arbitrary_function(*x,**y): #put code here return arbitrary_value Submission Please include a Jupyter notebook and pdf with the following:\nDetailed description of the completed steps above (included as blocks alongside chunks of related code) Code used in solving the problem (inline in the report in code blocks), along with descriptions detailing your approach. Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document as well as a jupyter notebook (.ipynb). If submitted as a notebook, make sure it is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\n","permalink":"https://foldable-robotics.github.io/assignments/python-functions/","tags":null,"title":"Python Functions"},{"categories":null,"contents":"Introduction Robotics is multidisciplinary. Foldable robotics draws from the following fields\nMechanical Design - The process of determining the parameters and their values that should be used in creating a physical device. Dynamics - The study of how forces create motion. Kinematics - The study of how geometric rules drive motion/force relationships, and how those rules can be applied to systems of linkages, gears, and other mechanisms. Optimization - The study of how to arrive at a set of parameters that achieves a stated goal. Mechanics - The study of how materials bend and flex under load (stress and strain). Material Science - The study of how to compose, improve, and engineer matter and materials. Controls - The study of how to add power to physical systems through actuation to achieve a certain performance goal. CAD - Computer Aided Design. A wide range of tools used in the design process Biomechanics - The study of how anmimals move Computer Science: Programming, Machine Learning / AI, Planning \u0026amp; Decision-Making Mechatronics \u0026amp; Embedded Systems: Circuits, Hardware, Microcontrollers, Programming, Communication, and Debugging ","permalink":"https://foldable-robotics.github.io/modules/introduction/robotics-domains/","tags":null,"title":"Robotics Domains"},{"categories":null,"contents":"Introduction While there may be many ways to navigate and describe the same three-dimensional space using reference frames, it is also necessary and desireable to be able to change representations; this can be useful for interpreting motion from a differet perspective, for adding forces or torques to a system using dirctional components which are a more natural description, or in order to perform mathematical operations between vectors which are represented by different basis vectors. The method by which we represent one frame to another is through the concept of rotations.\nRotations may be described in a number of ways, including axis,angle representations, quaternions, Euler parameters, Euler vectors, Rodrigues\u0026rsquo; parameters, etc. Each representation has its benefits and drawbacks, but at the end of the day, each of these methods is simply a way to find the rotational relationships between reference frames and the basis vectors they contain. A rotation is a specific type of vector transformation that 1) Preserve length and 2), preserve angles between vectors. Generically, we may think of rotational transformations as permitting the same vector to be represented using a new set of basis vectors, or, in another way of thinking, to actually rotate a body into a new orientation with relation to some other frame. The first one is a change of representation, while the second indicates actual motion.\nIn pynamics, the rotation class can be created in a variety of ways. You may supply a 3x3 matrix directly, generate one using an axis, angle pair, or create one by defining a rotation along an x,y,or z axis. Rotations in pynamics are stored as $3x3$ matrices. Rotations do not have to be fixed, as the matrices which encode their information can hold variables. Thus, axis,angle pairs themselves may be composed of one or more variables.\nRotation classes in pynamics must be defined as the relationship between two existing frames. Thus, rotations between frames must be created after the frames themselves. Only one rotation may be stored between two reference frames. (though there are ways to represent more than one). Progrmmaticaly, this is because pynamics uses the rotational connections defined by the user in determining the shortest and simplest possible representation for vectors when performing vector operations, and having multiple pathways would undesireably increase computational cost and complexity.\nTheory $$ \\begin{array}{c|c c c} {}^N{\\textbf{R}}^{A} \u0026amp; \\hat{a}_x \u0026amp;\\hat{a}_y \u0026amp; \\hat{a}_z\\\\ \\hline \\hat{n}_x \u0026amp;\\cos q\u0026amp;-\\sin q \u0026amp;0 \\\\ \\hat{n}_y \u0026amp;\\sin q\u0026amp; \\cos q \u0026amp;0 \\\\ \\hat{n}_z \u0026amp;0\u0026amp;0\u0026amp;1 \\end{array} $$\nExample import pynamics from pynamics.system import System from pynamics.frame import Frame import sympy system = System() pynamics.set_system(__name__,system) a = sympy.symbols(\u0026#39;a\u0026#39;) N = Frame(\u0026#39;N\u0026#39;,system) A = Frame(\u0026#39;A\u0026#39;,system) #system.set_newtonian(N) A.rotate_fixed_axis(N,[0,0,1],a,system) result = A.get_r_from(N) result Matrix([ [ cos(a), sin(a), 0], [-sin(a), cos(a), 0], [ 0, 0, 1]]) del system,N,A,a Usage Rotations are used throughout pynamics but they are not utilized directly very often, other than for debugging purposes. Use cases include\nGenerating basis vectors for use in general-purpose vector creation They can be used with constants to generate fixed changes of reference They are used in conjunction with differentiable state variables to determine rotational velocity and acceleration between frames Rotations in pynamics are typically generated in a sequential order from a base, or Newtonian frame (a non-accelerating world frame). The ordering is not required, because internally pynamics establishes connections to neighboring rotations by creating a tree-like map of all frames connected to each other. This can be done with or without explicitly defining the Newtonian frame first (though other functions dealing with differentiation require this declaration first)\nMultiple Rotations Rotations can be chained together and resolved into a single expression:\n$${}^N{\\textbf{R}}^{B} = {}^{N}{\\textbf{R}}^{A} {}^N{\\textbf{R}}^{B}$$\nimport pynamics from pynamics.system import System from pynamics.frame import Frame import sympy system = System() pynamics.set_system(__name__,system) a,b = sympy.symbols(\u0026#39;a,b\u0026#39;) N = Frame(\u0026#39;N\u0026#39;,system) A = Frame(\u0026#39;A\u0026#39;,system) B = Frame(\u0026#39;B\u0026#39;,system) #system.set_newtonian(N) A.rotate_fixed_axis(N,[0,0,1],a,system) B.rotate_fixed_axis(A,[0,1,0],b,system) R_BA = B.get_r_from(A) R_AN = A.get_r_from(N) RBN2 = R_BA*R_AN RBN2 Matrix([ [cos(a)*cos(b), sin(a)*cos(b), -sin(b)], [ -sin(a), cos(a), 0], [sin(b)*cos(a), sin(a)*sin(b), cos(b)]]) #------ R_BN = B.get_r_from(N) R_BN Matrix([ [cos(a)*cos(b), sin(a)*cos(b), -sin(b)], [ -sin(a), cos(a), 0], [sin(b)*cos(a), sin(a)*sin(b), cos(b)]]) del a,b,N,A,B ","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/01-rotations/","tags":null,"title":"Rotations"},{"categories":null,"contents":"Install Arduino IDE and OpenCM9.04 Software Install OpenCM9.04 USB CDC driver - Driver Download\nInstall Arduino IDE - Arduino IDE\nAfter Arduino IDE is run, click File \u0026ndash;\u0026gt; Preferences in top menu of IDE\nCopy and paste the following link to the Additional Boards Manager URLs textbox\nhttps://raw.githubusercontent.com/ROBOTIS-GIT/OpenCM9.04/master/arduino/opencm_release/package_opencm9.04_index.json\nClick Tools \u0026ndash;\u0026gt; Board \u0026ndash;\u0026gt; Boards Manager\nType OpenCM9.04 into the textbox to find the OpenCM9.04 by ROBOTIS package. Click Install. After Installation, \u0026ldquo;INSTALLED\u0026rdquo; will appear\nCheck if OpenCM9.04 Board is now on the list of Tools \u0026ndash;\u0026gt; Board. Click this to import the OpenCM9.04 Board source.\nII. [Run Dynamixel X-Series Servo Using OpenCM9.04 Board]{.underline}\nClick File \u0026ndash;\u0026gt; Examples \u0026ndash;\u0026gt; OpenCM9.04 \u0026ndash;\u0026gt; 07_DynamixelSDK \u0026ndash;\u0026gt; Protocol 2.0 \u0026ndash;\u0026gt; read_write\nIf these are not the values on your table then change what is on your screen so it looks like this\nClick Tools Serial Monitor\nPress any key and hit enter to run the Dynamixel X-Series Motor.\n","permalink":"https://foldable-robotics.github.io/modules/integration/dynamixel/","tags":null,"title":"Running Dynamixel X-Series Using Arduino IDE for OpenCM9.04"},{"categories":null,"contents":"This short example shows you how to use the scipy minimize function to identify model parameters. This example is set up similarly to the linear least squares example for consistency. Being able to define pretty much anything in a python function, however, gives you great power to customize this, as opposed to a specific approach like linear least squares.\nFirst, we import all the necessary modules\n%matplotlib inline import numpy import numpy.random import matplotlib.pyplot as plt import numpy.linalg import scipy.optimize Next create the x matrix\nx = numpy.r_[-10:10:.5] Next, define a y vector based on some model. Note: you can use any of these models or add them together. We scale the output in this example to eliminate the natural weighting of each of these functions over the given range.\n#y = x y = x**2 #y = x**3 #y = numpy.sin(x) y /= y.max() Add some noise to y:\nrand = numpy.random.randn(*y.shape)/10 y_rand = y + rand plt.plot(x,y) plt.plot(x,y_rand,\u0026#39;o\u0026#39;) [\u0026lt;matplotlib.lines.Line2D at 0x7f860d882a30\u0026gt;] Create an A matrix consisting of several different models\nA = numpy.array([(x),(x)**2,(x)**3,numpy.sin(x)]).T Now create a function that outputs the sum of squared error of each model applied to the given x. In this case we are solving for the weighting coefficients, $k$, as in the linear least squares example:\ndef myfunc(k): # make sure our coefficients are in the form of a numpy array k = numpy.array(k) # generate y* = Ak^T y_model = A.dot(k.T) # sum the square of the error of our model against the input data, y_rand error = ((y_model-y_rand)**2).sum() #return the error return error Create an initial guess for each of the weights. In this case we just give each coefficient the value of 1 as an initial guess\nini = [1]*A.shape[1] ini [1, 1, 1, 1] Now, call the minimize function. The first value should be the function you are trying to minimize, and the For more information see the optimization function page\nsol = scipy.optimize.minimize(myfunc,ini) sol fun: 0.29336548348717617 hess_inv: array([[ 2.35078351e-03, -1.23710160e-05, -3.31813423e-05, 4.86251949e-04], [-1.23710160e-05, 6.46844761e-06, 3.00084328e-07, -3.66529338e-05], [-3.31813423e-05, 3.00084328e-07, 5.62458836e-07, -1.91576150e-05], [ 4.86251949e-04, -3.66529338e-05, -1.91576150e-05, 2.78470176e-02]]) jac: array([3.7252903e-09, 3.7252903e-09, 3.7252903e-09, 0.0000000e+00]) message: 'Optimization terminated successfully.' nfev: 65 nit: 9 njev: 13 status: 0 success: True x: array([-1.13654781e-03, 1.09398078e-02, -2.22292008e-05, 1.93916411e-02]) sol.x contains the solution for $k$\nk_optimum = sol.x k_optimum array([-1.13654781e-03, 1.09398078e-02, -2.22292008e-05, 1.93916411e-02]) xx = numpy.r_[:4] labels = \u0026#39;$x$\u0026#39;,\u0026#39;$x^2$\u0026#39;,\u0026#39;$x^3$\u0026#39;,\u0026#39;$\\sin(x)$\u0026#39; f = plt.figure() ax = f.add_subplot() ax.bar(xx,k_optimum) ax.set_xticks(xx) ax.set_xticklabels(labels) [Text(0, 0, '$x$'), Text(1, 0, '$x^2$'), Text(2, 0, '$x^3$'), Text(3, 0, '$\\\\sin(x)$')] Now generate $y^*$\ny_model = A.dot(k_optimum.T) Plot the model against the input data\nfig = plt.figure() ax = fig.add_subplot() a = ax.plot(x,y_rand,\u0026#39;.\u0026#39;) b = ax.plot(x,y_model) ax.legend(a+b,[\u0026#39;data\u0026#39;,\u0026#39;model\u0026#39;]) \u0026lt;matplotlib.legend.Legend at 0x7f860ce494f0\u0026gt; And plot the residual as well\nplt.figure() plt.plot(x,y_model-y_rand) [\u0026lt;matplotlib.lines.Line2D at 0x7f860cdb2d00\u0026gt;] Now try other models, higher resolution data, and different domains\n","permalink":"https://foldable-robotics.github.io/modules/optimization/generated/02-scipy-optimization-example/","tags":null,"title":"Scipy Optimization Example"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml ``` [outputs] home = [\u0026ldquo;HTML\u0026rdquo;, \u0026ldquo;JSON\u0026rdquo;] ```\nSearching additional fileds To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category ``` \u0026hellip; \u0026ldquo;contents\u0026rdquo;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026ldquo;tags\u0026rdquo;:{{ .Params.tags | jsonify }}{{end}}, \u0026ldquo;categories\u0026rdquo; : {{ .Params.categories | jsonify }}, \u0026hellip; ```\nEdit fuse.js options to Search static/js/search.js ``` keys: [ \u0026ldquo;title\u0026rdquo;, \u0026ldquo;contents\u0026rdquo;, \u0026ldquo;tags\u0026rdquo;, \u0026ldquo;categories\u0026rdquo; ] ```\n","permalink":"https://foldable-robotics.github.io/search/","tags":null,"title":"Search Results"},{"categories":null,"contents":"Many of the devices you will prototype are highly nonlinear mechanisms which may have certain charactersitics which are hard to solve for in your typical CAD sketcher.\nSingularities can be described as a mathematical or mechanical condition in which one or more degrees of freedom of your device or of your description of the device \u0026ndash; can no longer be controlled or solved for. A typical kinematic singularity may be seen\nMechanism Singularities One of the biggest challegnes of foldable devices is that they all start off flat. Which means they all start off in a mechanism singularity. This is probably the worst way to start, as it means that the device, when assembled or erected into its final configuration, could be pushed into more than one valid state. Furthermore, if designed wrong, a mechanism may slip past a singularity and be unable to escape it. This is exacerbated by the fact that foldable mechanisms cannot rotate freely more than +/- 180 degrees, meaning that you have to go back the way you came, rather than rotate through a second singularity.\nThis means that the user has to take care during the design process to avoid mechanism singularities during assembly and operation.\nRepresentational Singularities Another type of singularity occurs when the mathematical framework used to describe your mechanism loses a degree of freedom due to redundancy in the description. A trivial example would be using a three-dimensional space to describe a planar mechanism. Consider a four-bar mechanism for example, in which all of the vectors used to describe the mechanism exist in the x-y plane. If you use a three-dimensional description, ie, include the z values for all the points in your mechanism \u0026ndash; then solving for your system will always result in a singular matrix, as the column of z values may take any value and still produce a consistent and valid mechanism. Even though the mechanism may be in a valid configuration, the description cannot be used to solve for it.\nSolver problems The solvers used to solve a constrained sketch are typically fairly robust, as they must permit interaction with human designers in such a way that humans can drag sketch elements around throughout the sketch\u0026rsquo;s degrees of freedom, yet must also remain accurate. However, these sketchers often have some problems associated with them that you will also see in complex, nonlinear assemblies. First, the software may not always expose all the degrees of freedom or permit the user to freely drag sketch elements around in an inuitive fashion. A user may see only one or two degrees of freedom when the sketch has many more which are simply not moving in accordance to the user\u0026rsquo;s specific motion commands. There are several ways to explore the degrees of freedom of a device with more surety\nLock all degrees of freedom but one - You can either fix elements or establish temporary relational constratints between elements to lock down parts of your mechanism you are not interested in. Switch your handle or dragged element. Often the solver uses a users\u0026rsquo;s motion command filtered through the element and at the point specified by the user. By subtley changing the location or body which is being dragged, the user can find additional degrees of freedom. Kinematics via Sketches Another great way to explore designs is by sketching kinematics in 2D or 3D in CAD software. This section describes how to use engineering sketches in CAD to accomplish basic motion studies.\nLet\u0026rsquo;s assume you would like to create a folding mechanism in two dimensions. The two dimensional assumption is easier to discuss in book form, as 2D images are easier to understand. The exention to a 3d design is trivial in concept, but in practice it is much harder to sketch due to the same issues of typically having a 2d interaction with a 3d design space. So for the purposes of simplicity we\u0026rsquo;ll discuss 2d mechanisms.\nKinematics Computation We now enter the part of the process which can be assisted by scripting. The workflow is simple. You have been working in the physical world, and have translated your physical prototype to a sketch\nThe next step is to compute the kinematics of this device. There are several limitations to foldable devices which must be discussed. First, most origami-inspired devices typically start flat, as they are typically manufactured from flat sheets of material(paper, plastic, cardboard, fiberglass, carbon fiber, metal). The ability of a mechanism to be foldable from a flat sheet is defined as \u0026ldquo;flat-foldability\u0026rdquo;. This makes manufacturing easier but comes with several implications.\nFirst, when a device starts as a flat sheet, it can be considered to be in a \u0026ldquo;singular\u0026rdquo; configuration. This occurs when one or more of the mechanism\u0026rsquo;s joints simultaneously align on a plane, making it impossible to move the mechanism in ways it would otherwise be able to. Singularities in the middle of a mechanism\u0026rsquo;s workspace typically need to be avoided, as these conditions typically make the device uncontrollable.\nA singularity is often also accompanied by a kinematic inversion. An inversion occurs when links in a devices kinematics pass through an inversion, occupying a valid state in which many of the other links occupy the same states as in the uninverted state. With an inverted four-bar linkage, as seen above, the implications on the motion of this transmission is that the motion of the lower link no longer leads to the same motion of the upper link. The rates of change, being state-based, are quite different (the rates of change of the links are opposite each other when compared to the uninverted state). This means that the motion of the input linkage cannot be used to drive the motion of the output to and through its singularity alone. If it emerges on the other side of a singularity in an inverted state, the input link cannot move it in the same way nor can it get it out on its own through its own rotation.\nAs a foldable mechanism typically starts in a flat state when it emerges from the manufacturing stages, care must be taken to assemble it (often by hand) into its desired configuration, and that the resulting design must be kept appropriately away from singularities. The problem can become harder with soft mechanisms, as soft mechanisms may bend and flex in ways unintended by the rigid kinematics, which pushes the devices through a singularity.\nSingularities also make the analysis of flat-foldable mechanisms tricky, as the user must supply the intended state of the mechanism in order to\nIf trying to replicate a traditional robot, there are several caveats to making a paper robot which can do the same thing. First, a device constructed from hinges is limited by the travel of each hinge. At most, an ideally-thin sheet of material may only bend +/- 180 degrees. Any continuous rotations must be handled outside of your hinging mechanism. That is fine, and later sections deal with integrating other devices with your printable mechanism.\nHinge lines may be imported for kinematics study, just as body lines are imported for manufacturing file generation. For this we recommend importing just the body and hinge information in order to infer link-link connections to establish the topology, for plotting.\nFurther Reading ( Citation: Gosselin\u0026#32;\u0026amp;\u0026#32;Angeles,\u0026#32;1990 Gosselin,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Angeles,\u0026#32; J. \u0026#32; (1990). \u0026#32;Singularity analysis of closed-loop kinematic chains. IEEE Transactions on Robotics and Automation,\u0026#32;6(3).\u0026#32;281–290. https://doi.org/10.1109/70.56660 ) , ( Citation: McCarthy\u0026#32;\u0026amp;\u0026#32;Soh,\u0026#32;2011 McCarthy,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Soh,\u0026#32; G.\u0026#32; (2011). \u0026#32; Geometric Design of Linkages. \u0026#32; Springer New York. https://doi.org/10.1007/978-1-4419-7892-9 ) , ( Citation: Waldron,\u0026#32;1966 Waldron,\u0026#32; K. \u0026#32; (1966). \u0026#32;The constraint analysis of mechanisms. Journal of Mechanisms,\u0026#32;1(2).\u0026#32;101–114. https://doi.org/10.1016/0022-2569(66)90016-4 ) Bibliography Gosselin\u0026#32;\u0026amp;\u0026#32;Angeles (1990) Gosselin,\u0026#32; C.\u0026#32;\u0026amp;\u0026#32;Angeles,\u0026#32; J. \u0026#32; (1990). \u0026#32;Singularity analysis of closed-loop kinematic chains. IEEE Transactions on Robotics and Automation,\u0026#32;6(3).\u0026#32;281–290. https://doi.org/10.1109/70.56660 McCarthy\u0026#32;\u0026amp;\u0026#32;Soh (2011) McCarthy,\u0026#32; J.\u0026#32;\u0026amp;\u0026#32;Soh,\u0026#32; G.\u0026#32; (2011). \u0026#32; Geometric Design of Linkages. \u0026#32; Springer New York. https://doi.org/10.1007/978-1-4419-7892-9 Waldron (1966) Waldron,\u0026#32; K. \u0026#32; (1966). \u0026#32;The constraint analysis of mechanisms. Journal of Mechanisms,\u0026#32;1(2).\u0026#32;101–114. https://doi.org/10.1016/0022-2569(66)90016-4 ","permalink":"https://foldable-robotics.github.io/modules/kinematics/singularities-and-solver-problems/","tags":["singularities","kinematics","solvers"],"title":"Singularities and Solver Problems"},{"categories":null,"contents":"Introduction External References https://scikit-image.org/docs/stable/index.html https://datacarpentry.org/image-processing/aio/index.html # -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Created on Wed Aug 18 14:24:17 2021 @author: danaukes \u0026#34;\u0026#34;\u0026#34; '\\nCreated on Wed Aug 18 14:24:17 2021\\n\\n@author: danaukes\\n' import skimage import skimage.color import skimage.filters import skimage.io import skimage.measure import matplotlib.pyplot as plt import matplotlib.cm as cm import shapely.geometry as sg import foldable_robotics from foldable_robotics.layer import Layer foldable_robotics.resolution = 10 import ladybug_geometry_polyskel.polyskel as ps filename = \u0026#39;hi2.jpg\u0026#39; sigma = 1 image = skimage.io.imread(fname=filename) plt.figure() plt.imshow(image) \u0026lt;matplotlib.image.AxesImage at 0x7fe120048df0\u0026gt; gray = skimage.color.rgb2gray(image) plt.figure() plt.imshow(gray,cmap=cm.gray) \u0026lt;matplotlib.image.AxesImage at 0x7fe11ff62d60\u0026gt; blur = skimage.filters.gaussian(gray, sigma=sigma) plt.imshow(blur,cmap=cm.gray) \u0026lt;matplotlib.image.AxesImage at 0x7fe11ff51670\u0026gt; t = skimage.filters.threshold_otsu(blur) mask = (blur \u0026gt; t) plt.figure() plt.imshow(mask,cmap=cm.gray) \u0026lt;matplotlib.image.AxesImage at 0x7fe11feabac0\u0026gt; result = skimage.measure.find_contours(mask) result [array([[ 66. , 147.5], [ 65. , 147.5], [ 64. , 147.5], [ 63. , 147.5], [ 62.5, 147. ], [ 62. , 146.5], [ 61.5, 146. ], [ 61. , 145.5], [ 60.5, 145. ], [ 60.5, 144. ], [ 61. , 143.5], [ 62. , 143.5], [ 63. , 143.5], [ 64. , 143.5], [ 64.5, 144. ], [ 65. , 144.5], [ 65.5, 145. ], [ 66. , 145.5], [ 66.5, 146. ], [ 66.5, 147. ], [ 66. , 147.5]]), array([[144. , 88.5], [143. , 88.5], [142. , 88.5], [141. , 88.5], [140.5, 88. ], [140. , 87.5], [139. , 87.5], [138.5, 87. ], [138. , 86.5], [137. , 86.5], [136. , 86.5], [135.5, 86. ], [135. , 85.5], [134. , 85.5], [133. , 85.5], [132. , 85.5], [131. , 85.5], [130. , 85.5], [129.5, 85. ], [129. , 84.5], [128. , 84.5], [127. , 84.5], [126. , 84.5], [125. , 84.5], [124. , 84.5], [123. , 84.5], [122. , 84.5], [121. , 84.5], [120.5, 84. ], [120. , 83.5], [119. , 83.5], [118. , 83.5], [117. , 83.5], [116. , 83.5], [115. , 83.5], [114.5, 83. ], [114. , 82.5], [113. , 82.5], [112. , 82.5], [111. , 82.5], [110. , 82.5], [109. , 82.5], [108. , 82.5], [107. , 82.5], [106.5, 83. ], [106. , 83.5], [105.5, 84. ], [105.5, 85. ], [105.5, 86. ], [105.5, 87. ], [105.5, 88. ], [105.5, 89. ], [105.5, 90. ], [105.5, 91. ], [105. , 91.5], [104.5, 92. ], [104.5, 93. ], [104.5, 94. ], [104.5, 95. ], [104. , 95.5], [103.5, 96. ], [103.5, 97. ], [103.5, 98. ], [103.5, 99. ], [103. , 99.5], [102.5, 100. ], [102.5, 101. ], [102.5, 102. ], [102. , 102.5], [101.5, 103. ], [101.5, 104. ], [101.5, 105. ], [101. , 105.5], [100.5, 106. ], [100.5, 107. ], [100.5, 108. ], [100.5, 109. ], [100. , 109.5], [ 99.5, 110. ], [ 99.5, 111. ], [ 99.5, 112. ], [ 99.5, 113. ], [ 99.5, 114. ], [ 99.5, 115. ], [100. , 115.5], [101. , 115.5], [102. , 115.5], [103. , 115.5], [103.5, 116. ], [104. , 116.5], [105. , 116.5], [106. , 116.5], [107. , 116.5], [108. , 116.5], [108.5, 117. ], [109. , 117.5], [110. , 117.5], [111. , 117.5], [112. , 117.5], [112.5, 118. ], [113. , 118.5], [114. , 118.5], [115. , 118.5], [116. , 118.5], [117. , 118.5], [118. , 118.5], [119. , 118.5], [120. , 118.5], [120.5, 119. ], [121. , 119.5], [122. , 119.5], [122.5, 120. ], [122.5, 121. ], [123. , 121.5], [123.5, 122. ], [123. , 122.5], [122.5, 123. ], [122. , 123.5], [121. , 123.5], [120. , 123.5], [119. , 123.5], [118. , 123.5], [117. , 123.5], [116.5, 123. ], [116. , 122.5], [115. , 122.5], [114. , 122.5], [113.5, 122. ], [113. , 121.5], [112. , 121.5], [111. , 121.5], [110. , 121.5], [109.5, 121. ], [109. , 120.5], [108. , 120.5], [107. , 120.5], [106. , 120.5], [105. , 120.5], [104.5, 120. ], [104. , 119.5], [103. , 119.5], [102. , 119.5], [101. , 119.5], [100.5, 119. ], [100. , 118.5], [ 99. , 118.5], [ 98. , 118.5], [ 97. , 118.5], [ 96. , 118.5], [ 95.5, 118. ], [ 95. , 117.5], [ 94. , 117.5], [ 93.5, 117. ], [ 93. , 116.5], [ 92. , 116.5], [ 91. , 116.5], [ 90.5, 116. ], [ 90. , 115.5], [ 89. , 115.5], [ 88. , 115.5], [ 87. , 115.5], [ 86.5, 115. ], [ 86. , 114.5], [ 85. , 114.5], [ 84. , 114.5], [ 83.5, 114. ], [ 83. , 113.5], [ 82. , 113.5], [ 81. , 113.5], [ 80. , 113.5], [ 79.5, 113. ], [ 79. , 112.5], [ 78. , 112.5], [ 77. , 112.5], [ 76.5, 112. ], [ 76. , 111.5], [ 75. , 111.5], [ 74. , 111.5], [ 73.5, 111. ], [ 73. , 110.5], [ 72. , 110.5], [ 71. , 110.5], [ 70. , 110.5], [ 69. , 110.5], [ 68.5, 110. ], [ 68. , 109.5], [ 67. , 109.5], [ 66.5, 109. ], [ 66. , 108.5], [ 65.5, 108. ], [ 65.5, 107. ], [ 66. , 106.5], [ 67. , 106.5], [ 68. , 106.5], [ 69. , 106.5], [ 70. , 106.5], [ 70.5, 107. ], [ 71. , 107.5], [ 72. , 107.5], [ 73. , 107.5], [ 73.5, 108. ], [ 74. , 108.5], [ 75. , 108.5], [ 76. , 108.5], [ 76.5, 109. ], [ 77. , 109.5], [ 78. , 109.5], [ 79. , 109.5], [ 80. , 109.5], [ 80.5, 110. ], [ 81. , 110.5], [ 82. , 110.5], [ 83. , 110.5], [ 84. , 110.5], [ 84.5, 111. ], [ 85. , 111.5], [ 86. , 111.5], [ 87. , 111.5], [ 87.5, 112. ], [ 88. , 112.5], [ 89. , 112.5], [ 90. , 112.5], [ 91. , 112.5], [ 91.5, 113. ], [ 92. , 113.5], [ 93. , 113.5], [ 94. , 113.5], [ 95. , 113.5], [ 95.5, 113. ], [ 95.5, 112. ], [ 96. , 111.5], [ 96.5, 111. ], [ 96.5, 110. ], [ 96.5, 109. ], [ 96.5, 108. ], [ 97. , 107.5], [ 97.5, 107. ], [ 97.5, 106. ], [ 97.5, 105. ], [ 98. , 104.5], [ 98.5, 104. ], [ 98.5, 103. ], [ 98.5, 102. ], [ 99. , 101.5], [ 99.5, 101. ], [ 99.5, 100. ], [ 99.5, 99. ], [ 99.5, 98. ], [100. , 97.5], [100.5, 97. ], [100.5, 96. ], [100.5, 95. ], [100.5, 94. ], [101. , 93.5], [101.5, 93. ], [101.5, 92. ], [101.5, 91. ], [101.5, 90. ], [101.5, 89. ], [101.5, 88. ], [101.5, 87. ], [101.5, 86. ], [102. , 85.5], [102.5, 85. ], [102.5, 84. ], [102.5, 83. ], [102.5, 82. ], [102. , 81.5], [101.5, 81. ], [101. , 80.5], [100. , 80.5], [ 99. , 80.5], [ 98. , 80.5], [ 97.5, 80. ], [ 97. , 79.5], [ 96. , 79.5], [ 95. , 79.5], [ 94. , 79.5], [ 93. , 79.5], [ 92.5, 79. ], [ 92. , 78.5], [ 91. , 78.5], [ 90. , 78.5], [ 89. , 78.5], [ 88. , 78.5], [ 87.5, 78. ], [ 87. , 77.5], [ 86. , 77.5], [ 85. , 77.5], [ 84. , 77.5], [ 83. , 77.5], [ 82.5, 77. ], [ 82. , 76.5], [ 81. , 76.5], [ 80. , 76.5], [ 79. , 76.5], [ 78. , 76.5], [ 77. , 76.5], [ 76. , 76.5], [ 75. , 76.5], [ 74.5, 76. ], [ 74. , 75.5], [ 73. , 75.5], [ 72.5, 75. ], [ 72.5, 74. ], [ 73. , 73.5], [ 74. , 73.5], [ 74.5, 73. ], [ 75. , 72.5], [ 76. , 72.5], [ 77. , 72.5], [ 77.5, 73. ], [ 78. , 73.5], [ 79. , 73.5], [ 80. , 73.5], [ 81. , 73.5], [ 82. , 73.5], [ 83. , 73.5], [ 84. , 73.5], [ 84.5, 74. ], [ 85. , 74.5], [ 86. , 74.5], [ 87. , 74.5], [ 88. , 74.5], [ 89. , 74.5], [ 89.5, 75. ], [ 90. , 75.5], [ 91. , 75.5], [ 92. , 75.5], [ 93. , 75.5], [ 94. , 75.5], [ 94.5, 76. ], [ 95. , 76.5], [ 96. , 76.5], [ 97. , 76.5], [ 98. , 76.5], [ 99. , 76.5], [ 99.5, 77. ], [100. , 77.5], [101. , 77.5], [102. , 77.5], [103. , 77.5], [103.5, 78. ], [104. , 78.5], [105. , 78.5], [106. , 78.5], [107. , 78.5], [108. , 78.5], [109. , 78.5], [110. , 78.5], [110.5, 79. ], [111. , 79.5], [112. , 79.5], [113. , 79.5], [114. , 79.5], [115. , 79.5], [116. , 79.5], [116.5, 80. ], [117. , 80.5], [118. , 80.5], [119. , 80.5], [120. , 80.5], [121. , 80.5], [122. , 80.5], [123. , 80.5], [124. , 80.5], [124.5, 81. ], [125. , 81.5], [126. , 81.5], [127. , 81.5], [128. , 81.5], [129. , 81.5], [130. , 81.5], [131. , 81.5], [132. , 81.5], [133. , 81.5], [134. , 81.5], [134.5, 82. ], [135. , 82.5], [136. , 82.5], [137. , 82.5], [138. , 82.5], [138.5, 83. ], [139. , 83.5], [140. , 83.5], [141. , 83.5], [142. , 83.5], [143. , 83.5], [143.5, 84. ], [144. , 84.5], [144.5, 85. ], [144.5, 86. ], [144.5, 87. ], [144.5, 88. ], [144. , 88.5]]), array([[112. , 153.5], [111.5, 154. ], [111. , 154.5], [110. , 154.5], [109. , 154.5], [108. , 154.5], [107. , 154.5], [106.5, 154. ], [106. , 153.5], [105. , 153.5], [104. , 153.5], [103. , 153.5], [102. , 153.5], [101. , 153.5], [100. , 153.5], [ 99. , 153.5], [ 98.5, 153. ], [ 98. , 152.5], [ 97. , 152.5], [ 96. , 152.5], [ 95. , 152.5], [ 94.5, 152. ], [ 94. , 151.5], [ 93. , 151.5], [ 92. , 151.5], [ 91.5, 151. ], [ 91. , 150.5], [ 90. , 150.5], [ 89. , 150.5], [ 88. , 150.5], [ 87.5, 150. ], [ 87. , 149.5], [ 86.5, 149. ], [ 86.5, 148. ], [ 87. , 147.5], [ 88. , 147.5], [ 89. , 147.5], [ 90. , 147.5], [ 91. , 147.5], [ 92. , 147.5], [ 93. , 147.5], [ 93.5, 148. ], [ 94. , 148.5], [ 95. , 148.5], [ 96. , 148.5], [ 97. , 148.5], [ 97.5, 149. ], [ 98. , 149.5], [ 99. , 149.5], [100. , 149.5], [101. , 149.5], [102. , 149.5], [102.5, 150. ], [103. , 150.5], [104. , 150.5], [105. , 150.5], [106. , 150.5], [107. , 150.5], [108. , 150.5], [109. , 150.5], [110. , 150.5], [110.5, 151. ], [111. , 151.5], [112. , 151.5], [112.5, 152. ], [112.5, 153. ], [112. , 153.5]])] polys = [Layer(sg.Polygon(item)) for item in result] l = Layer() for item in polys: l^=item l= l.rotate(-90) l l\u0026lt;\u0026lt;=5 l l = l.simplify(3) l l.plot(new=True) ls = [Layer(item) for item in l.geoms] for item in ls: skeleton = ps.skeleton_as_subtree_list(item.exteriors()[0][::-1], item.interiors()) all_sources = [item.source for item in skeleton] all_sinks = [item2 for item in skeleton for item2 in item.sinks] non_terminal_sinks = [item for item in all_sinks if item in all_sources] for arc in skeleton: for sink in arc.sinks: if sink in non_terminal_sinks: plt.plot((arc.source.x, sink.x),(arc.source.y, sink.y)) ","permalink":"https://foldable-robotics.github.io/modules/manufacturing/generated/skeletonizing-an-image/","tags":null,"title":"Skeletonizing an image"},{"categories":null,"contents":"Introduction Steps Create a planar sketch Turn off the background color in Solidworks by changing the background to plain white in the options at the top of the viewport window. This will make exporting your sketches easier. Translate each rigid link into a straight line. Connect each line at a vertex. Vertices function as a revolute joint in 2D sketches, and spherical joints in 3D sketches. Define the lengths of each link. ","permalink":"https://foldable-robotics.github.io/modules/kinematics/sketching-2d-kinematics-in-cad/","tags":null,"title":"Sketching 2D Kinematics in CAD"},{"categories":null,"contents":"Windows Name URL Version Putty https://putty.org/ latest Inkscape https://inkscape.org/ latest 7-zip https://www.7-zip.org/ latest Git https://gitforwindows.org/ latest Git extensions https://gitextensions.github.io/ latest KDiff3 https://kdiff3.sourceforge.net/ latest grepwin https://github.com/stefankueng/grepWin/releases/lates latest SILabs CP201X Driver https://www.silabs.com/documents/public/software/CP210x_Universal_Windows_Driver.zip latest Tracker https://physlets.org/tracker/ latest ffmpeg https://ffmpeg.org/ latest vlc https://www.videolan.org/vlc/ latest firefox https://www.mozilla.org/en-US/firefox/new/ latest notepad++ https://notepad-plus-plus.org/ latest vscode https://code.visualstudio.com/ latest acrobat(creative cloud) asu-provided? latest office asu-provided? latest Autodesk Fusion 360 https://www.autodesk.com/products/fusion-360/overview?term=1-YEAR\u0026amp;tab=subscription latest Arduino https://www.arduino.cc/en/software latest Visual Studio 2022 Build Tools https://visualstudio.microsoft.com/visual-cpp-build-tools/ Direct Link:\nhttps://aka.ms/vs/17/release/vs_BuildTools.exe latest Visual Studio Code https://code.visualstudio.com/Download latest Anaconda Python https://www.anaconda.com/ As discussed with Kyle Wright, we will enable persistent user profiles for the semester so that students can install this themselves latest LibreCAD https://librecad.org/ latest **Additionally, we need student profiles to persist over the course of the semester in order for their custom-installed python profiles to remain persistent. **\n","permalink":"https://foldable-robotics.github.io/course-documents/software-list/","tags":null,"title":"Software List"},{"categories":null,"contents":"Introduction This tutorial picks up from the Solidworks Kinematics Tutorial\nMake a new drawing by selecting file-\u0026gt;\u0026ldquo;create drawing from assembly\u0026rdquo;\nDeselect the sheet format option\nDrag in the top view of the assembly and hit enter. (I\u0026rsquo;m assuming you used the top view to create your original sketches)\ndownload the macro found at https://github.com/popupcad/popupcad_solidworks_exporter/raw/master/swp/ExportDrawingFaces.swp.\nSelect the top view\nExport the top view. Go to tools-\u0026gt;macro-\u0026gt;edit, and select \u0026ldquo;ExportDrawingFaces.swp\u0026rdquo;, found in the /swp directory of the downloaded macro project. Note: this will only work with Solidworks 2014, 64-bit. Otherwise you will have to re-create the macro project from the included source files. That will have to be the subject of a different tutorial\nA code window should open. Select the run icon, and select run on the dialog that opens.\nSelect \u0026ldquo;Export Generic\u0026rdquo; and hit run to export the view to a .yaml file that your code can interpret.\n","permalink":"https://foldable-robotics.github.io/modules/kinematics/solidworks-export-tutorial/","tags":null,"title":"Solidworks Export Tutorial"},{"categories":null,"contents":"Steps Create a new part\nSelect the Top Plane\nCreate a new Sketch\nSelect the rectangle tool\nDraw a rectangle (hint: click on the origin to constrain the rectangle to that point)\nSelect the dimensioning tool\nClick on the top edge of the rectangle. A dimension will appear. Enter the desired dimension\nRepeat for the side of the rectangle\nSelect the features tab and then select extruded boss/base\nEnter the thickness of your laminate\nSave your part into a new folder\nTurn on the Solidworks Simulaton Add in. Go to tools\u0026ndash;\u0026gt;add ins\nClick on the check box to the left of the \u0026ldquo;solidworks simulation item\u0026rdquo;\nNow select the Simulation tab.\nCreate a new study\nNext, define your fixtures. Go to the menu on the left and select fixtures\u0026ndash;\u0026gt;Fixed Geometry\u0026hellip;\nDefine the fixed end of the cantilever beam by rotating the part and selecting the left cross-sectional face of the beam.\nDefine an axis along which you will align a force. Select The Front plane and the top plane, then select insert\u0026ndash;\u0026gt;reference geometry\u0026ndash;\u0026gt;axis from the top menu\nThe two-planes method should be automatically selected for you. Select the green check mark to accept the new axis\nDefine your forces. In the left menu select External forces/torques\u0026ndash;\u0026gt;force\u0026hellip;\nSelect the right cross-sectional face of the beam, then ensure the force option is selected on the left. Check the \u0026ldquo;sekected direction option\u0026rdquo;, and the new axis you just created (axis 1). Then select the axial load option and define the magnitued of the force.\nNext, define your material. You can select from a list of favorite materials, or go into the material selector to create a custom material. In the left menu, select mesh\u0026ndash;\u0026gt;mesh and run to run your simulation\nIf you get a message that the solver failed, with an option to restart, select \u0026ldquo;yes\u0026rdquo;\nIf you get a message to turn on large displacement solving, select yes.\nIf it succeeds, you may now view the results of the solver\nNotes Common sources of failure include:\nToo high of a force or too soft of a material for the given dimensions. Try selecting a stiffer material ","permalink":"https://foldable-robotics.github.io/modules/compliance/solidworks-fea-tutorial/","tags":null,"title":"Solidworks FEA Tutorial"},{"categories":null,"contents":"Solidworks is an attractive way to model popup devices because you can interact with the three-dimensional kinematics of your popup device. However, Solidworks is not good at everything. First, it cannot create your cut-files for you automatically. Solidworks knows nothing about how you\u0026rsquo;re going to make your device, out of how many layers, and with what manufacturing processes. Second, Solidworks is such an expansive tool, and can be used in so many different ways that the most straightforward way to design a popup device is not very obvious.\nSo, to help users with these issues, we have outlined a workflow which can be used to rapidly create a popup device whose kinematics you can visualise and interact with quickly. Second, we also outline the steps to export those basic multilayer kinematics to a popupCAD file so that the manufacturing specifics can be done in an environment with built-in manufacturing knowledge.\nDownload example.zip to see this example project.\nStep-by-step Instructions Create a new part file\nSelect a reference plane(top, for example) and then create a new sketch (or create a new sketch and select any reference plane)\nSketch the lines which define your robot. The outline of your robot should be a drawn out of solid lines. Any internal hinges should be drawn as construction lines, or made into construction lines once drawn. If you are making a robot which consists of multiple sub-laminates, you should create one of these sketches per sublaminate.\nNext, for each sub-laminate sketch that you have created, you can should create a planar surface. Go to insert-\u0026gt;surfaces-\u0026gt;planar surface. Select each sketch. This should create a surface whose outline matches the closed shape of solid lines you drew in your sketch.\nFor each surface you just created, you want to split that surface along all the lines representing joints from your original sketch. First, unhide the original sketch by clicking on the eyglasses icon under the surface-\u0026gt;sketch in the left project pane. This will allow you to view, select, and reference lines drawn in that sketch.\nNext, create a new sketch on the same reference plane(such as the top plane), select one or more joint lines, and in the sketch tools, select \u0026ldquo;convert entities\u0026rdquo;. Only select sets of lines which do not cross each other, as the next step will fail. Make sure that the lines you do select completely cross the surface, or create a loop.\nRepeat the last two steps for the remaining joint lines, making sure not to select sets of lines which cross each other or more than two lines at any point.\nUse insert-\u0026gt;curve-\u0026gt;split line to separate faces. You will need to do this for each sketch you just created. When you do this, remember to select all the surface faces to ensure they get split by the sketch.\nUse the insert-\u0026gt;surface-\u0026gt;offset function to create independent surfaces from faces of original body. Hint: to repeat creating the same feature over and over, hit enter after creating one offset surface feature and solidworks will begin a new one.\nUse insert-\u0026gt;boss/base-\u0026gt;thicken feature to thicken each feature. Hint: deselect the merge body option after creating the first thickened part, otherwise the bodies will merge back together.\nSave your file!!\nLook at the project menu on the left. You should have a number of solid bodies in your part file.\nRight click on the solid bodies folder and select \u0026ldquo;save bodies\u0026rdquo;\nIn the save bodies menu, auto-assign names and select an assembly name. This will automatically put all the saved bodies into an assembly file. Click the green check box. Select \u0026ldquo;rebuild\u0026rdquo; if a notification box pops up. This should begin the save process and open up your new assembly file in the background\nSave and close your part file. Now the newly-created assembly file should be visible.\nAll the parts in your assembly are fixed in space relative to each other. To visualize how they will move, you must float all the parts except for one. To do this, select all the parts you wish to be able to move, right click on them in the project manager on the left, and select \u0026ldquo;float\u0026rdquo;. These parts should now be able to be moved by dragging them.\nNext, you must create mating conditions to define the joint kinematics of your devie. Since these thickened flat sheets represent several layers laminated together, they will most likely rotate around their midplane. However, to assemble the device faster, it is easier to select edges and points on the top or bottom surface, with the knowledge that it may not move exactly the same in real life. Select one mating line on two parts you would like to joint with a joint and then select the \u0026ldquo;mate\u0026rdquo; button in the assembly tab. This will bring the two lines together. Hit enter to accept\nNext select two points at the end of the mating edge you just joined, one for each part. This should join those two points and constrain the parts as if they are joined by a hinge. You can now move those two parts relative to each other.\nRepeat this process for each joint you wish to create. This should fully define the motion of the device. You can move the device around as it will work once created, as in this video\nOnce you have defined the kinematics of the device, you must now re-flatten the assembly so that you can export it to popupCAD. Add additional mating constraints to neighboring faces of your device, making them \u0026ldquo;coincident\u0026rdquo; to each other. This will flatten it.\nSave your Assembly\nNext\u0026hellip; Continue to export this assembly to a format you can read in Python with the Solidworks Export Tutorial)\n","permalink":"https://foldable-robotics.github.io/modules/kinematics/solidworks-kinematics-tutorial/","tags":null,"title":"Solidworks Kinematics Tutorial"},{"categories":null,"contents":"%matplotlib inline import matplotlib.pyplot as plt import scipy.optimize import numpy desired_length1=1 desired_length2=2 desired_length3=1.5 p1_desired_location = 0,0 def objective_function(variables): x1,y1,x2,y2,x3,y3 = variables p1 = numpy.array([x1,y1]) p2 = numpy.array([x2,y2]) p3 = numpy.array([x3,y3]) v0 = p1-p1_desired_location v1 = p2-p1 v2 = p3-p2 v3 = p1-p3 l0 = (v0.dot(v0))**.5 l1 = (v1.dot(v1))**.5 l2 = (v2.dot(v2))**.5 l3 = (v3.dot(v3))**.5 error = [] error.append(l0) error.append(y2-0) error.append(l1-desired_length1) error.append(l2-desired_length2) error.append(l3-desired_length3) error = numpy.array(error) error = (error.dot(error))**.5 return error ini = [2,2,2,4,1,1] ini = [1,2,2,6,2,-1] result = scipy.optimize.minimize(objective_function,ini) print(result) fun: 2.3085907343075597e-08 hess_inv: array([[ 9.48608434e-08, 1.72611133e-08, 8.77011379e-08, 3.08116961e-09, -3.96175385e-08, 9.12975778e-08], [ 1.72611133e-08, 6.50516951e-08, 6.55326138e-09, 1.61176317e-08, -4.73814986e-08, 5.52006207e-08], [ 8.77011379e-08, 6.55326138e-09, 1.17185562e-07, 4.44984152e-09, 2.79299122e-08, 5.93862621e-08], [ 3.08116961e-09, 1.61176317e-08, 4.44984152e-09, 3.09500982e-08, 2.04322549e-09, 2.71948650e-08], [-3.96175385e-08, -4.73814986e-08, 2.79299122e-08, 2.04322549e-09, 4.61645501e-07, -2.54312467e-07], [ 9.12975778e-08, 5.52006207e-08, 5.93862621e-08, 2.71948650e-08, -2.54312467e-07, 2.46184915e-07]]) jac: array([ 0.36641926, 0.89598149, 0.66629281, -0.30097396, 0.04419924, 0.22413009]) message: 'Desired error not necessarily achieved due to precision loss.' nfev: 929 nit: 59 njev: 131 status: 2 success: False x: array([-1.14216757e-09, 9.14061190e-09, 1.00000000e+00, -1.99287241e-08, -3.75000037e-01, -1.45236874e+00]) p = result.x.reshape((3,2)) plot_lines = numpy.concatenate((p,p[0:1]),0) plt.plot(*(plot_lines.T)) plt.axis(\u0026#39;equal\u0026#39;) for ii,item in enumerate(p): plt.text(item[0],item[1],\u0026#39;p\u0026#39;+str(ii)) p array([[-1.14216757e-09, 9.14061190e-09], [ 1.00000000e+00, -1.99287241e-08], [-3.75000037e-01, -1.45236874e+00]]) ","permalink":"https://foldable-robotics.github.io/modules/kinematics/generated/find-triangle/","tags":null,"title":"Solve Triangle"},{"categories":null,"contents":"Introduction This module takes you through solving the motion of a device by using a numerical nonlinear solver to solve a complex system of constraint equations. We will be using a number of Python packages to do this.\nNote that solving kinematics numerically can prove troublesome, as the lack of a symbolic system of equations prevents us from analyzing those equations for situations when the system approaches a singularity, or when the initial guess for the state of the system is far away from the solution. We will use a number of techniques to mitigate some of these problems but they are not always solvable.\nImport Packages Import the packages you will need. You will need numpy for array handling, matplotlib\u0026rsquo;s plotting capabilities, the scipy.optimize package to do nonlinear multidimensional solving, and the math package for trig constants and functions.\n# This line produces inline images in jupyter notebook %matplotlib inline # import all the packages necessary for running the code import numpy import matplotlib.pyplot as plt import scipy.optimize import math Constraint Equations We will define some functions which will assist you in creating constraint equations for your mechanism. These functions will be used over and over to define fixed elements of your design, such as the angle between two links, the length of a link, or the absolute angle between two vectors (using a reference).\nLength of a Vector First you want to define a length constraint. Assume a numpy array is fed in. The function should return the length of the vector:\ndef length(v1): \u0026#39;\u0026#39;\u0026#39; finds the length of a vector :param v1: the vector :type v1: tuple or list of floats :rtypes: [float,] \u0026#39;\u0026#39;\u0026#39; v1 = numpy.array(v1).flatten() l = (v1.dot(v1))**.5 return l Inner angle between vectors Next you want to use the identity $\\vec{v1}\\cdot \\vec{v2} = \\left|\\vec{v1}\\right| \\left|\\vec{v2}\\right|\\cos{\\theta}$. This equation returns the inner angle between vectors without considering the direction of each vector. It is useful, however, because given a valid initial condition, this formula can be used to maintain a fixed angle between vectors.\ndef inner_angle(v1,v2): \u0026#39;\u0026#39;\u0026#39; finds the interior angle between two vectors :param v1: the first vector :type v1: tuple or list of floats :param v2: the second vector :type v2: tuple or list of floats :rtypes: [float,] \u0026#39;\u0026#39;\u0026#39; v1 = numpy.array(v1).flatten() l1 = length(v1) v2 = numpy.array(v2).flatten() l2 = length(v2) cost = numpy.dot(v1,v2)/l1/l2 t = math.acos(cost) return t Absolute angle between vectors Sometimes it is necessary to specify the angle between two directed vectors. This cannot be done using only sine or cosine due to their limited range when computing inverse sines and inverse cosines. the atan2 function may be used in code, but computing the absolute angle between vectors has two solutions unless you supply a third orientation vector v3, indicating the handedness of the solution you prefer. We will assume that the desired reference vector is a unit vector in the positive z direction, but this can be supplied as an optional third term. The following function has some error proofing code in it to ensure that the supplied reference is considered in determining which answer to use in solving the total angle between two vectors.\ndef total_angle(v1,v2,v3=None): \u0026#39;\u0026#39;\u0026#39; finds the interior angle between two vectors :param v1: the first vector :type v1: tuple or list of floats :param v2: the second vector :type v2: tuple or list of floats :rtypes: [float,] \u0026#39;\u0026#39;\u0026#39; v1 = numpy.array(v1).flatten() if len(v1)==2: v1 = numpy.r_[v1,0] v3 = numpy.array([0,0,1]) v2 = numpy.array(v2).flatten() if len(v2)==2: v2 = numpy.r_[v2,0] v3 = numpy.array([0,0,1]) costheta = numpy.dot(v1,v2) sintheta = numpy.cross(v1,v2) l_sintheta = length(sintheta) neg = sintheta.dot(v3) if neg\u0026lt;0: neg = -1 else: neg=1 theta = math.atan2(neg*l_sintheta,costheta) return theta Angle Between Planes This function finds the angle between two planes\ndef angle_between_planes(v1,v2,v3): \u0026#39;\u0026#39;\u0026#39;measures the angle between planes. v1 and v2 are two vectors which define one plane v2 and v3 define the third plane.\u0026#39;\u0026#39;\u0026#39; n1 = numpy.cross(v1,v2) n2 = numpy.cross(v2,v3) return total_angle(n1,n2,v2) Constraint Equations Creation The next function which is generated is responsible for generating and evaluating all the constraint equations for a given system. Consider a four-bar linkage of four vectors\nThe planar four bar linkage can be defined by four points: $p_1$, $p_2$, $p_3$, and $p_4$. The distance between these points is fixed by a rigid link. Additionally, you can see that link 1 is rigidly attached to the world frame, which defines both its position and orientation. For the 8 unknowns of the system, there must be 8 equations which can fully define the position of those four planar vectors.\nTo sum them up:\nFour length constraints One point($p_1$) fixed at a set of coordinates $v_1$ orientation fixed in space What is left? The internal configuration of the four-bar linkage. This can be determined by an extra equation defining the angle between $v_1$ and $v_4$, for example. This is the single degree of freedom for the four-bar linkage itself. In this example, $q$ may be considered the input variable which determines the configuration of the entire four-bar linkage. Adding that final constraint sums to 8 constraint equations to match the 8 unknown variables in the system.\nImplementation in Python To solve these equations in python requires the use of the scipy.optimize module. The minimize function takes a function and an initial guess for a number of variables, and attempts to reduce the error produced by the function. So our description of our kinematic constraint equations must result in the form of a function that returns the error of a guess made by the scipy.optimize.minimize function.\nBut what if we want to build an arbitrary four-bar linkage? If we supply specific constraint equations and a value for q, we will have to regenerate a new four-bar function for each design and configuration. So instead, we wrap the four-bar constraint error calculation in another function which takes in our desired design and configuration variables, q1,dl1,dl2,dl3,dl4. This wrapper permits us to reuse the calc_fourbar() function for any four-bar linkage for which we have a set of desired link lengths and input angle. The implementation can be seen below:\np0_ini = 0,0 p1_ini = 1,0 p2_ini = 1,1 p3_ini = -1,-1 p4_ini = .5,-.5 p_ini = numpy.array([p0_ini,p1_ini,p2_ini,p3_ini,p4_ini]) define a list of label strings for labeling points\npoint_text = [\u0026#39;p0\u0026#39;,\u0026#39;p1\u0026#39;,\u0026#39;p2\u0026#39;,\u0026#39;p3\u0026#39;,\u0026#39;p4\u0026#39;] Define a list of vectors by the index of the points used\nvector_order = [] vector_order.append((0,1)) vector_order.append((1,2)) vector_order.append((2,3)) vector_order.append((3,0)) vector_order.append((2,4)) vector_order.append((3,4)) vector_order = numpy.array(vector_order) For each vector, define the initial vector as the difference from point 1 minus point 0\nv_ini = p_ini[vector_order[:,1]]-p_ini[vector_order[:,0]] v_ini array([[ 1. , 0. ], [ 0. , 1. ], [-2. , -2. ], [ 1. , 1. ], [-0.5, -1.5], [ 1.5, 0.5]]) Calculate the initial length\nl_ini = [length(item) for item in v_ini] l_ini [1.0, 1.0, 2.8284271247461903, 1.4142135623730951, 1.5811388300841898, 1.5811388300841898] Compute the text location as halfway between point 0 and 1 for each vector\ntext_location = (p_ini[vector_order[:,1]]+p_ini[vector_order[:,0]])/2 text_location array([[ 0.5 , 0. ], [ 1. , 0.5 ], [ 0. , 0. ], [-0.5 , -0.5 ], [ 0.75, 0.25], [-0.25, -0.75]]) Add labels for labeling the vector midpoint\nvector_text = [\u0026#39;v0\u0026#39;,\u0026#39;v1\u0026#39;,\u0026#39;v2\u0026#39;,\u0026#39;v3\u0026#39;,\u0026#39;v4\u0026#39;,\u0026#39;v5\u0026#39;] Create a function that plots a mechanism\ndef plot_mechanism(point_location,text_location=None): for item in vector_order: plt.plot(*(point_location[item,:3].T),\u0026#39;ko-\u0026#39;) if text_location is not None: for item,text in zip(point_location,point_text): ax.text(x=item[0],y=item[1],s=text) for item,text in zip(text_location,vector_text): ax.text(x=item[0],y=item[1],s=text) fig = plt.figure(); ax = fig.add_subplot(111) plot_mechanism(p_ini,text_location) plt.show() def gen_function(q1,dl1,dl2,dl3,dl4,dl5,dl6): def calc_fourbar(arguments): # break arguments variable into 8 discrete variables, 2 for each planar point in the four-bar linkage x0,y0,x1,y1,x2,y2,x3,y3,x4,y4 = arguments #Create four points: p1, p2, p3, p4 p0 = numpy.array([x0,y0]) p1 = numpy.array([x1,y1]) p2 = numpy.array([x2,y2]) p3 = numpy.array([x3,y3]) p4 = numpy.array([x4,y4]) #create new point array using inputs of function p = numpy.array([p0,p1,p2,p3,p4]) #create new vector array using vector ordering defined above v = p[vector_order[:,1]]-p[vector_order[:,0]] #create new length vector l = [length(item) for item in v] # Define the x and y axis unit vectors x_axis = numpy.array([1,0]) y_axis = numpy.array([0,1]) # define the error variable for holding all mechanism error calcs error = [] # Compute the error in the structure as the absolute, cumulative # difference between the link lengths and their desired lengths error.append([l[0]-dl1]) error.append([l[1]-dl2]) error.append([l[2]-dl3]) error.append([l[3]-dl4]) error.append([l[4]-dl5]) error.append([l[5]-dl6]) # add the desired input angle q1 minus the actual angle as another error component to be solved error.append([total_angle(v[0],-v[3])-q1*math.pi/180]) #error.append([inner_angle(-v4,y_axis)-q1*math.pi/180+math.pi/2]) # add two more constraints defining p1 as fixed at (0,0) error.append([p[0,0]-0]) error.append([p[0,1]-0]) # define v1 to be parallel to the x axis. error.append([inner_angle(v[0],x_axis)-0]) # turn the error list into a vector error1 =numpy.array(error) # return the square root of the sum of squared errors. The length function that we wrote earlier does that. return length(error1) return calc_fourbar To test the function we simply need to create a valid initial guess for the initial locations of the 8 variables x1,y1,x2,y2,x3,y3,x4,y4\nini = list(p_ini.flatten()) as well as a set of design variables for dl1,dl2,dl3,dl4.\ndesign = numpy.array([4,2,4.4,1,5,3]) and a state for the one configuration variable q1\nq1=-170 function=gen_function(q1,*design) result = scipy.optimize.minimize(function,ini) x = result.x x =x.reshape((5,2)) Compute the error of the resulting configuration found. If it is near zero, it was able to find a solution\nresult.fun 6.995398416354163e-08 fig = plt.figure(); ax = fig.add_subplot(111) plot_mechanism(x) plt.axis(\u0026#39;equal\u0026#39;) plt.show() Computing a Path But what if we want to compute more than one configuration in the same plot? We need to re-run the optimize function with different values for q. The example below does just that. Additionally, we only want to show valid solutions, so we add some error proofing to check whether a solution has error below a desired tolerance.\nall_q = numpy.r_[-170:181:10] path = [] q_in = [] ini=result.x for q1 in all_q: function=gen_function(q1,*design) result = scipy.optimize.minimize(function,ini) points = result.x points =points.reshape((5,2)) # Only add solution to path if the error is smaller than some nominal value print(result.fun) if result.fun\u0026lt;1e-1: path.append(points) q_in.append(q1) ini = result.x path = numpy.array(path) q_in = numpy.array(q_in) 6.994958769426199e-08 9.03578396742785e-08 6.818126377658796e-08 1.1818014822372901e-07 1.3004526572734587e-07 7.467395056150183e-08 1.2559675148416404e-07 1.4897331305062183e-07 1.253274772729213e-07 1.258116374074979e-07 1.505113906941631e-07 1.1481247697290997e-07 1.3302576309248917e-07 1.5438581509636946e-07 1.4823286472018718e-07 8.048563077184548e-08 1.501539143887747e-07 8.411210379488795e-08 1.3379806951996817e-07 5.470048532108741e-08 7.428209498159685e-08 9.595800307845717e-08 1.1400509698539673e-07 1.203941078844774e-07 1.1868997192356723e-07 9.960076488049228e-08 9.571107464619422e-08 6.135278614690043e-08 7.810011261766794e-08 8.497313988110125e-08 8.837061348200097e-08 8.54950552319171e-08 8.865031358808815e-08 1.427182998700313e-07 7.347182723175156e-08 0.059675897246800585 Plotting the result\u0026hellip;\nf = plt.figure() a = f.add_subplot(111) for item in path: plot_mechanism(item) plt.axis(\u0026#39;equal\u0026#39;) plt.savefig(\u0026#39;f1.png\u0026#39;) Computing The Jacobian Now consider we want to look at an end-effector attached to $\\vec{v}_3$. Plotting the end effector p4:\npath.shape (36, 5, 2) This plots as the following set of points:\nplt.figure() p4 = path[:,4,:] #p4 = numpy.r_[p4,p4[0:1]] plt.plot(p4[:,0],p4[:,1],\u0026#39;go-\u0026#39;) plt.axis(\u0026#39;equal\u0026#39;) plt.savefig(\u0026#39;f2.png\u0026#39;) But what if we\u0026rsquo;re only interested in the portion of the path where the end effector is supposed to be touching the ground? Restricting to that portion of the path:\ny_out = numpy.vstack([p4,p4[0:2]]) y_out array([[ 0.64264265, -2.69384763], [ 0.7828071 , -2.79823562], [ 0.95188307, -2.88646359], [ 1.14481075, -2.95549859], [ 1.35560967, -3.00354474], [ 1.57761488, -3.03016873], [ 1.80367917, -3.0363504 ], [ 2.02631997, -3.02444975], [ 2.23779282, -2.99806976], [ 2.43010895, -2.96177114], [ 2.59504363, -2.92057242], [ 2.72424749, -2.87916297], [ 2.8096761 , -2.84079601], [ 2.8446389 , -2.80599015], [ 2.82567041, -2.77151729], [ 2.75487839, -2.73055544], [ 2.64131426, -2.6748451 ], [ 2.49927055, -2.59849718], [ 2.34322093, -2.50118151], [ 2.18279387, -2.38830935], [ 2.02157382, -2.26852097], [ 1.85940198, -2.1508784 ], [ 1.69523179, -2.04329031], [ 1.52883464, -1.9520413 ], [ 1.36136489, -1.88182058], [ 1.19531724, -1.83586468], [ 1.03425529, -1.81608172], [ 0.88249039, -1.82314016], [ 0.74476959, -1.8565349 ], [ 0.62598404, -1.91465079], [ 0.5308936 , -1.99483821], [ 0.46386026, -2.0935118 ], [ 0.42858645, -2.2062852 ], [ 0.42786054, -2.32814793], [ 0.46332557, -2.45369074], [ 0.50267501, -2.53323713], [ 0.64264265, -2.69384763], [ 0.7828071 , -2.79823562]]) q_in = numpy.r_[q_in,q_in[0:2]] q_in array([-170, -160, -150, -140, -130, -120, -110, -100, -90, -80, -70, -60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, -170, -160]) range_min = 0 range_max = 11 if range_min\u0026gt;=0: y_out = p4[range_min:range_max] q_in = q_in[range_min:range_max] else: y_out = numpy.vstack([p4[range_min:,:],p4[0:range_max,:]]) q_in = numpy.r_[q_in[range_min:],q_in[0:range_max]] Now we may calculate the relative change in position of the end-effector (in green) between each step as a function of the change in input angle $q$.\nf = plt.figure() a = f.add_subplot(111) #for item in path[range_min:range_max]: # plot_mechanism(item) a.plot(p4[:,0],p4[:,1],\u0026#39;go-\u0026#39;) a.plot(y_out[:,0],y_out[:,1],\u0026#39;ro-\u0026#39;) plt.axis(\u0026#39;equal\u0026#39;) plt.savefig(\u0026#39;f3.png\u0026#39;) We use the trapezoidal rule to find the slope in y as a function of the previous and next neighbors of each point in the path. For a path of n points this will produce n-2 sets of partial derivatives\ndy = y_out[2:,:]-y_out[:-2,:] dy array([[ 0.30924041, -0.19261596], [ 0.36200364, -0.15726297], [ 0.40372661, -0.11708114], [ 0.43280413, -0.07467014], [ 0.4480695 , -0.03280566], [ 0.44870509, 0.00571898], [ 0.43411364, 0.03828064], [ 0.40378898, 0.06267861], [ 0.35725081, 0.07749734]]) dq = q_in[2:]-q_in[:-2] dq array([20, 20, 20, 20, 20, 20, 20, 20, 20]) dq.shape (9,) f = plt.figure() a = f.add_subplot(111) #for item in path[range_min:range_max]: # plot_mechanism(item) a.plot(p4[:,0],p4[:,1],\u0026#39;go-\u0026#39;) a.plot(y_out[:,0],y_out[:,1],\u0026#39;ro-\u0026#39;) plt.axis(\u0026#39;equal\u0026#39;) plt.savefig(\u0026#39;f3.png\u0026#39;) plt.figure() plt.plot(y_out[:,0],y_out[:,1],\u0026#39;ro-\u0026#39;) plt.quiver(y_out[1:-1,0],y_out[1:-1,1],dy[:,0],dy[:,1]) plt.axis(\u0026#39;equal\u0026#39;) plt.show() Dividing dy over dq produces 10, 2x1 Jacobian matrices, 1 for each interior point in the motion path.\nJ=(dy.T/dq.T) J.shape (2, 9) J array([[ 0.01546202, 0.01810018, 0.02018633, 0.02164021, 0.02240348, 0.02243525, 0.02170568, 0.02018945, 0.01786254], [-0.0096308 , -0.00786315, -0.00585406, -0.00373351, -0.00164028, 0.00028595, 0.00191403, 0.00313393, 0.00387487]]) Now let\u0026rsquo;s find the torque required to accelerage a 1-kg mass forward at 1g, while holding itself up against gravity:\nm = 1 #kg g = 9.81 #m/s^2 fx = m*g fy = -m*g f = numpy.array([[fx,fy]]).T t = J.T.dot(f) t #N-m array([[0.24616055], [0.25470027], [0.2554562 ], [0.24891613], [0.23586927], [0.21728469], [0.19415609], [0.16731464], [0.13721908]]) t.max() 0.2554562024243693 t.min() 0.13721907554495927 Thus, the torque required by a motor to hold those forces specified by $f_x$ and $f_y$ is around .25 N-m in the worst case.\nmotor_speed = 500#rpm dq_dt = motor_speed*2*math.pi/60 velocity = J*dq_dt velocity[0,:] array([0.80958951, 0.94772333, 1.05695379, 1.13307856, 1.17304321, 1.17470717, 1.13650686, 1.05711709, 0.93528043]) f array([[ 9.81], [-9.81]]) P = t.dot(dq_dt) P array([[12.88893646], [13.33607515], [13.37565548], [13.03321797], [12.35008598], [11.37699962], [10.1659891 ], [ 8.76057407], [ 7.18477399]]) ","permalink":"https://foldable-robotics.github.io/modules/kinematics/generated/solving-kinematics-with-python/","tags":null,"title":"Solving Kinematics Numerically with Python"},{"categories":null,"contents":"Turn on inline plotting\n%matplotlib inline import required packages\nimport pynamics from pynamics.frame import Frame from pynamics.variable_types import Differentiable,Constant from pynamics.system import System from pynamics.output import Output,PointsOutput import pynamics.integration import sympy import numpy import matplotlib.pyplot as plt plt.ion() from math import pi import scipy.optimize Create a pynamics system\nsystem = System() pynamics.set_system(__name__,system) Declare constants\nlA = Constant(2,\u0026#39;lA\u0026#39;,system) lB = Constant(1.5,\u0026#39;lB\u0026#39;,system) lC = Constant(1,\u0026#39;lC\u0026#39;,system) lD = Constant(1,\u0026#39;lD\u0026#39;,system) Create three differentiable state variables\nqA,qA_d,qA_dd = Differentiable(\u0026#39;qA\u0026#39;,system) qB,qB_d,qB_dd = Differentiable(\u0026#39;qB\u0026#39;,system) qC,qC_d,qC_dd = Differentiable(\u0026#39;qC\u0026#39;,system) qD,qD_d,qD_dd = Differentiable(\u0026#39;qD\u0026#39;,system) Create an initial guess for their starting positions. Note that this is not necessarily accurate given the constraint that they are supposed to be connected with given, constant length. We will use these initial values to seed the solver that will find a valid initial state\ninitialvalues = {} initialvalues[qA]=90*pi/180 initialvalues[qA_d]=0*pi/180 initialvalues[qB]=-90*pi/180 initialvalues[qB_d]=0*pi/180 initialvalues[qC]=5*pi/180 initialvalues[qC_d]=0*pi/180 initialvalues[qD]=90*pi/180 initialvalues[qD_d]=0*pi/180 Retrieve state variables in the order they are stored in the system\nstatevariables = system.get_state_variables() Create four frames\nN = Frame(\u0026#39;N\u0026#39;,system) A = Frame(\u0026#39;A\u0026#39;,system) B = Frame(\u0026#39;B\u0026#39;,system) C = Frame(\u0026#39;C\u0026#39;,system) D = Frame(\u0026#39;D\u0026#39;,system) Declare N as the Newtonian (fixed) frame\nsystem.set_newtonian(N) Rotate A,B, and C about their local Z axes.\nA.rotate_fixed_axis(N,[0,0,1],qA,system) B.rotate_fixed_axis(A,[0,0,1],qB,system) C.rotate_fixed_axis(N,[0,0,1],qC,system) D.rotate_fixed_axis(C,[0,0,1],qD,system) Define vectors that will be used to solve for kinematics. Note: this can be done several possible ways as in the figure below:\nDefine my rigid body kinematics\npNA = 0*N.x + 0*N.y + 0*N.z pAB = pNA + lA*A.x pBD = pAB + lB*B.x pNC = pNA pCD = pNC + lC*C.x pDB = pCD + lD*D.x type(pNA) pynamics.vector.Vector type(A) pynamics.frame.Frame type(A.x) pynamics.vector.Vector pout = pAB + 3*B.x-2*B.y Declare a list of points that will be used for plotting\npoints = [pBD,pAB,pNA,pNC,pCD,pDB] create a list of initial values ini0 in the order of the system\u0026rsquo;s state variables\nstatevariables = system.get_state_variables() ini0 = [initialvalues[item] for item in statevariables] Define the closed loop kinematics of the four bar linkage.\neq_vector = [pBD-pDB] Dot the vector equation with N.x and N.y to create two scalar equations. This will remove two degrees of freedom from our system.\neq_scalar = [] eq_scalar.append((eq_vector[0]).dot(N.x)) eq_scalar.append((eq_vector[0]).dot(N.y)) eq_scalar.append(qC-0) eq_scalar [lA*cos(qA) - lB*sin(qA)*sin(qB) + lB*cos(qA)*cos(qB) - lC*cos(qC) + lD*sin(qC)*sin(qD) - lD*cos(qC)*cos(qD), lA*sin(qA) + lB*sin(qA)*cos(qB) + lB*sin(qB)*cos(qA) - lC*sin(qC) - lD*sin(qC)*cos(qD) - lD*sin(qD)*cos(qC), qC] Solve for valid initial condition determined by independent variable identify independent and dependent variables\nqi = [qA] qd = [qB,qC,qD] for dependent variables, create an initial guess\nsubstitute constants into the scalar equations\neq_scalar_c = [item.subs(system.constant_values) for item in eq_scalar] Create a dictionary for all independent variables and substitute in\ndefined = dict([(item,initialvalues[item]) for item in qi]) eq_scalar_c = [item.subs(defined) for item in eq_scalar_c] eq_scalar_c [-1.5*sin(qB) + sin(qC)*sin(qD) + 9.18485099360515e-17*cos(qB) - cos(qC)*cos(qD) - cos(qC) + 1.22464679914735e-16, 9.18485099360515e-17*sin(qB) - sin(qC)*cos(qD) - sin(qC) - sin(qD)*cos(qC) + 1.5*cos(qB) + 2.0, qC] convert to numpy array and sum the error\nerror = (numpy.array(eq_scalar_c)**2).sum() Convert to a function that scipy can use. Sympy has a \u0026ldquo;labmdify\u0026rdquo; function that evaluates an expression, but scipy needs a slightly different format.\nf = sympy.lambdify(qd,error) def function(args): return f(*args) Take the derivative of the equations to linearize with regard to the velocity variables\nguess = [initialvalues[item] for item in qd] result = scipy.optimize.minimize(function,guess) if result.fun\u0026gt;1e-3: raise(Exception(\u0026#34;out of tolerance\u0026#34;)) ini = [] for item in system.get_state_variables(): if item in qd: ini.append(result.x[qd.index(item)]) else: ini.append(initialvalues[item]) points = PointsOutput(points, constant_values=system.constant_values) points.calc(numpy.array([ini0,ini]),numpy.array([0,1])) points.plot_time() 2022-02-19 17:23:17,233 - pynamics.output - INFO - calculating outputs 2022-02-19 17:23:17,234 - pynamics.output - INFO - done calculating outputs \u0026lt;AxesSubplot:\u0026gt; result.fun 2.3019345538191714e-14 Consider Constraint Equations $$ 0 = \\left[\\begin{array}{c} f_1(q_1,...q_n) \\\\ \\vdots\\\\ f_m(q_1,...q_n) \\end{array}\\right]$$ Take the derivative $$ 0 = \\left[\\begin{array}{c} \\dot{f}_1(q_1,...q_n) \\\\ \\vdots\\\\ \\dot{f}_m(q_1,...q_n) \\end{array}\\right]=\\underbrace{\\left[\\begin{array}{ccc} j_{1q_1} \u0026 \\dots \u0026 j_{1q_n} \\\\ \\vdots \u0026 \\ddots \u0026 \\vdots \\\\ j_{mq_1} \u0026 \\dots \u0026 j_{mq_n} \\end{array}\\right]}_{J_{c}}\\left[\\begin{array}{c} \\dot{q}_1\\\\\\vdots\\\\\\dot{q}_n\\end{array}\\right]$$ eq_d=[(system.derivative(item)) for item in eq_scalar] eq_d = sympy.Matrix(eq_d) eq_d = eq_d.subs(system.constant_values) eq_d Matrix([ [qA_d*(-1.5*sin(qA)*cos(qB) - 2*sin(qA) - 1.5*sin(qB)*cos(qA)) + qB_d*(-1.5*sin(qA)*cos(qB) - 1.5*sin(qB)*cos(qA)) + qC_d*(sin(qC)*cos(qD) + sin(qC) + sin(qD)*cos(qC)) + qD_d*(sin(qC)*cos(qD) + sin(qD)*cos(qC))], [qA_d*(-1.5*sin(qA)*sin(qB) + 1.5*cos(qA)*cos(qB) + 2*cos(qA)) + qB_d*(-1.5*sin(qA)*sin(qB) + 1.5*cos(qA)*cos(qB)) + qC_d*(sin(qC)*sin(qD) - cos(qC)*cos(qD) - cos(qC)) + qD_d*(sin(qC)*sin(qD) - cos(qC)*cos(qD))], [ qC_d]]) Now, given a valid configuration, solve for the linearized, velocity-based constraint equation. If\n$$0= \\textbf{J}_c \\dot{q} = \\textbf{A} \\dot{q}_i + \\textbf{B} \\dot{q}_d$$\nwhere $\\textbf{A}_{(m \\times (n-m))}$, $\\textbf{B}_{(m \\times m)}$ $$\\dot{q}=\\left[\\begin{array}{c} \\dot{q}_{i1} \\\\ \\vdots \\\\ \\dot{q}_{i(n-m)}\\\\ \\hline \\dot{q}_{d1}\\\\ \\vdots\\\\ \\dot{q}_{dm} \\end{array}\\right]$$ Define independent variables as a Sympy Matrix\nqi = sympy.Matrix([qA_d]) qi Matrix([[qA_d]]) Define dependent variables as a Sympy Matrix\nqd = sympy.Matrix([qB_d,qC_d,qD_d]) qd Matrix([ [qB_d], [qC_d], [qD_d]]) take partial derivative of constraints with respect to independent and dependent variables:\nAA = eq_d.jacobian(qi) AA Matrix([ [-1.5*sin(qA)*cos(qB) - 2*sin(qA) - 1.5*sin(qB)*cos(qA)], [-1.5*sin(qA)*sin(qB) + 1.5*cos(qA)*cos(qB) + 2*cos(qA)], [ 0]]) BB = eq_d.jacobian(qd) BB Matrix([ [-1.5*sin(qA)*cos(qB) - 1.5*sin(qB)*cos(qA), sin(qC)*cos(qD) + sin(qC) + sin(qD)*cos(qC), sin(qC)*cos(qD) + sin(qD)*cos(qC)], [-1.5*sin(qA)*sin(qB) + 1.5*cos(qA)*cos(qB), sin(qC)*sin(qD) - cos(qC)*cos(qD) - cos(qC), sin(qC)*sin(qD) - cos(qC)*cos(qD)], [ 0, 1, 0]]) Solve the internal input/output Jacobian to find $q_d$ $$0= \\textbf{A} \\dot{q}_i + \\textbf{B} \\dot{q}_d$$ $$-\\textbf{B}\\dot{q}_d = \\textbf{A}\\dot{q}_i$$ $$\\dot{q}_d = \\underbrace{-\\textbf{B}^{-1}\\textbf{A}}_{C}\\dot{q}_i$$ J_int= -BB.inv()*AA J_int Matrix([ [-(-1.5*sin(qC)*sin(qD) + 1.5*cos(qC)*cos(qD))*(-1.5*sin(qA)*cos(qB) - 2*sin(qA) - 1.5*sin(qB)*cos(qA))/(-2.25*sin(qA)*sin(qB)*sin(qC)*cos(qD) - 2.25*sin(qA)*sin(qB)*sin(qD)*cos(qC) + 2.25*sin(qA)*sin(qC)*sin(qD)*cos(qB) - 2.25*sin(qA)*cos(qB)*cos(qC)*cos(qD) + 2.25*sin(qB)*sin(qC)*sin(qD)*cos(qA) - 2.25*sin(qB)*cos(qA)*cos(qC)*cos(qD) + 2.25*sin(qC)*cos(qA)*cos(qB)*cos(qD) + 2.25*sin(qD)*cos(qA)*cos(qB)*cos(qC)) - (1.5*sin(qC)*cos(qD) + 1.5*sin(qD)*cos(qC))*(-1.5*sin(qA)*sin(qB) + 1.5*cos(qA)*cos(qB) + 2*cos(qA))/(-2.25*sin(qA)*sin(qB)*sin(qC)*cos(qD) - 2.25*sin(qA)*sin(qB)*sin(qD)*cos(qC) + 2.25*sin(qA)*sin(qC)*sin(qD)*cos(qB) - 2.25*sin(qA)*cos(qB)*cos(qC)*cos(qD) + 2.25*sin(qB)*sin(qC)*sin(qD)*cos(qA) - 2.25*sin(qB)*cos(qA)*cos(qC)*cos(qD) + 2.25*sin(qC)*cos(qA)*cos(qB)*cos(qD) + 2.25*sin(qD)*cos(qA)*cos(qB)*cos(qC))], [ 0], [ -(1.0*sin(qA)*sin(qB) - 1.0*cos(qA)*cos(qB))*(-1.5*sin(qA)*cos(qB) - 2*sin(qA) - 1.5*sin(qB)*cos(qA))/(1.0*sin(qA)*sin(qB)*sin(qC)*cos(qD) + 1.0*sin(qA)*sin(qB)*sin(qD)*cos(qC) - 1.0*sin(qA)*sin(qC)*sin(qD)*cos(qB) + 1.0*sin(qA)*cos(qB)*cos(qC)*cos(qD) - 1.0*sin(qB)*sin(qC)*sin(qD)*cos(qA) + 1.0*sin(qB)*cos(qA)*cos(qC)*cos(qD) - 1.0*sin(qC)*cos(qA)*cos(qB)*cos(qD) - 1.0*sin(qD)*cos(qA)*cos(qB)*cos(qC)) - (-1.0*sin(qA)*cos(qB) - 1.0*sin(qB)*cos(qA))*(-1.5*sin(qA)*sin(qB) + 1.5*cos(qA)*cos(qB) + 2*cos(qA))/(1.0*sin(qA)*sin(qB)*sin(qC)*cos(qD) + 1.0*sin(qA)*sin(qB)*sin(qD)*cos(qC) - 1.0*sin(qA)*sin(qC)*sin(qD)*cos(qB) + 1.0*sin(qA)*cos(qB)*cos(qC)*cos(qD) - 1.0*sin(qB)*sin(qC)*sin(qD)*cos(qA) + 1.0*sin(qB)*cos(qA)*cos(qC)*cos(qD) - 1.0*sin(qC)*cos(qA)*cos(qB)*cos(qD) - 1.0*sin(qD)*cos(qA)*cos(qB)*cos(qC))]]) That expression is quite long. We can use the simplify function provided by sympy to shorten the expression:\nJ_int.simplify() J_int Matrix([ [1.33333333333333*sin(-qA + qC + qD)/sin(qA + qB - qC - qD) - 1.0], [ 0], [ 2.0*sin(qB)/sin(qA + qB - qC - qD)]]) Solving for the dependent variables $q_d$:\nApply to end-effector $$\\textbf{v}_{out} = \\textbf{J}\\dot{\\textbf{q}}$$ $$\\textbf{v}_{out} = \\textbf{D}\\dot{\\textbf{q}}_i+\\textbf{E}\\dot{\\textbf{q}}_d$$ $$\\textbf{v}_{out} = \\textbf{D}\\dot{\\textbf{q}}_i+\\textbf{EC}\\dot{\\textbf{q}}_i$$ $$\\textbf{v}_{out} = \\textbf{(D+EC)}\\dot{\\textbf{q}}_i$$ Pick an end-effector\npout lA*A.x + 3*B.x - 2*B.y vout = pout.time_derivative() #vout = vout.subs(subs) vout = sympy.Matrix([vout.dot(N.x),vout.dot(N.y)]) vout Matrix([ [-lA*qA_d*sin(qA) - ((2*qA_d + 2*qB_d)*sin(qB) + (3*qA_d + 3*qB_d)*cos(qB))*sin(qA) + ((2*qA_d + 2*qB_d)*cos(qB) - (3*qA_d + 3*qB_d)*sin(qB))*cos(qA)], [ lA*qA_d*cos(qA) + ((2*qA_d + 2*qB_d)*sin(qB) + (3*qA_d + 3*qB_d)*cos(qB))*cos(qA) + ((2*qA_d + 2*qB_d)*cos(qB) - (3*qA_d + 3*qB_d)*sin(qB))*sin(qA)]]) Ji = vout.jacobian(qi) Ji Matrix([ [-lA*sin(qA) + (-3*sin(qB) + 2*cos(qB))*cos(qA) + (-2*sin(qB) - 3*cos(qB))*sin(qA)], [ lA*cos(qA) + (-3*sin(qB) + 2*cos(qB))*sin(qA) + (2*sin(qB) + 3*cos(qB))*cos(qA)]]) Jd = vout.jacobian(qd) Jd Matrix([ [(-3*sin(qB) + 2*cos(qB))*cos(qA) + (-2*sin(qB) - 3*cos(qB))*sin(qA), 0, 0], [ (-3*sin(qB) + 2*cos(qB))*sin(qA) + (2*sin(qB) + 3*cos(qB))*cos(qA), 0, 0]]) J = Ji+Jd*J_int J Matrix([ [-lA*sin(qA) + ((-3*sin(qB) + 2*cos(qB))*cos(qA) + (-2*sin(qB) - 3*cos(qB))*sin(qA))*(1.33333333333333*sin(-qA + qC + qD)/sin(qA + qB - qC - qD) - 1.0) + (-3*sin(qB) + 2*cos(qB))*cos(qA) + (-2*sin(qB) - 3*cos(qB))*sin(qA)], [ lA*cos(qA) + ((-3*sin(qB) + 2*cos(qB))*sin(qA) + (2*sin(qB) + 3*cos(qB))*cos(qA))*(1.33333333333333*sin(-qA + qC + qD)/sin(qA + qB - qC - qD) - 1.0) + (-3*sin(qB) + 2*cos(qB))*sin(qA) + (2*sin(qB) + 3*cos(qB))*cos(qA)]]) ","permalink":"https://foldable-robotics.github.io/modules/kinematics/generated/solving-four-bar-constraints/","tags":null,"title":"Solving Nonlinear Four-Bar Constraints"},{"categories":null,"contents":"Introduction Nonlinear solvers can suffer from the possibility of reaching local minima if the initial guess is too far away from the best minimum solution. This is especially true when trying to fit nonlinear functions. This example contrasts the difference between the scipy optimize function and the pyCMA package.\nThe pyCMA package provides python with an implementation of the \u0026ldquo;covariance matrix adaptation evolutionary strategy\u0026rdquo; (wikipedia page here). You can install the pycma package from the command line by executing pip install cma.\n%matplotlib inline Import all necessary packages\nimport numpy import matplotlib.pyplot as plt import scipy.optimize import numpy.random import cma create a function for plotting solutions against the input data\ndef plot_params(parameters): w,w0 = parameters y_model = numpy.sin(w*x-w*w0) p = plt.plot(x,y_model,\u0026#39;r-.\u0026#39;) p = plt.plot(x,y_data,\u0026#39;bo\u0026#39;) return p create the x array\nx = numpy.r_[-10:10:.1] define your model parameters\nparameters = (2.1,.24) split model parameters into frequency and frequency offset\nw,w0 = parameters Build the original model as a sine function. This is ideal because you can reach many local minima as a function of $\\omega$ and $\\omega_0$\ny = numpy.sin(w*x-w*w0) Add some random noise\nrand = numpy.random.randn(*y.shape)/10 y_data = y+rand And plot the model data with noise against the original model\nfig = plt.figure() ax = fig.add_subplot() a=ax.plot(x,y,\u0026#39;r\u0026#39;) b=ax.plot(x,y_data,\u0026#39;bo\u0026#39;) Now create a function that returns the sum of squared error between a model guess and the original model data\ndef myfunc(parameters): w,w0 = parameters y_model = numpy.sin(w*x-w*w0) error = ((y_model-y_data)**2).sum() return error Now find out the error of the actual model against its own noise;\nmyfunc([2.1,.24]) 2.093829724940322 Now define an initial guess for the solver to try to find the parameters itself\nini = [1,.5] sol = scipy.optimize.minimize(myfunc,ini) sol.fun 103.84110620139793 sol.x array([0.00774282, 3.58238206]) plot_params(sol.x) [\u0026lt;matplotlib.lines.Line2D at 0x7fe9fcc7e400\u0026gt;] Now rerun with a much closer initial guess\nini = [2,.5] sol = scipy.optimize.minimize(myfunc,ini) print(sol.fun) sol.x 2.0920946497952553 array([2.09997985, 0.24198467]) plot_params(sol.x) [\u0026lt;matplotlib.lines.Line2D at 0x7fe9fcbf7070\u0026gt;] ini = [.1,.5] sol = scipy.optimize.minimize(myfunc,ini,bounds=((1.0, 4.1), (0,1)),method=\u0026#34;powell\u0026#34;) print(sol.fun) print(sol.x) plot_params(sol.x) 2.0920955173209577 [2.09999615 0.2419855 ] /tmp/ipykernel_11523/2516990896.py:2: OptimizeWarning: Initial guess is not within the specified bounds sol = scipy.optimize.minimize(myfunc,ini,bounds=((1.0, 4.1), (0,1)),method=\u0026quot;powell\u0026quot;) [\u0026lt;matplotlib.lines.Line2D at 0x7fe9fcb637c0\u0026gt;] CMA example Now we\u0026rsquo;re going to try with pyCMA and the original initial guess\nini = [1,.5] Run the optimization and display the results at the end.\nes = cma.CMAEvolutionStrategy(ini, 0.5) es.logger.disp_header() while not es.stop(): X = es.ask() es.tell(X, [myfunc(x) for x in X]) es.logger.add() es.logger.disp([-1]) (3_w,6)-aCMA-ES (mu_w=2.0,w_1=63%) in dimension 2 (seed=1056100, Thu Apr 14 15:18:18 2022) Iterat Nfevals function value axis ratio maxstd minstd 153 918 1.64074127665788e+02 8.3e+00 7.90e-09 1.08e-09 Plot the convergence of the CMA-ES algorithm\nes.logger.plot() \u0026lt;cma.logger.CMADataLogger at 0x7fe9fcb8e6d0\u0026gt; es.best.x array([ 2.06681366, -3.00887613]) myfunc(es.best.x) 24.408652286226967 plot_params(es.best.x) [\u0026lt;matplotlib.lines.Line2D at 0x7fe9fc5ae970\u0026gt;] If you re-run this optimization, even with the same initial guess, there is no guarantee of convergence, especially when your initial guess is far away from the actual value. This is because the success of the algorithm, as well as its ability to reach beyond local minima, is based on injecting randomness into each evolution of the algorithm. This means that each optimization will produce slightly different results in a different number of steps. This must be traded off for the ability to escape local minima.\n#import scipy.optimize.differential_evolution res = scipy.optimize.differential_evolution( myfunc, bounds=[(1.06,4.1),(0,1)], popsize=10, maxiter=2000, tol=1e-6, #callback=cb, workers=-1, polish=False, disp=True ) /home/danaukes/miniconda3/lib/python3.9/site-packages/scipy/optimize/_differentialevolution.py:533: UserWarning: differential_evolution: the 'workers' keyword has overridden updating='immediate' to updating='deferred' warnings.warn(\u0026quot;differential_evolution: the 'workers' keyword has\u0026quot; differential_evolution step 1: f(x)= 11.8457 differential_evolution step 2: f(x)= 11.8457 differential_evolution step 3: f(x)= 11.1958 differential_evolution step 4: f(x)= 11.1958 differential_evolution step 5: f(x)= 11.1958 differential_evolution step 6: f(x)= 2.2656 differential_evolution step 7: f(x)= 2.2656 differential_evolution step 8: f(x)= 2.2656 differential_evolution step 9: f(x)= 2.2656 differential_evolution step 10: f(x)= 2.2656 differential_evolution step 11: f(x)= 2.2656 differential_evolution step 12: f(x)= 2.2656 differential_evolution step 13: f(x)= 2.17141 differential_evolution step 14: f(x)= 2.0949 differential_evolution step 15: f(x)= 2.0949 differential_evolution step 16: f(x)= 2.0949 differential_evolution step 17: f(x)= 2.0949 differential_evolution step 18: f(x)= 2.0949 differential_evolution step 19: f(x)= 2.0949 differential_evolution step 20: f(x)= 2.0949 differential_evolution step 21: f(x)= 2.09302 differential_evolution step 22: f(x)= 2.09274 differential_evolution step 23: f(x)= 2.09211 differential_evolution step 24: f(x)= 2.09211 differential_evolution step 25: f(x)= 2.09211 differential_evolution step 26: f(x)= 2.0921 differential_evolution step 27: f(x)= 2.0921 differential_evolution step 28: f(x)= 2.0921 differential_evolution step 29: f(x)= 2.09209 differential_evolution step 30: f(x)= 2.09209 differential_evolution step 31: f(x)= 2.09209 differential_evolution step 32: f(x)= 2.09209 differential_evolution step 33: f(x)= 2.09209 differential_evolution step 34: f(x)= 2.09209 res fun: 2.0920947701810624 message: 'Optimization terminated successfully.' nfev: 700 nit: 34 success: True x: array([2.09997756, 0.24196964]) plot_params(res.x) [\u0026lt;matplotlib.lines.Line2D at 0x7fe9facdcf70\u0026gt;] ","permalink":"https://foldable-robotics.github.io/modules/optimization/generated/03-solving-nonlinear-problems/","tags":null,"title":"Solving Nonlinear Problems with Scipy Optimize and pyCMA"},{"categories":null,"contents":"import shapely.geometry as sg from foldable_robotics.layer import Layer from foldable_robotics.laminate import Laminate a = sg.box(0,0,1,1) a b = Layer(a) b b.geoms [\u0026lt;shapely.geometry.polygon.Polygon at 0x7f3a542ba670\u0026gt;] b.geoms[0] c = b | b.translate(2,0) c d = c.rotate(30) d e = c.dilate(.5,3) e f = e.erode(.25,3) f g = Laminate(c,f,c) g g.plot() for layer in g: layer.plot(new=True) h = g[1] type(h) foldable_robotics.layer.Layer ","permalink":"https://foldable-robotics.github.io/modules/manufacturing/generated/sp-22-class-example/","tags":null,"title":"Spring 2022 Shapely \u0026 Foldable Robotics Example"},{"categories":null,"contents":"This page details how to prepare assignments for submission. The \u0026ldquo;Submission\u0026rdquo; section of your assignment should provide the details for what format and where to submit assignments. This document should be used in conjunction with each assignment to ensure that all required files are submitted, and in the correct format.\nGeneral Document Preparation When answering questions, don\u0026rsquo;t just answer the question, phrase the answer in a complete sentence which includes what the question asked. For example:\nQuestion:\nWhat is the sum of one and one?\nResponse\nTwo\nInstead, provide context and detail in your answer, like this:\nQuestion:\nWhat is the sum of one and one?\nResponse:\nOur group found that the sum of one and one is two. This was verified in two ways. First we ran a simulation using the following code\u0026hellip;.\nSecond we ran an experiment where we took M\u0026amp;M\u0026rsquo;s and counted how many there were when we put one next to another. We found the answer was two across ten experiments with a mean of 2 and standard deviation of 0.1 M\u0026amp;M\u0026rsquo;s. We attribute the error to the fact that Maxwell ate one.\nThis will help when you transition from assignment reports to your final report. Please still include the question or at least the question number before your answer for the convenience of the grader.\nFigures \u0026amp; Tables Please include figures and tables inline with the text so that it is easy to find when referring to it in the text. Figures may be composed of images, data-centric plots, or annotated graphics. Here are some other guidelines:\nUse detailed subtitles. Utilize figure numbers when referring to them in the main body of the text. Utilize color schemes in figures which print well in color as well as black and white. CAD renderings or screenshots Photo-realistic renderings look better than screenshots, but take longer to create. These will be required for final reports and presentations. Change background to white before taking screenshots. utilize multiple standard orientations (top, right, iso) in order to provide a clear picture of your design. include source CAD files as specified below Code Snippets Code Snippets: you may include useful code snippets inline as long as they are well commented and referred to in the main body of the text, but source code must always be supplied in the manner specified below. References Literary References must be used in body of your text, and supplied in a bibliography section at the end. Use IEEE format. Reference managers such as Mendeley can do this formatting for you automatically.\nHyperlinks Plain text, unformatted hyperlinks should not be supplied in the main body of reports and documents. If you wish to use a hyperlink in the main body of a document, please use a footnote to the full-text link1. Please do not use masked links in text.\nFile Format-specific instructions Different assignments may require you to submit documents and supporting files in a number of different formats. Please see below for the submission guidelines for each file type\nPDFs If the document is requested as a pdf, produce a single, monolithic pdf with all document parts such as figures, tables, images, code snippets and references included inline.\nWhen submitting pdf-based submissions to Canvas, you should only attach two files: 1) the monolithic pdf, and 2) any supporting files in a separate .zip file.\nWebpages If the document is requested as a web page, produce your site using markdown or html with all document parts such as figures, tables, images, and references embedded inline. Inline files(media files, data, etc\u0026hellip;) will need to be separately uploaded to the web host as well. Supporting files may be uploaded to the host and linked from the web page. You may use external sites to render uploaded jupyter notebooks rather than converting them to markdown, if desired. See the tutorials for more information\nWhen submitting web-based assignments to Canvas, submit the link to the web page and the underlying github repository. Ensure that any supporting files in are linked from within the web page and render completely from a separate computer.\nJupyter Notebooks Jupyter submissions are convenient because they permit code, reporting, figures, photos, etc all to be housed within one dynamic document. This format is highly encouraged for many assignments.\nWhen you submit a Jupyter notebook, ensure that 1) the notebook has been fully compiled before submitting, and 2) that any external files are included either as a separate .zip file or, if the file is to be added to the website, uploaded to your web server. The notebook can be recompiled by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\nIf posting jupyter notebooks to a web page, there are two options: 1) download your jupyter notebook as a markdown file (or .zip) and upload that document, or link to the original .ipynb file using an external service. More details may be found in the jupyter notebook and web page tutorials.\nIf submitting jupyter assignments to Canvas, Submit the source .ipynb file. Ensure that any supporting files are included in a separate .zip file are uploaded separately. Include your name at the beginning of all notebooks.\nOther Code (python, microcontroller, etc.) Zip up all files used to run your code (outside of standard packages). Indicate any other packages you installed which are required to run it, where you got, them, how you installed them (conda, pip, etc), and what version you installed. The professor and TA should be able to run your code using the instructions and files provided. After finishing the code, print output as your name in the last line before submission.\nCAD Utilize the File \u0026ndash;\u0026gt; \u0026ldquo;Pack and Go\u0026rdquo; Feature to include all files required to view parts and assemblies into a single zip file. Drawings in .dxf format must be exported to .pdf format and submitted separately. Make sure you include your name and reference the drawings in the report.\nVideos You may be asked to submit or post recorded presentations or experiments as videos. Due to space limitations, please embed these videos as embedded YouTube videos in web pages or link to their YouTube pages in .pdf documents. Please make sure the video is \u0026ldquo;unlisted\u0026rdquo; rather than \u0026ldquo;public\u0026rdquo; or \u0026ldquo;private\u0026rdquo;. For more information on exporting recorded powerpoint presentations to .mp4, see the tutorial.\nWhen taking videos, try to follow these general rules of thumb:\nAvoid messy background scenes. Try to utilize blank backgrounds, or ensure the background does not distract from the action in the foreground Reduce unwanted noise in the scene. Turn down music, avoid picking up background conversations, etc. Utilize a tripod if possible. Stay away from handheld video Use landscape rather than portrait aspect ratio. Images If you include an image of a hand-made origami element, over-draw each joint in a vector drawing program to highlight joint locations in the image. Slides \u0026amp; Presentations Slides may be submitted in .pptx or pdf form. If submitting .pptx files, beware of linked(rather than embedded) videos, unembedded fonts, missing codecs, etc. I can\u0026rsquo;t play \u0026ndash; or grade \u0026ndash; what\u0026rsquo;s not included.\nIf submitting pdf files of presentations, include any embedded videos separately as indicated in the videos section.\nhttp://idealab.asu.edu\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://foldable-robotics.github.io/course-documents/submission-best-practices/","tags":null,"title":"Submission Best Practices"},{"categories":null,"contents":"Drawing Software Title Description Availability [Inkscape][[Inkscape]] Recommended. Open source, cross-platform drawing program that can produce vector drawings in many formats https://inkscape.org/ Draw.Io Recommended. Add-on to google drive documents, free http://draw.io Adobe Illustrator Recommended. Professional Vector-based Drawing Software, part of Adobe Creative Cloud Available through ASU: http://links.asu.edu/adobestudent [CorelDraw][[CorelDraw]] Professional Vector-based Drawing Software Available in Innovation Hub (for laser cutting). Must be purchased otherwise. Google Drawings Cloud-based collaborative diagramming app Available as part of Google Drive [Visio][[Visio]] Vector-based drawing program Available for download [here][[Visio]] via Microsoft OnTheHub (formerly Dreamspark). [Microsoft Visio 2013 Viewer][[Microsoft Visio 2013 Viewer]] available from Microsoft Powerpoint Rudimentary drawing and grouping capability Can be purchased as part of Office Suite. Also available on ASU computers [LucidChart][[LucidChart]] Cloud-based collaborative diagramming app A limited education account is available. Paid versions permit more elements per page and more documents. [Draftsight][[Draftsight]] Free AutoCAD clone, for dxf/dwg editing only Free [here][[Draftsight]], requires registering Other Software Powerpoint Useful for creating presentations, presentation videos, and basic drawings. Available on https://www.asu.edu/myapps/ popupCAD main page: http://www.popupcad.org/ downloads: http://www.popupcad.org/docs/download/ github repositories: https://github.com/popupcad/popupcad Solidworks Available on https://www.asu.edu/myapps/ [[Inkscape]]: https://inkscape.org/en/ [[LucidChart]]: https://www.lucidchart.com/pages/usecase/education [[Visio]]: https://myapps.asu.edu/app/dreamspark [[CorelDraw]]: https://www.coreldraw.com/en/ [[Draftsight]]: https://www.3ds.com/products-services/draftsight-cad-software/ [[Microsoft Visio 2013 Viewer]]: https://www.microsoft.com/en-us/download/details.aspx?id=35811\n","permalink":"https://foldable-robotics.github.io/modules/misc/software/","tags":null,"title":"Suggested Drawing and Modeling Software"},{"categories":null,"contents":"Suggested Materials List Prototyping Posterboard1 Cardstock Rubber Bands Stapler / Staples String or Twine Duct Tape Rivets Measurement Kitchen Scale Fish Scale Tape Measure SmartPhone Multimeter Electronics Microcontroller RC Servo IMU avoid common cardboard(chipboard). Its layers are too flaky and easy to damage.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://foldable-robotics.github.io/course-documents/suggested-materials-list/","tags":null,"title":"Suggested Materials List"},{"categories":null,"contents":"Overview Foldable Robotics is a course organized around new types of robots being developed in research labs and industry across the country. These devices are designed and built using layered, flat sheets of a wide variety of materials, and folded up to create both form and motion. This class studies these devices from initial prototype and design through implementation and optimization, with a focus on application-specific projects which seek to solve problems of cost, parallelism, complexity, and time with a relatively fast and easy prototyping method.\nThis class allows students to delve deeper into the analytical problems associated with these devices, in topics such as design, manufacturing, dynamics \u0026amp; simulation, optimization, kinematics \u0026amp; motion, and stiffness analysis.\nClass Basics Section Info and Meeting Times Item Detail Class Foldable Robotics Course # TBD Class Schedule TBD Meeting Location TBD Course Website foldable-robotics.github.io Discussion Board TBD Instructor Contact Info Item Detail Instructor Daniel M. Aukes E-mail danaukes@asu.edu Instructor Office TBD Office Hours Office Hours will be held on Fridays; exact hours TBD\nPrerequisites There are no formal prerequisites, but students taking Foldable Robotics should be familiar with:\nProgramming fundamentals, ideally in a scripted language like Python or Matlab. Linear algebra, differential equations, calculus, trigonometry, vectors, etc. Working around rapid prototyping machines, and if not, willing to learn. Course Objectives At the end of this course, students will demonstrate proficiency in synthesizing concepts from across a number of engineering domains including robotics, modeling and analysis, optimization, data collection and experimental validation, CAD/CAM design, and manufacturing \u0026amp; rapid prototyping. This includes:\nUsing bio-inspired approaches in the development and design of mechanisms Understanding the kinematic relationships between forces and motion for rigid mechanical systems Understanding the relationships between force and deflection in compliant systems Being able to build and use physics-based models for understanding the dynamic motion of robotic systems Understanding how the limitations of fabrication processes translate to design constraints and guidelines for laminate systems. The basics of data collection and experiment design How to use optimization approaches in solving an engineering design problem. Expected Learning Outcomes Foldable Robotics You will be able to identify key innovations in the foldable robotics timeline and their impact. You wil be able to identify persistent, recurring, or key mechanisms as well as why they are useful in the context of mechanisms and robotics. You will be able to contrast the key differences between origami in the context of art vs how folded systems are used in the development of robotic mechanisms. Python You will be able to identify and utilize the key differences between data types in writing Python code. You will be able to create and use functions for the purposes of modularizing Python code You will be able to plot multidimensional tabular data as figures using the matplotlib library. You will be able to demonstrate how to perform array and matrix-based operations using the Numpy and Scipy packages You will be able to compose and work with symbolic expressions using the Sympy package. You will be able to write and compile Jupyter Notebooks for the purposes of documenting your works. Biomechanics and Bio-inspiration You will be able to search for and critically read through research papers to identify key metrics related to animal locomotion You will be able to the biomechanics of a selected organism to a set of initial design goals or specifications. Kinematics, Jacobians, Forces, and Power Ideate a kinematic mechanism \u0026ndash; prototype it, draw it and demonstrate its motion Translate the kinematic rules of a mechanism to a computer program and visualise / plot its motion. Interpret the motion of a kinematic end-effector in robotics terms, such as: The input/output speed relationship The output/input force relationship The power transferred during motion Utilize numerical or symbolic approaches to obtain the kinematics. Dynamics Create and populate a rigid body dynamical system composed of Rigid Frames Masses and Inertias Joints Forces Model the f=ma relationship of a dynamic system over time. Integrate the motion of a dynamic system over time Actuator Selection, Characterization, and Integration Select an actuator or power-storage mechanism Size an actuator or power-storage mechanism based on project specifications Model an actuator or power-storage mechanism Test an actuator or power-storage mechanism. Collect performance / model data on a selected actuator or power-storage mechanism. Integrate an actuator or power-storage mechanism into your kinematic mechanism Compliance and System Stiffness Describe the deflection of a beam using Euler-Bernoulli beam equations Model a beam in Solidworks and calculate its deflection under load using FEA. Experimentally measure the deflection of a beam and obtain its Young\u0026rsquo;s modulus. Create an approximate model for beam compliance and add it to your system dynamics Optimization for model fitting and design improvement Understand basic approaches for minimizing or optimizing a function Use coding-based tools to optimize simple functions and perform a regression. Use a data-driven approach to fit unknown model parameters to a real system. Use a model-based approach for selecting ideal design parameters using optimization. Prototyping, manufacturing, and computation Design an origami-inspired mechanism using analog techniques Be able to enumerate the various manufacturing considerations of cutting and lamination Be able to compute a manufacturing-aware digital design file. Make a laminate device using digital techniques (optional) Make robots and mechanisms Learn layer-based fabrication steps Make mechanisms using rapid prototyping tools Experimental Validation Understand best practices for developing an experiment Understand ways to reduce noise and variation Develop a small experiment and collect data Interpret sources of error and corrective actions Team-based project management, communication, etc Develop a computation-focused project website for communicating progress in written form. Present work orally to the class Textbook, Materials, Equipment, and Personal Laptops Textbook There is no textbook. Selected readings from will be provided on this website and/or linked to online.\nSoftware You will be expected to install and use either the Anaconda distribution of Python, or google colab, for completing all assignments and following along in class.\nThis class is friendly to all operating systems. Students have used Window, Ubuntu or OS/X on their own in the past with no problems.\nPlease see the software list posted on the course site for more information about required and recommended software. The software listed is either open-source and freely available to download, available through the university, or free for student use.\nComputers It is expected that you can bring a laptop to class to complete in-class programming tasks.\nMaterials Students will be responsible for selecting and obtaining the consumable materials used in their project, such as cardboard, adhesive, plastic, etc. I may be able to supply a limited number of motors, sensors, and controllers which can be used for development, but if students wish to keep their robots they will need to purchase their own components.\nEquipment Special equipment for making laminate robots will be made available as necessary. Using these tools and equipment may require you to pass certain safety training workshops as required by the university.\nCheckout Checkout of equipment or reusable parts may be possible through Dr. Aukes, the Innovation Hub, or Peralta Labs. Any checked-out tools or parts must be returned in order to receive a grade in the class.\nZoom Policy This course is available in-person only .\nOther recommended resources Adobe Creative Cloud Microsoft Office Solidwoks or Autodesk Fusion 360 Project The final project will involve designing a foldable robot using the methods introduced in this class. The project will span the entire semester. Teams of ~4 students will propose a research question they would like to focus on in the realm of foldable robotics. They will survey the state of research on this topic, and craft a project of appropriate scope (with the guidance of the professor) and depth that can be accomplished in the time frame. They will then develop a design workflow, analysis, manufacturing plan, a robot, and validating data that supports the design decisions made.\nClass Schedule The class schedule can be found on this page. It is subject to change, and will be updated regularly. It is your responsibility to keep track of all due dates and times, which will all be found on the course website.\nAssignments Assignments can be found on this page. It is subject to change, and will be updated regularly. It is your responsibility to keep track of all due dates and times, which will all be found on the course website.\nHow to Succeed in this Course Attend all class sessions Complete all pre-class preparation assignments and reading Complete all post-class follow up assignments and reading Participate in office hours Check your university email regularly Check the course website at least once each week Communicate proactively with your instructor Create a study schedule so that you don’t fall behind on assignments Grading Policies The goal of assignments is to develop a fundamental understanding of the topics required to create foldable robots, using coding to design, manufacture, and analyze.\nAssignments are on the course website Assignments will be posted to the course website throughout the semester. It is the student\u0026rsquo;s responsibility to check the course website periodically for announcements and posted material. Assignments will cover many of the topics presented in class.\nType of Assignments Assigned work may be in the form of a longer-form, weekly assignment intended to teach a new fundamental skill, or it may be a short, small-point-value assignment consisting of tasks that must be completed in order for you to complete other milestones. Some surveys also have a small number of points assigned to them, to ensure student participation. In-class work generally serves as a starting point for assigned homework and is typically ungraded, though it may be graded occasionally.\nPlease see the \u0026ldquo;Rubric\u0026rdquo; section of each assignment for assignment-specific expectations.\nTeam vs. Individual Assignments Assigned work may be individual in nature or team-based project assignments. Individual assignments will be graded on an individual basis, and are intended to reflect your own work. Please use the discussion board feature on Canvas when you have a question. Copying others\u0026rsquo; work is not permitted. The grade for team-based assignments will be shared by all participating members.\nGrading Scale Final points will receive a letter grade according to the following table:\nGrade Range A+ 97-100.0 A 93-96.9 A- 90-92.9 B+ 87-89.9 B 83-86.9 B- 80-82.9 C+ 77-79.9 C 70-76.9 D 60-69.9 E 0-59.9 Grading Rubric Some assignments will be graded according to rubric with number values corresponding to a sliding qualitative scale . The following is a general description of what each percentage means in this course:\nDescription % Exceeds Expectations. Shows superior effort, quality, mastering of the concepts. Innovation in the execution of submitted work. Documentation is publication-ready. 100 Above expectations. Demonstrates full understanding of the problem, and solution is well executed, documented, and presented. 85 Meets expectations. Minor mistakes are present, but student demonstrates a general understanding of the concepts. Documentation present but perhaps not comprehensive. 70 Below expectations. Some effort shown, though there may be serios flaws in analysis or execution. Documentation lacking in certain areas. 55 Fails to meet minimum expections. Minimal effort shown. Does not show understanding and may not have thought through their methods. Documentation is lacking substance, clarity, completeness, evidence of effort. 40 Not submitted, illegible, not readable, not properly linked 0 Late Penalities Due to the nature of this class, failing to turn in an assignment on time affects you and your classmates, as each concept builds on the last. It is your responsibility to get in touch with the instructor regarding any questions before assignments are due. Late submissions will lose one letter grade(10%) for every day they are late1. Any sumbission more than four days late will receive a zero. Additionally, due to the nature of the submission process, late CATME assignments will not be accepted.\nAll assignments must be submitted to Canvas by the date and time noted in Canvas.\nSubmitting and Presenting work Assignment submissions must follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document shared on Canvas. It outlines the expectations for well written assignments, reports, and presentations.\nAssigned homework will be submitted for grading several different ways. This is always indicated in the \u0026ldquo;Submission\u0026rdquo; section of each assignment.\nIt may be submitted for grading via Canvas. Other work involving external tools (Google Surveys, CATME, etc) will be graded based on submitting to that external tool. Some work will be presented in front of the class, and the grade derived from the presentation. Other work will be compiled into the design notebook (in the form of a website or report) and graded priodically. It is the student\u0026rsquo;s responsibility to pay close attention to each assignment\u0026rsquo;s submission instructions, as each assignment indicates the method by which the work must be submitted for grading. Failure to submit work in the manner asked for in each assignment will result in a zero.\nCourse Policies Attendance \u0026amp; Participation Attendance is required. More than two absences result in -2% grade reduction per missed class. Absences and Tardies are treated the same Coordinate with fellow students to take notes if you are gone. This class is structured so that it can only be successful with your attendance. Classes will be interactive, and will require you to come with questions, answers, and ideas to discuss. Students should notify me if they will miss class, although this does not excuse them from learning the concepts or turning in their assignments on time.\nMissing more than two classes will result in noticeable penalties to students\u0026rsquo; grade, in the form of -2% off the student\u0026rsquo;s final grade per missed class over two.2\nPlease coordinate with your fellow students to make sure someone takes notes during class if you will be unavoidably gone.\nAccommodations Attendance and participation in class activities is an essential part of the learning process, and students are expected to attend class regularly. Some absences are, however, unavoidable. Excused absences for classes will be given without penalty to the grade in the case of (1) a university-sanctioned event; (2) religious holidays; (3) work performed in the line-of-duty according [SSM 201-18]; and (4) illness, quarantine or self-isolation related to illness as documented by a health professional.\nAnticipated absences for university-sanctioned events, religious holidays, or line-of-duty activity should be communicated to the instructor by email at danaukes@asu.edu, at least 2 days before the expected absence.\nAbsences for illness, quarantine or self-isolation related to illness should be documented by a health professional and communicated to the instructor as soon as possible by email at danaukes@asu.edu.\nExcused absences do not relieve students from responsibility for any part of the course work required during the period of absence. Faculty will provide accommodations that may include participation in classes remotely, access to recordings of class activities, and make-up work.\nIf there is a disagreement as to whether an absence should be accommodated, the instructor and student should contact the academic unit chair immediately for resolution.\nClassroom Behavior Summary Keep all communication professional Turn off all cell phones, pagers, and other personal devices when participating in class Use your laptops for classroom activities, not email, chats, web browsing, or other non-class related activities. Professional Communication Professional Communication in all forms is required. This includes proper dress when attending class remotely and in-person.\nCell phones, pagers, and other personal devices Cell phones, pagers, and other personal devices must be turned off during class to avoid causing distractions. The use of recording devices is not permitted during class.\nAny violent or threatening conduct by a student in this class will be reported to the Office of the Dean of Students.\nUse of laptops in class Laptops are strongly suggested for this course. You may use your laptop to take notes, during tutorial sessions, or when giving presentations. Please do not use class time for emails, chats, web browsing, or other non-class related activities.\nReorganizing a Team Summary Please try to work out any team-based issues. Please see me if the team is not working. I may choose to split the team Details Reorganizing teams is not a desired outcome of a group project but is sometimes necessary if dysfunction rises to a level that it cannot complete the project. One or more teammates or the instructor may initiate the process to split or reorganize a team. Splitting teams does not necessarily work in any members\u0026rsquo; best interests, as team-based Team Assignments, which each team member must contribute to, are afterwards spread across fewer people.\nHowever, if the need arises, members must work with the professor to outline the issues which are creating the need to reorganize and the measures which remaining teammates may take to rectify the situation. This can take the form of changes made to communication, workload reallocation, new meeting times, etc. The professor will have the final say in establishing a set of expectations for the team, which must be met within a week. If members fail to live up to these expectations, the team may be split and reorganized, as deemed necessary by the instructor.\nWhen reorganiztion occurs, each new team will set up their own folders starting with the former team\u0026rsquo;s work, but new material will be created by the new team, and old material adapted based on the new direction of each new team. Any changes to the project definition due to the split (such as project scope, performance specifications, timeline, etc) will need to be coordinated with the instructor for all future submissions or presentations.\nThe instructor has the final say in the establishment and reoganization of teams.\nAcademic Integrity This class is meant to teach you how to create and use your own design tools for creating folding robots using a variety of published resources, online resources, and classroom content. I encourage you to plumb the depths of what\u0026rsquo;s available; through this synthesis you might be able to create something unique. However, I expect to be able to tell what is your work and what is someone else\u0026rsquo;s. For this reason, specific rules for this class are:\nSpecific Rules Do your own work for individual assignments and tests. Include the your sources of inspiration within assignments and projects. This will help grow the list of cool references, but more importantly, help distinguish inspiration from wholesale plagarism. Keep code/text/information you use from outside sources separate from your own original content (through the use of separate folders, for example). Make it explicit what is yours and what is not. Include all the licenses or copyright statements as required by the things you reuse. This will make your own code more reuseable for yourself and potentially others in the future. Students in this class must adhere to the university\u0026rsquo;s academic integrity policy. Students are responsible for reviewing this policy and understanding each of the areas in which academic dishonesty can occur. In addition, all engineering students are expected to adhere to the University Honor Code. All academic integrity violations will be reported.\nRecordings Note that class sessions may be recorded, and recordings provided to enrolled students, instructors or instructional support personnel as deemed necessary by the course instructor. If you have concerns about being recorded, please contact the course instructor.\nCopyright All course content and materials, including lectures, are copyrighted materials and students may not share outside the class, upload to online websites not approved by the instructor, sell, or distribute course content or notes taken during the conduct of the course.\nYou must refrain from uploading to any course shell, discussion board, or website used by the course instructor or other course forum, material that is not the student\u0026rsquo;s original work, unless the students first comply with all applicable copyright laws; faculty members reserve the right to delete materials on the grounds of suspected copyright infringement.\nNotice Any information in this syllabus may be subject to change with reasonable advance notice.\nmeaning 10% of the total possible number of points\u0026#160;\u0026#x21a9;\u0026#xfe0e;\ncounted as 2% of total points.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"https://foldable-robotics.github.io/course-documents/syllabus/","tags":null,"title":"Syllabus for Foldable Robotics"},{"categories":null,"contents":"Import libraries\nimport pynamics from pynamics.system import System from pynamics.frame import Frame from pynamics.variable_types import Constant import sympy import matplotlib.pyplot as plt import numpy Initialize pynamics\nsystem = System() pynamics.set_system(__name__,system) Create four constants, a,b,c,d\na = Constant(3,\u0026#39;a\u0026#39;,system) b = Constant(2,\u0026#39;b\u0026#39;,system) c = Constant(2,\u0026#39;c\u0026#39;,system) d = Constant(3,\u0026#39;d\u0026#39;,system) create a single frame for describing kinematics\nN = Frame(\u0026#39;N\u0026#39;,system) Describe kinematics for origin, o, and two vectors, v1 and v2\no = 0*N.x+0*N.y v1 = a*N.x+b*N.y v2 = c*N.x+d*N.y create a two-point line segment and substitute literals for symbols in v1 to create v1n\nv1n = [o,v1] v1n = [item.subs(system.constant_values) for item in v1n] v1n = [(item.dot(N.x),item.dot(N.y)) for item in v1n] v1n = numpy.array(v1n,dtype=float) print(v1n) [[0. 0.] [3. 2.]] substitute literals for symbols in v1 to create v2n\nv2n = [v2,] v2n = [item.subs(system.constant_values) for item in v2n] v2n = [(item.dot(N.x),item.dot(N.y)) for item in v2n] v2n = numpy.array(v2n,dtype=float) print(v2n) [[2. 3.]] plot v1n as a blue line and v2n as vertex\nplt.plot(v1n[:,0],v1n[:,1],\u0026#39;b-\u0026#39;) plt.plot(v2n[:,0],v2n[:,1],\u0026#39;ro\u0026#39;) plt.axis(\u0026#39;equal\u0026#39;) (-0.15000000000000002, 3.15, -0.15000000000000002, 3.15) normalize v1 as v3\nv3 = v1.dot(v2)/(v1.dot(v1))*v1 print(v3) a*N.x*(a*c + b*d)/(a**2 + b**2) + b*N.y*(a*c + b*d)/(a**2 + b**2) substitute literals for symbols in o and v3 to create v3n\nv3n = [o,v3] v3n = [item.subs(system.constant_values) for item in v3n] v3n = [(item.dot(N.x),item.dot(N.y)) for item in v3n] v3n = numpy.array(v3n,dtype=float) print(v3n) [[0. 0. ] [2.76923077 1.84615385]] plot v1n, v2n, and v3n\nplt.plot(v1n[:,0],v1n[:,1],\u0026#39;b-\u0026#39;) plt.plot(v2n[:,0],v2n[:,1],\u0026#39;ro\u0026#39;) plt.plot(v3n[:,0],v3n[:,1],\u0026#39;ro-\u0026#39;) plt.axis(\u0026#39;equal\u0026#39;) (-0.15000000000000002, 3.15, -0.15000000000000002, 3.15) ","permalink":"https://foldable-robotics.github.io/modules/kinematics/generated/symbolic-constraint-equations-with-pynamics/","tags":null,"title":"Symbolic Constraint Equations with Pynamics"},{"categories":null,"contents":"import sympy a = sympy.Symbol(\u0026#39;a\u0026#39;) b = sympy.Symbol(\u0026#39;b\u0026#39;) x = sympy.Symbol(\u0026#39;x\u0026#39;) y = sympy.Symbol(\u0026#39;y\u0026#39;) a $\\displaystyle a$\nf = a*x+b*y f $\\displaystyle a x + b y$\nf = a*(x+y) f $\\displaystyle a \\left(x + y\\right)$\ng = f.expand() g $\\displaystyle a x + a y$\ng.diff(x) $\\displaystyle a$\ng.simplify() $\\displaystyle a \\left(x + y\\right)$\nfactor, collect are two other useful functions\ng.subs({x:b}) $\\displaystyle a b + a y$\nh = g.subs({x:(3*b+5)}) h $\\displaystyle a y + a \\left(3 b + 5\\right)$\neq = [] eq.append(x+5*y) eq.append(x-1) solution = sympy.solve(eq,[x,y]) solution {x: 1, y: -1/5} i = x+5*y j = i.subs(solution) j $\\displaystyle 0$\ntype(j) sympy.core.numbers.Zero type(j.evalf(5)) sympy.core.numbers.Zero ","permalink":"https://foldable-robotics.github.io/modules/python/generated/sympy-example/","tags":null,"title":"Sympy Example"},{"categories":null,"contents":"Introduction The purpose of this module is to lead you through the process of collecting data on your system for use in fitting your model\nCourse Resources Optimization Module Experimental Validation Module Dynamics Module Instructions Attach 3 optical tracking markers to the fixed base frame, at the same camera depth as your experimental setup. They must not be colinear, and would best be arranged orthogonally (as in x-y vectors) Measure the distance between all three markers. Measure the distance from your camera to the center of your experiment\u0026rsquo;s z-plane. Attach at least one marker to the output of your energy storage device / actuator so that it can alwyas be viewed by the camera. Attach more markers if you intend to capture flexibility, bending, or compliance. Attach your camera to the fixed/rigid frame using a tripod or fixed camera mount. Take a practice video and run it through your capture software to ensure the markers are always visible. Start recording. Use high-quality mode. Trigger your energy storage device or actuator with a step input. The input signal must be measurable (voltage \u0026amp; current, distance, force, etc) or calculable (mass, energy). Track the motion of your system until it stops moving. Make sure motion is planar. Export/save the video to your computer Using open source motion tracking software export the x-y position of all markers over time. Using the base frame markers as reference points, size and rotate your data to get x-y values in SI units. Using the model-fitting example in the optimization module, feed in the marker position data of the system output to the output of the model. Supply all known or measurable values Run the optimization to identify unknown system parameters Discussion What optimizaiton method did you use? What worked? What didn\u0026rsquo;t work? Suggestions To add a known force, attach a known mass to a string, let it deflect and settle, then cut the string.\nTo displace a known distance, pull the device in a known direction with a string, measuring the displacement. Let it settle, then cut the string.\nIf measuring voltage and current, a power supply\u0026rsquo;s current reading may not be sufficiently fast enough to capture transient responses\nIf measuring anything that has a digital readout (but no serial output), make sure the readout is visible by the camera. You can then convert the voltage reading manually using the video time as a reference.\n","permalink":"https://foldable-robotics.github.io/modules/validation/system-capture-and-fitting/","tags":null,"title":"System Capture and Fitting"},{"categories":null,"contents":"Assignment Overview This assignment is intended to get you familiar with the dynamics of your system. We will start with the triple pendulum example and turn it into a leg.\nRubric Description Points Draft 30 Step 1 30 Step 2 30 Step 3 30 Step 4 30 Step 5 30 Step 6 20 Total 200 Resources dynamics modules Instructions Starting with system kinematics code as well as the triple pendulum code shared in class and online,\nScale: Ensure your system is using SI units. You should be specifying lengths in meters (so millimeters should be scaled down to the .001 range), forces in Newtons, and radians (not degrees), and masses in kg. You may make educated guesses about mass for now. Define Inertias: Add a center of mass and a particle or rigid body to each rotational frame. You may use particles for now if you are not sure of the inertial properties of your bodies, but you should plan on finding these values soon for any \u0026ldquo;payloads\u0026rdquo; or parts of your system that carry extra loads (other than the weight of paper). Add Forces: Add the acceleration due to gravity. Add rotational springs in the joints (using k=0 is ok for now) and a damper to at least one rotational joint. You do not need to add external motor/spring forces but you should start planning to collect that data. Constraints: Keep mechanism constraints in, but follow the pendulum example of double-differentiating all constraint equations. If you defined your mechanism as unattached to the Newtonian frame, add enough constraints so that it is fully attached to ground (for now). you will be eventually removing these constraints. Solution: Add the code from the bottom of the pendulum example for solving for f=ma, integrating, plotting, and animating. Run the code to see your results. It should look similar to the pendulum example with constraints added, as in like a rag-doll or floppy Tuning: Now adjust the damper value $b$ to something nonzero, that over 10s shows that the system is settling. (Optional): Adjust joint stiffness values so that your system looks more realistic. Draft Submission Please bring your code to class on the date indicated in Canvas. We will do a checkoff in class and go over questions. You should show each step of the code in class, though it is fine if there are errors, or if it fails compute due to errors in previous sections.\nFinal Submission Please include a Jupyter notebook with the following:\nDetailed description of the completed steps above (included as blocks alongside chunks of related code) Code used in solving the problem (inline in the report in code blocks), along with descriptions detailing your approach. Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document as well as a jupyter notebook (.ipynb). If submitted as a notebook, make sure it is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\nPlease also post the completed assignment to your team\u0026rsquo;s website as a rendered jupyter notebook, saved as markdown and uploaded to github.\n","permalink":"https://foldable-robotics.github.io/assignments/system-dynamics-i/","tags":null,"title":"System Dynamics I"},{"categories":null,"contents":"Assignment Overview The purpose of this assignment is to re-consolidate everything you have learned about your system back into your dynamic model. It should now include:\nall \u0026ldquo;compliant\u0026rdquo; element models determined by your individual teammates in their parameter identification assignments all unknown parameters determined and included. joint or system-level damping determined An actuator model or stored energy source. Ground constraints eliminated (if applicable) Closed-loop constraints (if applicable) valid initial condition Rubric Description Points Procedure 50 Discussion 60 Code 50 Figures/Videos 40 Total 200 Instructions Resources dynamics modules Assignment Goals Your dynamics should include:\nFully parameterized of model with justification for each model you selected All relevant force / torque models included All important rigid bodies added Contact and friction considered (if applicable) Constraints formulated correctly Energy is plotted and decreasing (when actuators are off) Motion looks reasonable for the mass and scale considered Animation included Bibliography for all references used in parameter or modeling assumptions Other External Resources example pynamics file\n","permalink":"https://foldable-robotics.github.io/assignments/system-dynamics-ii/","tags":null,"title":"System Dynamics II"},{"categories":null,"contents":"Assignment Overview The purpose of this assignment is to model the kinematics so that you can estimate the forces, and torques, power requirements, and speed of your system. This will be done using a symbolic approach with the pynamics package\nRubric Description Points Draft 30 Step 1 30 Step 2 10 Step 3 30 Step 4 10 Step 5 10 Step 6 10 Step 7 15 Step 8 15 Discussion 1 10 Discussion 2 10 Discussion 3 10 Discussion 4 10 Total 200 Resources Triple Pendulum Example EGR557 Kinematics Module EGR557 Dynamics Module pynamics repository Instructions Meet with your team to go over each of the prototypes and mockups you have individually created through past homework assignments. As a team, come up with a mechanism that satisfies your team\u0026rsquo;s need for scope/tractability, manufacturability, and cost.\nDecide as a team whether you will be using powered actuator(s) or passive energy storage device(s). This will impact data collection assignments, how much your team spends, the complexity of your prototype, and the strength of the materials you use (you may need to upgrade from light cardboard to stiffer posterboard or even fiberglass)\nCreate a figure (either in python, in a vector-based drawing program like inkscape or illustrator, or as a solidworks rendering) of your system kinematics. Annotate the image to include:\nNames for each rotational reference frame. You will need one for each rigid body (that moves independently), as well as one for the Newtonian reference frame (N). Use the convention of a capital letter (A,B,C,\u0026hellip;) Labeled joint locations, such as $\\vec{p}_{AB}$ A set of orthonormal basis vectors for each frame $(\\hat{n}_x,\\hat{n}_y,\\hat{n}_z),(\\hat{a}_x,\\hat{a}_y,\\hat{a}_z)$. It is best practice to align one of the basis vectors (like $\\hat{a}_x$) with each rigid link. variable names for each state variable $(q_1,q_2,x_1,y_1,\\ldots)$ geometric constants such as link lengths (like $l_1,l_2$) Save this figure for reuse later. You will need to add mass and inertial information as well as system stiffness information, so make sure you do your work in a way that permits reusing and modifying the figure.\nMake the device in paper or cardboard. You need an up-to-date model if it has changed from your individual assignments. The paper model should dimensionally match your code.\nUsing a pynamics-based script, develop a kinematic model for your device. Following the triple pendulum example,\nImport packages Define variables and constants (you may want to add, remove, or rename variables to match your figure) Declare frames (you may need to add frames or rename them) Define frame rotations (you may want to switch the axis about which frames rotate) Compose kinematics (this depends entirely on the geometry of your system) Take time-derivatives of position vectors Assemble into a Jacobian that maps input velocities to output velocities. Select or Solve for a valid initial condition that represents the system in the middle of a typical gait, when it is both moving and when forces are being applied to it (or to the world by it)\nDespite the fact that you will be using a symbolic representation, you still need to solve for a valid initial condition if your device is a \u0026ldquo;parallel mechanism\u0026rdquo;. This may be done using a nonlinear solver such as scipy.optimize.minimize\nPlot the system in this position.\nFrom your biomechanics-based specifications, define one or more force vector estimates (one for each end effector) that the system should be expected to experience. Consider including, based on your research\nthe force of gravity exerted by the mass of a \u0026ldquo;payload\u0026rdquo; or the main body of the robot. the acceleration the system experiences during a typical gait ground reaction forces measured from biomechanics studies. Calculate the force or torque required at the input to satisfy the end-effector force requirements\nEstimate the velocity of the end-effector in this configuration. Using the Jacobian, calculate the speed required by the input(s) to achieve that output motion.\nThis may not be directly solvable based on your device kinematics; an iterative guess-and-check approach is ok.\nFinally, using the two estimates about force and speed at the input, compute the required power in this configuration.\nDiscussion Answer the following questions\nHow many degrees of freedom does your device have? How many motors? If the answer is not the same, what determines the state of the remaining degrees of freedom? How did you arrive at that number? If your mechanism has more than one degree of freedom, please describe how those multiple degrees of freedom will work togehter to create a locomotory gait or useful motion. What is your plan for synchonizing, especially if passive energy storage? How did you estimate your expected end-effector forces How did you estimate your expected end-effector speeds Submission Draft Submission Please bring your (1) figure and (2) code to class on the date indicated in Canvas. We will do a checkoff in class and go over questions. You should attempt each step of the code, though it is fine if there are errors, or if it fails compute due to errors in previous sections.\nFinal Submission Canvas Please include a Jupyter notebook with the following:\nDetailed description of the completed steps above (included as blocks alongside chunks of related code) Code used in solving the problem (inline in the report in code blocks), along with descriptions detailing your approach Answers to all discussion questions above. Please follow the \u0026ldquo;Submission Best Practices\u0026rdquo; document posted on Canvas. This assignment should be submitted to canvas as a .pdf document or a jupyter notebook (.ipynb). If submitted as a notebook, make sure it is fully compiled. This can be done by opening the file in the jupyter browser and in the top jupyter menu selecting \u0026ldquo;Kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;Restart and Run All\u0026rdquo;.\nWebsite Please also post the completed assignment to your team\u0026rsquo;s website as a rendered jupyter notebook, saved as markdown and uploaded to github.\nOther Files In addition to answering completing each point in the instructions and discussion, please also include (in your Canvas submission as well as posted to your website):\n**Bibliography: **Please use a bibliography at the bottom of the page, formatted in IEEE format. Use citations (like this [1]) in the body of your report Appendices Data - upload and link to all raw data collected in the generation of this report Code - upload and link to any other code created and by your team (other than the jupyter notebook itself) in the generation of this report. ","permalink":"https://foldable-robotics.github.io/assignments/system-kinematics/","tags":null,"title":"System Kinematics"},{"categories":null,"contents":" 5-Layer Design A typical five layer design consists of\nRigid Material Adhesive Flexure MAterial Adhesive Rigid Material Preparing your Cut Files You should have already generated cutfiles using the process outlined in the last chapter.\nA good idea is to use the same page dimensions in your arwork as the bed of the laser. It is also a good idea to combine cut files for the same material using a dxf or pdf editing tool, in order to minimize the number of manual operations. Just make sure that layer 4 adhesive images are mirror-imaged. More on that below\u0026hellip;.\nTurn off all fill colors. You will not be rastering anything.\nAnother good idea is to use the color of your vector art to control whether something is used as a placement guide or is actually cut. Often you can set red to be cut, while blue is ignored by the laser-cutter software. This will be used later.\nFirst-pass cut considerations For single-material sheets which are cut out in the laser by themselves, there is freedom in how you rotate and orient your cut pattern when sending it to the laser. It can be a mirror image of itself, and when you remove that material, you can flip it back over to use it. Materials with a backing, however, must be cut so that the orientation of the artwork matches the process of manufacturing.\nIf you are using a paper-backed adhesive, for example, its backing enforces which layer gets adhered to first, an important manufacturability consideration. For example, if you cut a pattern with the adhesive down and backing up in the laser, the adhesive layer must be bonded to the layer below it in the stack order. If you cut the material with the adhesive up and backing down, it must first be bonded to the layer above it before the backing can be removed. In addition, you must consider ease of cutting as well. For standard paper-backed acrylic adhesive, it is sometimes easier to place it adhesive-side down in the laser, as the tacky adhesive holds itself down and prevents curling. Thus, any adhesive which must be bonded to the material above it in the stack order must have its artwork mirrored if it is to be placed adhesive-facing down in the laser cutter.\nLet\u0026rsquo;s consider this in the context of a five layer laminate, with layer 1 on the bottom of the stack, and layer 5 on the top. This means that the adhesive layer\u0026rsquo;s artwork (layer 2), if cut out with adhesive facing down in the laser cutter, must be bonded to the top of layer 1 before the backing can be peeled away. This is desireable for the lamination step, as layer 3, the flexible layer, is less controllable as it is more flexible, and bonds to the adhesive even if it lightly touches it, making it more possible to have a manufacturing mistake.\nNow think about the adhesive on layer 4. With the adhesive side down in the laser, the resulting cut will have the adhesive side touching layer 3. Due to the above-mentioned manufacturability considerations, it is desirable for this thin, flexible adhesive layer to face the rigid layer instead (layer 5). Thus, layer 4 adhesive artwork should be mirror-imaged, so that the adhesive faces up when placed in the stack, not down.\nSecond-pass cut considerations When aligning your second pass cut, it is useful to re-use the rigid-layer cutfile to place the second-pass cut directly over the hole created in the first pass cut. This makes it possible to use the rigid material left in the machine after the last first-pass cut to be reused after you have laminated all the layers together. Utilize colors to bring in your second pass cut and align it to the first pass cut (use snapping or specify the position based on the position of the first-pass cut geometry.), and then disable the first pass cut by setting it to a color the laser will ignore.\nCut first-pass cut for all layers Preparing your Cut Settings Disable raster cuts. All cuts computed by our manufacturing code is intended to be cut all-the-way through.\nWhile each laser cutter is different, lets discuss a good strategy for ideally finding the best cut setting for your laser. Start with the laser cutter at 100% speed and 100% power. Perform a small test cut on your material in the top left corner by drawing a small box and checking to see if the box falls out of the material when cut. If the material can be fully cut out, divide the power by half and try the cut again, moving the square to the right by a small amount so you don\u0026rsquo;t cut over the same spot twice. Continue this process until you have lowered the power to where it consistently cuts through your part, but uses the least amount of power possible.\nConversely, if at 100% speed and 100% power the material is not fully cut out, lower the speed by half until you repeatedly can cut through the material. For example, go from 100% to 50% to 25% to 12%. Once you are able to fully cut through the material, slowly raise the speed as much as you can.\nIt is a good idea to test your speeds and power out on a small piece of scrap material. Then record your cut settings as you will need these often.\nLaser cutters often have different power settings for raster and vector. Since we are only doing vector cuts, you can turn off the raster setting.\nAdditionally, some laser cutters have path optimization options. Select the \u0026ldquo;inside-out\u0026rdquo; strategy if available, as this will guarantee that your material, when cut, is not first separated from the surrounding material which is holding it.\nIf there is a \u0026ldquo;centering\u0026rdquo; option, it is a good idea to disable it if you have already defined a page size equal to the laser bed size. This will enable you to place your artwork exactly where you want it to be cut in the bed. This option can sometimes be found in the laser cut settings as well as the printer preferences settings.\nLenses and Focusing: Some laser cutters have multiple lens options. For a thick laminate, try using a longer focal length lens. This will make the laser less susceptible to small variations in thickness or height, at the expense of perhaps a smaller spot size \u0026ndash; and kerf width.\nAdditionally, for thick laminates, some times it is appropriate to adjust the bed height across several passes. I have at times adjusted the bed after focusing so that the height is at the laminates top, mid, and bottom planes across 3 or more passes. This ensures that the laser is focused at multiple heights in case your laser is having trouble cutting through a thick laminate. Tighter integration with laser manufacturers might permit this setting to be automated in the future.\nThis cut should also include any layer identification you will need to identify each layer of your laminate. The rest of this sequence will assume you have identified the bottom layer as layer 1, and the top layer as layer 5. A layer which is \u0026ldquo;right side up\u0026rdquo; should have the text legible, and an \u0026ldquo;upside down layer\u0026rdquo; is when the text is mirrored.\nAs the lens is an optical system, it can be easily fouled by smoke and particulates ejected by prior cuts. If you notice a loss of cutting power, clean the lens.\nPrepare Material Tape down the material in the laser cutter. With the air on, it is easy for the material to be blown away as the laser cuts pieces away. This can result in the part moving in the laser cutter and its precision being affected.\nTurn the air on.\nEnsure the bed is homed and that home is set to the same coordinate system as your artwork is defined. This is often the top, left-hand corner of the printer bed.\nCut Settings(25W Universal Laser) Layer Speed Power Passes 1-mil polyester 20% 100% 1 MHA acrylic adhesive 20% 100% 1 6-Ply Dick Blick Posterboard 15% 100% 2 6-Ply Dick Blick Posterboard 12% 100% 1 Full Laminate 5% 100% 1 Cut Starting with your flexible layer,\nSend your artwork to the printer. Open the lid, turn on the laser pointer if available, and run the sequence without the laser on to ensure the material is well aligned with the cut. When satisfied, stop the cut, reset the sequence, and close the lid Turn the air supply on to the laser head Turn on the vacuum or fume extraction system. Start the cut on your experimentally-determined cut setting. Repeat this sequence for the adhesive layer and finally the rigid layer. When the rigid layer is finished cutting, remove the parts but do not remove the outer scrap. We will use this to align the second-pass cut.\nStep 2: Laminate layers together Turn on the press Depending on the adhesive\u0026rsquo;s melting point and the thickness of the other materials, it is necessary to set the temperature of the press correctly. For our standard acrylic adhesive, the melting range is between 180-220$^{\\circ}$F. Light laminations should be for just long enough to get a bond across the full surface of the adhesive.\nLamination sequence There is a trick to this. Since soft materials bend and flex a lot, if you try and push it down in an alignment jig, there will inevitably be one area which makes initial contact, and the flexibiliy of the layer may not ensure that you get proper alignment. You can do several things to fix this, including using a rigid backing to place a thin, flexible layer in better alignment. The simplest method is to lay the soft material in the jig first, and then push it flat against the surface of the jig. You can then proceed to push down the more rigid layer without the same risk of misalignment.\nSequence:\nPlace alignment pins in jig at spacing proper for your design Lay down adhesive layer 2 upside down (with adhesive side facing up) in the jig Lay down rigid layer 1 upside down, so that it matches layer 2\u0026rsquo;s orientation Remove the locating pins from the jig. Slide layers off the jig together, taking care not to let them slip against each other and losing alignment Lightly laminate layers together Remove paper backing from layer 2, taking care not to peel away the adhesive as well. Place alignment pins in jig at spacing proper for your design Place adhesive layer 4 right side up (with adhesive side facing up) in the jig Place rigid layer 5 so that it matches layer 4 orientation Remove the locating pins from the jig Slide layers off the jig together, taking care not to let them slip against each other (losing alignment) Lightly laminate layers together Remove paper backing from layer 4, taking care not to peel away the adhesive as well. Place alignment pins in jig at spacing proper for your design Place layer 3 in the jig Place laminated layers 4 \u0026amp; 5 in the jig so that it matches layer 3 orientation Remove the locating pins from the jig Slide both layers off the jig together, taking care not to let them slip against each other (losing alignment) You may laminate briefly to tack these layers down if they are prone to slipping (typically don\u0026rsquo;t need to) Carefully flip layers 3,4\u0026amp;5. Place alignment pins in jig at spacing proper for your design Place layers 1\u0026amp;2 Place layers 3, 4 \u0026amp; 5 in the jig so that it matches the orientation of layers 1\u0026amp;2. Remove the locating pins from the jig Slide layers off the jig together, taking care not to let them slip against each other (losing alignment) Laminate layers together, keeping on the press to securely bond all layers. Step 3: Second-Pass Cut If you followed these instructions, the rigid material scrap should still be taped in place in the bed of the laser, with the second pass cut aligned with the hole created by the first-pass cut.\nAlternately, you will need to make a new jig. Place a new piece of rigid material in the bed and tape it down. Run your second pass cut file on the rigid layer material. This should remove the outer profile of the laminate. Remove all inner material leaving the outline of your laminate. This creates a jig to be used in the final cut. Put the laminate stack in the hole created at the end of the first pass cut.\nBefore running the cut at full power, it is advisable to run a test cut to ensure that your jig aligns the material well. Try running at a low power, high speed setting to trace a path on the top of the laminate for inspection. Check around hinges to ensure that the cutout fully removes all connected material.\nYour laser cut settings for a full laminate should be slower and / or more powerful than the cut settings for your most difficult-to-cut individual layer. For example, if your rigid material requires 100% power and 20% speed to be fully cut out, try setting your second pass cut setting to around 100% power, 10% speed as a first guess. It will have to cut through at least twice the thickness of your thickest layer, and has to deal with focus issues that crop up in thicker materials.\nRepeat passes as needed, incrementally increasing or decreasing cut power and speed until you get the desired cut depth.\nIf your laminate is thick or you have a short focal length lens, it may be worth considering raising the bed in order to bring the bottom plane of the material into better focus. This can often be commanded directly from the cut settings in the printer preferences.\nBefore fully removing your part, ensure that the final device has fully been separated from its support. This can be often seen with the naked eye as the laser closes a given path (the part actually falls out a bit), or checked by gently trying to remove the inner part. It is easier to cut multiple passes before moving it than after you have touched it, though. Moving the part can lead to mis-aligned cuts\nRemove and assemble Once the laminate is removable, you may take it out of the laser and assemble it.\nStep 4: Clean up your Area Turn the temperature of the press back to its normal setting Clean all scrap material. Return big unused scrap, throw away small scrap Turn off air supply to laser(if applicable) Turn off laser(if applicable) Turn off vacuum to laser (if applicable) Put away all tools including scissors, focusing tool Clean files off the desktop and sign out ","permalink":"https://foldable-robotics.github.io/modules/manufacturing/the-fabrication-process/","tags":null,"title":"The Fabrication Process"},{"categories":null,"contents":"Introduction The purpose of this module is to show you how to track position data using a low-cost camera such as a smartphone. Use this video to follow along!\nExternal Resources Tracker Software\nProcedure Set up your Experiment\nCreate your experiment so that captured motion is in a plane perpendicular to the lens\u0026rsquo;s radial axis.\nEnsure markers are not occluded as your system moves. This will result in lost data.\nEnsure your \u0026ldquo;ground link\u0026rdquo; is rigidly attached to ground. Any unmeasured flexibility will add error to your system\nEliminate the effects of contact and friction if possible. Rigidly attach your system in a given configuration rather than assuming it is unmoving due to friction.\nPlace Markers.\nUtilize a high-contrast color scheme in the materials you use. If your device is dark or light-colored, create colored markers that are the inverse color scheme. Add markers to your (fixed) base reference frame. This will be useful in case your camera moves during capture. When sizing your markers, consider that the larger your marker, the larger the search window needs to be in tracker, which will slow tracking down. The smaller your marker, the higher Light your Experiment\nLight your scene well so that your camera may use a smaller aperture. This will help reduce blurring and improve tracking performance. Avoid shadows, changing lighting conditions, or other dark/light spots in your scene. Sunlight is good as long as it does not go behind a cloud. Measure your experiment. Take key measurements of your system, including:\nDistance between each marker Mass of rigid links Distance between camera lens and plane of experiment. (useful for expert-level calibration) Take video. Suggestions:\nIf possible to manually adjust camera settings, increase shutter rate Set your shutter speed to at least 1/500th of a second or faster. Use a lens that has a long focus length so that you can reach the action (200mm or higher) Use \u0026ldquo;slow motion\u0026rdquo; mode if available. This will increase the frame-rate. Set the camera far enough back that it captures the whole scene as your device moves throughout its workspace. Utilize the center of the frame as much as possible to minimize lens distortion effects Measure the angle of \u0026ldquo;ground\u0026rdquo; by including Use a tripod to ensure your camera does not move. Open Tracker, then load a new video.\nAdjust the markers on the left and right of the timeline to select a portion of the video Create a \u0026ldquo;coordinate system\u0026rdquo;. Drag the marker to the origin of your system and align the x axis with the horizontal plane using the angle box\nCreate a Calibration Stick. Use shift+left click to place two points, then enter the length measured between those points\nTrack points.\nCreate a new point mass Using ctrl+shift+left click, select an identifiable object in the scene to create a keyframe Click Search and Tracker will automatically track the template as far as it can. You can also adjust the size of the search box to increase the chances of it being found automatically If problems occur, you can re-select points or fix keyframes using the tools in the autotracker window.\nIf the tracker loses the location of the mass, you can reselect it using ctrl + shift + left select. If the tracking is in error, you can go back in your video to the point it diverged and delete all keyframes after. Repeat if you have multiple markers to track. Close the window when done\nExport data table to a .csv file. Note: it seems that tracker\u0026rsquo;s export function is a little buggy. Instead of exporting a file directly, set your settings per the figure below and copy all rows and columns of the data table below directly into excel.\ncheck that the full precision of the numbers was retrieved by adjusting the format.\nsave as .csv\nUse the following code to extract your data and interpolate it:\n# -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Created on Wed Mar 3 13:54:15 2021 @author: danaukes \u0026#34;\u0026#34;\u0026#34; import pandas as pd import numpy import matplotlib.pyplot as plt import scipy.interpolate as si df=pd.read_csv(r\u0026#39;C:\\Users\\danaukes\\Documents\\Tracker\\mydata.csv\u0026#39;, sep=\u0026#39;,\u0026#39;) #x = df.x.astype(\u0026#39;float64\u0026#39;).to_numpy() x = df.x.to_numpy() y = df.y.to_numpy() t = df.t.to_numpy() xy = numpy.array([x,y]).T f = si.interp1d(t,xy.T,fill_value=\u0026#39;extrapolate\u0026#39;,kind=\u0026#39;quadratic\u0026#39;) new_t = numpy.r_[0:t[-1]:.1] plt.figure() plt.plot(t,x) plt.plot(new_t,f(new_t)[0]) plt.figure() plt.plot(t,y) plt.plot(new_t,f(new_t)[1]) plt.figure() plt.plot(x,y) ","permalink":"https://foldable-robotics.github.io/modules/validation/tracker-tutorial/","tags":null,"title":"Tracker Tutorial"},{"categories":null,"contents":"%matplotlib inline Try running with this variable set to true and to false and see the difference in the resulting equations of motion\nuse_constraints = False Import all the necessary modules\n# -*- coding: utf-8 -*- \u0026#34;\u0026#34;\u0026#34; Written by Daniel M. Aukes Email: danaukes\u0026lt;at\u0026gt;gmail.com Please see LICENSE for full license. \u0026#34;\u0026#34;\u0026#34; import pynamics from pynamics.frame import Frame from pynamics.variable_types import Differentiable,Constant from pynamics.system import System from pynamics.body import Body from pynamics.dyadic import Dyadic from pynamics.output import Output,PointsOutput from pynamics.particle import Particle from pynamics.constraint import AccelerationConstraint import pynamics.integration import numpy import sympy import matplotlib.pyplot as plt plt.ion() from math import pi The next two lines create a new system object and set that system as the global system within the module so that other variables can use and find it.\nsystem = System() pynamics.set_system(__name__,system) Parameterization Constants Declare constants and seed them with their default value. This can be changed at integration time but is often a nice shortcut when you don\u0026rsquo;t want the value to change but you want it to be represented symbolically in calculations\nlA = Constant(1,\u0026#39;lA\u0026#39;,system) lB = Constant(1,\u0026#39;lB\u0026#39;,system) lC = Constant(1,\u0026#39;lC\u0026#39;,system) mA = Constant(1,\u0026#39;mA\u0026#39;,system) mB = Constant(1,\u0026#39;mB\u0026#39;,system) mC = Constant(1,\u0026#39;mC\u0026#39;,system) g = Constant(9.81,\u0026#39;g\u0026#39;,system) b = Constant(1e1,\u0026#39;b\u0026#39;,system) k = Constant(1e1,\u0026#39;k\u0026#39;,system) preload1 = Constant(0*pi/180,\u0026#39;preload1\u0026#39;,system) preload2 = Constant(0*pi/180,\u0026#39;preload2\u0026#39;,system) preload3 = Constant(0*pi/180,\u0026#39;preload3\u0026#39;,system) Ixx_A = Constant(1,\u0026#39;Ixx_A\u0026#39;,system) Iyy_A = Constant(1,\u0026#39;Iyy_A\u0026#39;,system) Izz_A = Constant(1,\u0026#39;Izz_A\u0026#39;,system) Ixx_B = Constant(1,\u0026#39;Ixx_B\u0026#39;,system) Iyy_B = Constant(1,\u0026#39;Iyy_B\u0026#39;,system) Izz_B = Constant(1,\u0026#39;Izz_B\u0026#39;,system) Ixx_C = Constant(1,\u0026#39;Ixx_C\u0026#39;,system) Iyy_C = Constant(1,\u0026#39;Iyy_C\u0026#39;,system) Izz_C = Constant(1,\u0026#39;Izz_C\u0026#39;,system) torque = Constant(0,\u0026#39;torque\u0026#39;,system) freq = Constant(3e0,\u0026#39;freq\u0026#39;,system) Differentiable State Variables Define your differentiable state variables that you will use to model the state of the system. In this case $qA$, $qB$, and $qC$ are the rotation angles of a three-link mechanism\nqA,qA_d,qA_dd = Differentiable(\u0026#39;qA\u0026#39;,system) qB,qB_d,qB_dd = Differentiable(\u0026#39;qB\u0026#39;,system) qC,qC_d,qC_dd = Differentiable(\u0026#39;qC\u0026#39;,system) Initial Values Define a set of initial values for the position and velocity of each of your state variables. It is necessary to define a known. This code create a dictionary of initial values.\ninitialvalues = {} initialvalues[qA]=0*pi/180 initialvalues[qA_d]=0*pi/180 initialvalues[qB]=0*pi/180 initialvalues[qB_d]=0*pi/180 initialvalues[qC]=0*pi/180 initialvalues[qC_d]=0*pi/180 These two lines of code order the initial values in a list in such a way that the integrator can use it in the same order that it expects the variables to be supplied\nstatevariables = system.get_state_variables() ini = [initialvalues[item] for item in statevariables] Kinematics Frames Define the reference frames of the system\nN = Frame(\u0026#39;N\u0026#39;,system) A = Frame(\u0026#39;A\u0026#39;,system) B = Frame(\u0026#39;B\u0026#39;,system) C = Frame(\u0026#39;C\u0026#39;,system) Newtonian Frame It is important to define the Newtonian reference frame as a reference frame that is not accelerating, otherwise the dynamic equations will not be correct\nsystem.set_newtonian(N) Rotate each successive frame by amount q from the last. This approach can produce more complex equations but is representationally simple (Minimal Representation)\nA.rotate_fixed_axis(N,[0,0,1],qA,system) B.rotate_fixed_axis(A,[0,0,1],qB,system) C.rotate_fixed_axis(B,[0,0,1],qC,system) Vectors Define the vectors that describe the kinematics of a series of connected lengths\npNA - This is a vector with position at the origin. pAB - This vector is length $l_A$ away from the origin along the A.x unit vector pBC - This vector is length $l_B$ away from the pAB along the B.x unit vector pCtip - This vector is length $l_C$ away from the pBC along the C.x unit vector Define my rigid body kinematics\npNA=0*N.x pAB=pNA+lA*A.x pBC = pAB + lB*B.x pCtip = pBC + lC*C.x Centers of Mass It is important to define the centers of mass of each link. In this case, the center of mass of link A, B, and C is halfway along the length of each\npAcm=pNA+lA/2*A.x pBcm=pAB+lB/2*B.x pCcm=pBC+lC/2*C.x Calculating Velocity The angular velocity between frames, and the time derivatives of vectors are extremely useful in calculating the equations of motion and for determining many of the forces that need to be applied to your system (damping, drag, etc). Thus, it is useful, once kinematics have been defined, to take or find the derivatives of some of those vectors for calculating linear or angular velocity vectors\nAngular Velocity The following three lines of code computes and returns the angular velocity between frames N and A (${}^N\\omega^A$), A and B (${}^A\\omega^B$), and B and C (${}^B\\omega^C$). In other cases, if the derivative expression is complex or long, you can supply pynamics with a given angular velocity between frames to speed up computation time.\nwNA = N.get_w_to(A) wAB = A.get_w_to(B) wBC = B.get_w_to(C) Vector derivatives The time derivatives of vectors may also be\nvCtip = pCtip.time_derivative(N,system)\nDefine Inertias and Bodies The next several lines compute the inertia dyadics of each body and define a rigid body on each frame. In the case of frame C, we represent the mass as a particle located at point pCcm.\nIA = Dyadic.build(A,Ixx_A,Iyy_A,Izz_A) IB = Dyadic.build(B,Ixx_B,Iyy_B,Izz_B) IC = Dyadic.build(C,Ixx_C,Iyy_C,Izz_C) BodyA = Body(\u0026#39;BodyA\u0026#39;,A,pAcm,mA,IA,system) BodyB = Body(\u0026#39;BodyB\u0026#39;,B,pBcm,mB,IB,system) BodyC = Body(\u0026#39;BodyC\u0026#39;,C,pCcm,mC,IC,system) #BodyC = Particle(pCcm,mC,\u0026#39;ParticleC\u0026#39;,system) Forces and Torques Forces and torques are added to the system with the generic addforce method. The first parameter supplied is a vector describing the force applied at a point or the torque applied along a given rotational axis. The second parameter is the vector describing the linear speed (for an applied force) or the angular velocity(for an applied torque)\nsystem.addforce(torque*sympy.sin(freq*2*sympy.pi*system.t)*A.z,wNA) \u0026lt;pynamics.force.Force at 0x7fb36eb9f5e0\u0026gt; Damper system.addforce(-b*wNA,wNA) system.addforce(-b*wAB,wAB) system.addforce(-b*wBC,wBC) \u0026lt;pynamics.force.Force at 0x7fb36eab5430\u0026gt; Spring Forces Spring forces are a special case because the energy stored in springs is conservative and should be considered when calculating the system\u0026rsquo;s potential energy. To do this, use the add_spring_force command. In this method, the first value is the linear spring constant. The second value is the \u0026ldquo;stretch\u0026rdquo; vector, indicating the amount of deflection from the neutral point of the spring. The final parameter is, as above, the linear or angluar velocity vector (depending on whether your spring is a linear or torsional spring)\nIn this case, the torques applied to each joint are dependent upon whether qA, qB, and qC are absolute or relative rotations, as defined above.\nsystem.add_spring_force1(k,(qA-preload1)*N.z,wNA) system.add_spring_force1(k,(qB-preload2)*A.z,wAB) system.add_spring_force1(k,(qC-preload3)*B.z,wBC) (\u0026lt;pynamics.force.Force at 0x7fb36eabafd0\u0026gt;, \u0026lt;pynamics.spring.Spring at 0x7fb36eabad90\u0026gt;) Gravity Again, like springs, the force of gravity is conservative and should be applied to all bodies. To globally apply the force of gravity to all particles and bodies, you can use the special addforcegravity method, by supplying the acceleration due to gravity as a vector. This will get applied to all bodies defined in your system.\nsystem.addforcegravity(-g*N.y) Constraints Constraints may be defined that prevent the motion of certain elements. Try turning on the constraints flag at the top of the script to see what happens.\nif use_constraints: eq = [] eq.append(pCtip) eq_d=[item.time_derivative() for item in eq] eq_dd=[item.time_derivative() for item in eq_d] eq_dd_scalar = [] #eq_dd_scalar.append(eq_dd[0].dot(N.x)) eq_dd_scalar.append(eq_dd[0].dot(N.x)) constraint = AccelerationConstraint(eq_dd_scalar) system.add_constraint(constraint) F=ma This is where the symbolic expressions for F and ma are calculated. This must be done after all parts of the system have been defined. The getdynamics function uses Kane\u0026rsquo;s method to derive the equations of motion.\nf,ma = system.getdynamics() 2022-03-02 15:19:02,917 - pynamics.system - INFO - getting dynamic equations f [-b*qA_d - g*lA*mA*cos(qA)/2 - g*lA*mB*cos(qA) - g*lA*mC*cos(qA) + g*lB*mB*sin(qA)*sin(qB)/2 - g*lB*mB*cos(qA)*cos(qB)/2 + g*lB*mC*sin(qA)*sin(qB) - g*lB*mC*cos(qA)*cos(qB) - g*lC*mC*(-sin(qB)*sin(qC) + cos(qB)*cos(qC))*cos(qA)/2 - g*lC*mC*(-sin(qB)*cos(qC) - sin(qC)*cos(qB))*sin(qA)/2 - k*(-preload1 + qA) + torque*sin(2*freq*pi*t), -b*qB_d + g*lB*mB*sin(qA)*sin(qB)/2 - g*lB*mB*cos(qA)*cos(qB)/2 + g*lB*mC*sin(qA)*sin(qB) - g*lB*mC*cos(qA)*cos(qB) - g*lC*mC*(-sin(qB)*sin(qC) + cos(qB)*cos(qC))*cos(qA)/2 - g*lC*mC*(-sin(qB)*cos(qC) - sin(qC)*cos(qB))*sin(qA)/2 - k*(-preload2 + qB), -b*qC_d - g*lC*mC*(-sin(qB)*sin(qC) + cos(qB)*cos(qC))*cos(qA)/2 - g*lC*mC*(-sin(qB)*cos(qC) - sin(qC)*cos(qB))*sin(qA)/2 - k*(-preload3 + qC)] ma [Izz_A*qA_dd + Izz_B*(qA_dd + qB_dd) + Izz_C*(qA_dd + qB_dd + qC_dd) + lA**2*mA*qA_dd/4 + lA**2*mB*qA_dd + lA**2*mC*qA_dd + lA*lB*mB*qA_d**2*sin(qB)/2 + lA*lB*mB*qA_dd*cos(qB)/2 - lA*lB*mB*(qA_d + qB_d)**2*sin(qB)/2 + lA*lB*mC*qA_d**2*sin(qB) + lA*lB*mC*qA_dd*cos(qB) - lA*lB*mC*(qA_d + qB_d)**2*sin(qB) + lA*mB*(lB*qA_dd/2 + lB*qB_dd/2)*cos(qB) + lA*mC*(lB*qA_dd + lB*qB_dd)*cos(qB) + lA*(-lC*mC*(qA_d + qB_d + qC_d)**2*sin(qC)/2 + mC*(lC*qA_dd/2 + lC*qB_dd/2 + lC*qC_dd/2)*cos(qC))*cos(qB) + lA*(-lC*mC*(qA_d + qB_d + qC_d)**2*cos(qC)/2 - mC*(lC*qA_dd/2 + lC*qB_dd/2 + lC*qC_dd/2)*sin(qC))*sin(qB) + lB*lC*mC*(qA_d + qB_d)**2*sin(qC)/2 - lB*lC*mC*(qA_d + qB_d + qC_d)**2*sin(qC)/2 + lB*mB*(lB*qA_dd/2 + lB*qB_dd/2)/2 + lB*mC*(lB*qA_dd + lB*qB_dd) + lB*mC*(lC*qA_dd/2 + lC*qB_dd/2 + lC*qC_dd/2)*cos(qC) + lC*mC*(lB*qA_dd + lB*qB_dd)*cos(qC)/2 + lC*mC*(lC*qA_dd/2 + lC*qB_dd/2 + lC*qC_dd/2)/2 + lC*(lA*mC*qA_d**2*sin(qB) + lA*mC*qA_dd*cos(qB))*cos(qC)/2 - lC*(-lA*mC*qA_d**2*cos(qB) + lA*mC*qA_dd*sin(qB))*sin(qC)/2, Izz_B*(qA_dd + qB_dd) + Izz_C*(qA_dd + qB_dd + qC_dd) + lA*lB*mB*qA_d**2*sin(qB)/2 + lA*lB*mB*qA_dd*cos(qB)/2 + lA*lB*mC*qA_d**2*sin(qB) + lA*lB*mC*qA_dd*cos(qB) + lB*lC*mC*(qA_d + qB_d)**2*sin(qC)/2 - lB*lC*mC*(qA_d + qB_d + qC_d)**2*sin(qC)/2 + lB*mB*(lB*qA_dd/2 + lB*qB_dd/2)/2 + lB*mC*(lB*qA_dd + lB*qB_dd) + lB*mC*(lC*qA_dd/2 + lC*qB_dd/2 + lC*qC_dd/2)*cos(qC) + lC*mC*(lB*qA_dd + lB*qB_dd)*cos(qC)/2 + lC*mC*(lC*qA_dd/2 + lC*qB_dd/2 + lC*qC_dd/2)/2 + lC*(lA*mC*qA_d**2*sin(qB) + lA*mC*qA_dd*cos(qB))*cos(qC)/2 - lC*(-lA*mC*qA_d**2*cos(qB) + lA*mC*qA_dd*sin(qB))*sin(qC)/2, Izz_C*(qA_dd + qB_dd + qC_dd) + lB*lC*mC*(qA_d + qB_d)**2*sin(qC)/2 + lC*mC*(lB*qA_dd + lB*qB_dd)*cos(qC)/2 + lC*mC*(lC*qA_dd/2 + lC*qB_dd/2 + lC*qC_dd/2)/2 + lC*(lA*mC*qA_d**2*sin(qB) + lA*mC*qA_dd*cos(qB))*cos(qC)/2 - lC*(-lA*mC*qA_d**2*cos(qB) + lA*mC*qA_dd*sin(qB))*sin(qC)/2] Solve for Acceleration The next line of code solves the system of equations F=ma plus any constraint equations that have been added above. It returns one or two variables. func1 is the function that computes the velocity and acceleration given a certain state, and lambda1(optional) supplies the function that computes the constraint forces as a function of the resulting states\nThere are a few ways of solveing for a. The below function inverts the mass matrix numerically every time step. This can be slower because the matrix solution has to be solved for, but is sometimes more tractable than solving the highly nonlinear symbolic expressions that can be generated from the previous step. The other options would be to use state_space_pre_invert, which pre-inverts the equations symbolically before generating a numerical function, or state_space_post_invert2, which adds Baumgarte\u0026rsquo;s method for intermittent constraints.\nfunc1,lambda1 = system.state_space_post_invert(f,ma,return_lambda = True) 2022-03-02 15:19:03,319 - pynamics.system - INFO - solving a = f/m and creating function 2022-03-02 15:19:03,426 - pynamics.system - INFO - substituting constrained in Ma-f. 2022-03-02 15:19:03,497 - pynamics.system - INFO - done solving a = f/m and creating function 2022-03-02 15:19:03,497 - pynamics.system - INFO - calculating function for lambdas Integration Tolerance Specify the precision of the integration\ntol = 1e-7 Time Define variables for time that can be used throughout the script. These get used to create the t array, a list of every time value that is solved for during integration\ntinitial = 0 tfinal = 10 fps = 30 tstep = 1/fps t = numpy.r_[tinitial:tfinal:tstep] Integrate The next line of code integrates the function calculated\nstates=pynamics.integration.integrate(func1,ini,t,rtol=tol,atol=tol, args=({\u0026#39;constants\u0026#39;:system.constant_values},)) 2022-03-02 15:19:03,563 - pynamics.integration - INFO - beginning integration 2022-03-02 15:19:03,565 - pynamics.system - INFO - integration at time 0000.00 2022-03-02 15:19:03,772 - pynamics.integration - INFO - finished integration Outputs The next section simply calculates and plots a variety of data from the previous simulation\nStates plt.figure() artists = plt.plot(t,states[:,:3]) plt.legend(artists,[\u0026#39;qA\u0026#39;,\u0026#39;qB\u0026#39;,\u0026#39;qC\u0026#39;]) \u0026lt;matplotlib.legend.Legend at 0x7fb36eaa6430\u0026gt; Energy KE = system.get_KE() PE = system.getPEGravity(pNA) - system.getPESprings() energy_output = Output([KE-PE],system) energy_output.calc(states,t) energy_output.plot_time() 2022-03-02 15:19:04,061 - pynamics.output - INFO - calculating outputs 2022-03-02 15:19:04,072 - pynamics.output - INFO - done calculating outputs Constraint Forces This line of code computes the constraint forces once the system\u0026rsquo;s states have been solved for.\nif use_constraints: lambda2 = numpy.array([lambda1(item1,item2,system.constant_values) for item1,item2 in zip(t,states)]) plt.figure() plt.plot(t, lambda2) Motion points = [pNA,pAB,pBC,pCtip] points_output = PointsOutput(points,system) y = points_output.calc(states,t) points_output.plot_time(20) 2022-03-02 15:19:04,217 - pynamics.output - INFO - calculating outputs 2022-03-02 15:19:04,232 - pynamics.output - INFO - done calculating outputs \u0026lt;AxesSubplot:\u0026gt; Motion Animation in normal Python the next lines of code produce an animation using matplotlib\npoints_output.animate(fps = fps,movie_name = \u0026#39;triple_pendulum.mp4\u0026#39;,lw=2,marker=\u0026#39;o\u0026#39;,color=(1,0,0,1),linestyle=\u0026#39;-\u0026#39;) To plot the animation in jupyter you need a couple extra lines of code\u0026hellip;\nfrom matplotlib import animation, rc from IPython.display import HTML HTML(points_output.anim.to_html5_video()) ","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/08-triple-pendulum-example/","tags":null,"title":"Triple Pendulum Example"},{"categories":null,"contents":"import idealab_tools.units idealab_tools.units.force kilogram*meter/second^2 idealab_tools.units.force.base_units {'kilogram': 1, 'meter': 1, 'second': -2} idealab_tools.units.force.compute_scaling() 1 idealab_tools.units.Unit.set_scaling(meter=10) idealab_tools.units.Unit.set_scaling(kilogram=.1) idealab_tools.units.force.compute_scaling() 1.0 idealab_tools.units.length.compute_scaling() 10 idealab_tools.units.energy.compute_scaling() 10.0 ","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/07-unit-scaling/","tags":null,"title":"Unit Scaling"},{"categories":null,"contents":"There are several Python packages that are in active development for the purposes of this class. Copy and paste the following lines into your command prompt / terminal to update these packages:\npip install --force-reinstall --no-cache-dir --upgrade pypoly2tri idealab_tools foldable_robotics pynamics ","permalink":"https://foldable-robotics.github.io/modules/python/updating-python-packages/","tags":null,"title":"Updating Python Packages"},{"categories":null,"contents":"About Jupyter Jupyter notebook is a useful browser-based IPython editor that provides inline documentation via markdown and inline plotting functionality for a one-stop-shop coding and documentation experience. Jupyter is useful for creating living documents for class reports, assignments, or other documents where the results may need to be updated and re-run from time to time, yet still be output in a more professional format than the output of a code execution window.\nUsing Jupyter Open up a command prompt or terminal and type jupyter notebook. You can alternately find and run \u0026ldquo;jupyter notebook\u0026rdquo; from the windows start menu. A browser with the jupyter folder interface should open. Navigate to the file you want to run and select it. It will open in a new tab and you can use the menu to learn how to run the entire file or one cell at a time. Errors and values will be seen for each cell. Navigate to a working directory. Start a new Python 3 document. Enter code in the cells. Cells can be code, markdown or raw. code cells are used for executing code, markdown is used for documentation, and raw mode is for plaintext. There is a code mode and a cell mode. code entry mode is for entering code or text into the cell, and cell mode is used for running the cell, cutting/pasting, and other operations that affect the layout of one or more cells In code entry mode, hit escape when entering text to enter cell mode. Click on text to enter code mode. Run the block. In cell mode, use shift+enter to run a block and advance to the next. Use ctrl+enter to execute the cell in place. To learn more about jupyter commands, there is a list of them available at help -\u0026gt; keyboard shortcuts. References The help from within jupyter is good for learning how to navigate jupyter with keystrokes\u0026hellip;a necessary step for making it usable. This site collects some of the best examples, tutorials, etc: https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks ","permalink":"https://foldable-robotics.github.io/modules/python/using-jupyter-notebook/","tags":null,"title":"Using Jupyter Notebook"},{"categories":null,"contents":"Introduction Accessing journal and conference papers off-campus can be a chore, made more difficult by having to use VPN\u0026rsquo;s or navigate ASU Library\u0026rsquo;s search tool. But there\u0026rsquo;s an easier way!\nDrag this link into your bookmark toolbar and click whenever you want to sign in to a specific page through the library\u0026rsquo;s proxy server. It will reload the page you are on, often giving you access to the paper you are seeking.\nASU Library Off-Campus Sign-In\nExternal Resources Thanks to Ted Pavlic\u0026rsquo;s original post on the topic.\n","permalink":"https://foldable-robotics.github.io/modules/misc/library-proxy/","tags":null,"title":"Using the ASU Library Proxy"},{"categories":null,"contents":"Variables in pynamics may be grouped into different categories, and used for different things. We must be careful to talk about these different types of variables carefully, as they have vastly different meanings when it comes to how they are used and computed in pynamics\nFirst is the concept of a variable as it is used in the context of Python programming. In python, any piece of data my be stored as a variable and used in subsequent computations. we will be careful when discussing programming variables to distinguish between them and the other types of variables.\nWhen it comes to symbolic variables used in dynamic modeling, we can discuss several more kinds of variables. First are state variables. State variables are the variables which are used to define the dynamic state of the system. If used to describe the position or orientation of a system, we think of these variables as having smooth and continuous second derivatives. If state variables are used to describe velocities or angular velocities of a system, they must have a smooth and continuous derivative. State variables must be differentiable to at least describe the acceleration of a system. Why? Because $F=ma$, and these variables constitute the variables, that, when derivated, contain that $a$ information.\nThere are also constants. Constants, from the perspective of a dynamics simulation, never change their value. In your program, you may change them each time you run a new simulation. But in the simulation, they don\u0026rsquo;t change. they don\u0026rsquo;t have a derivative, or it is considered to be 0.\nSometimes it is useful to work with constants throughout the computation of dynamics, so that the resulting expressions have a general form. Take g, for example. We often use $g$ to represent 9.81 $\\frac{m}{s^2}$, because writing and working with $g$ is simpler and easier when transferring it around on paper. The same is true for\nOther times it is useful to work with constants in their literal form. A literal constant is a constant for which a numerical value is stored and used immediately. You can use a Python program variable, for example, to store \u0026ldquo;l=2\u0026rdquo;, which, when used in an expression, replaces on first use, and in all subsequent expressions which use it the program variable \u0026ldquo;l\u0026rdquo; for the value \u0026ldquo;2\u0026rdquo;. Why would it be useful? For starters, often the symbolic expressions which are generated by pynamics can be littered with layered and nested expressions consisiting of many repeated elements. Sometimes these expressions get unwieldy and slow to work with. In the cases that these complex expressions may contain symbolic constants which get computed near the end of a simulation, sometimes it is useful and even necessary to replace these constants with their literal values in order to collapse and simplify these nested expressions.\nThere are also general purpose sympy symbols. These may be used as scalar variables within expressions and must be replaced with either an explicit value or another pynamics variable such as a constant or differentiable\n","permalink":"https://foldable-robotics.github.io/modules/dynamics/generated/03-variable-types/","tags":null,"title":"Variable Types"},{"categories":null,"contents":"v,w perpendicular Here the intuition is that perpendicular lines have an angle of $\\theta$ between them. This means that the expression for dot product or cross product can be used, as both use $\\theta$. The dot product produces a scalar result, however, while the result of a cross product is a vector, meaning that all three elements of the vector must equal zero; hence we pick the dot product expression. Using , we substitute $\\theta = \\frac{\\pi}{2}$ into the expression, resulting in the simplified $$ \\vec{v}\\cdot\\vec{w}=0.$$ When broken out into basis vectors $\\hat{a}_x$,$\\hat{a}_y$,and $\\hat{a}_z$, the expression becomes $$ v_x w_x +v_y w_y +v_z w_z = 0$$\nv,w parallel The intuition here is the same as above, except that we substitute the expression $\\theta = 0$ into , because parallel lines have an angle of zero between them. This results in $$ \\vec{v}\\cdot\\vec{w}=|v||w|.$$ In expanded form, this looks like $$ v_x w_x +v_y w_y +v_z w_z = \\sqrt{(v_x^2+v_y^2+v_z^2)(w_x^2+w_y^2+w_z^2)} $$\npoint(p) on line(q,r) using the ideas of , we construct two vectors. The first is a vector between some point on the line, q, and the point p. The second vector is a vector of the line itself. For the point p to be on the line, the two lines must be parallel. $$\\text{given }\\vec{a} = \\vec{p} - \\vec{q} \\text{ and}\\ \\vec{b} = \\vec{r} - \\vec{q},\\ \\vec{a}\\cdot\\vec{b} = |\\vec{a}||\\vec{b}|.$$\ndistance between p and q is l in this case, we create a vector between points p and q, and use to retrieve its magnitude. $$ |\\vec{p} - \\vec{q}| = l \\label{eqn:length_constraint}$$ In expanded form, $$ \\sqrt{(p_x-q_x)^2 +(p_y-q_y)^2 + (p_z-q_z)^2} = l \\label{eqn:length_constraint_expanded}.$$\nloop constraints A loop is a vector that ends where it began. If you think about generic mechanisms as branching articulated bodies, sometimes those branches meet back up at their ends to create closed kinematic chains with interesting motion. One example is the locomotive engine, which consists of a crank connected to a piston which slides. Other common devices include four-bar mechanisms, which can be found in pantographs, prosthetic knees, and the jaws of some fish.\nLoop Example There are four vectors, $\\vec{a}$,$\\vec{b}$,$\\vec{c}$, and $\\vec{d}$ for whom $$ \\vec{a} + \\vec{b} + \\vec{c}+ \\vec{d} =\\vec{0}$$ in expanded form, with basis vectors $\\hat{n}_x$,$\\hat{n}_y$,$\\hat{n}_z$ $$ (a_x +b_x + c_x + d_x)\\hat{n}_x +(a_y +b_y + c_y + d_y)\\hat{n}_y +(a_z +b_z + c_z + d_z)\\hat{n}_z \\nonumber \\ = 0\\hat{n}_x +0\\hat{n}_y +0\\hat{n}_z$$ This is a vector equation, however, and we are more interested in generating a set of scalar equations. To accomplish this, we may dot the entire expresssion with a basis vector to convert the vector expression into a scalar expression. This may be done for each of the three basis vectors. For $\\hat{n}_i$, where $i=(x,y,z)$, $$ (\\vec{a} + \\vec{b} + \\vec{c}+ \\vec{d})\\cdot \\hat{n}_i = \\vec{0} \\cdot \\hat{n}_i\\text{, resulting in } \\ a_x +b_x + c_x + d_x = 0\\ a_y +b_y + c_y + d_y = 0\\ a_z +b_z + c_z + d_z = 0$$ We are left with three scalar constraint equations\nOrigami Systems Using the results of the last section, we can finally start to make a system for analyzing generic origami structures. You can think of an idealized origami system as a set of rigid faces which are permitted to rotate about each other at the fold lines. An ideal origami face is rigid, i.e. any motion in the system occurs between faces, along the fold lines. Rigidity in the faces preserves face edge lengths, and as discussed in , the distance between two points can be expressed with . This allows us to create a system of equations which expresses the motion of the origami system with regard to those fold lines.\nCounting Degrees of Freedom There is a fairly straightforward way to count the number of degrees of freedom in an origami design. Here are the steps:\nDraw your origami structure(black for outline, red for mountain, blue for valley)\nSplit any polygons with $\u0026gt;3$ sides into triangles by adding green lines\nDraw vertices where any two lines meet\nNumber each line as $l_i$. Set $m = $ the total number of all lines(black,red,blue,green)\nNumber each vertex as $v_i$. Set $n = $ the total number of vertices.\nCount $r$, the number of rigid(green) lines\nDetermine $f$, the degrees of freedom of your system using $f = 3n-m-r-6$\nAssembling the constraint equations The first set of equations is generated by directly defining the locations of one triangular face. For each vertex $v_i$ on such a fixed face, $$ v_{ix} - x_i = 0\\ v_{iy} - y_i =0\\ v_{iz} - z_i=0, $$\nwhere $x_i$, $y_i$ and $z_i$ are the positions of each point in x, y, and z coordinates. Repeated over the three vertices, this should produce 9 equations.\nFor each line $l_i$ that is not on the edge of the fixed face, there should be two vertices, $v_j$ and $v_k$ connected to it. Using the expanded form of the length constraint , create an equation which should look like $$ v_{jx}v_{kx}+v_{jy}v_{ky}+v_{jz}v_{kz} - \\ell_i=0, $$\nwhere $\\ell_i$ is the length of line $l_i$. This should be done $m-3$ times.\nFor each green line, there is an additional constraint that the two neighboring faces are parallel to each other. let vertices $v_i$ and $v_j$ be the two vertices shared by the fixed(green) line, and vertices $v_a$ and $v_b$ be the remaining vertices of the two faces.\n$$ \\vec{a}=\\vec{v}_a - \\vec{v}_i \\ \\vec{b}=\\vec{v}_b - \\vec{v}_i \\ \\vec{c}=\\vec{v}_j - \\vec{v}_i \\ \\vec{d}=\\vec{c}\\times\\vec{a}\\ \\vec{e}=\\vec{b}\\times\\vec{c}$$ Using the parallel constraint equation generates an extra equation per rigid line,\n$$ \\vec{d} \\cdot \\vec{e} - |\\vec{d}||\\vec{e}| = 0.$$ this should be done $r$ times.\nThere should be a total of $c=9+(m-3)+r$ equations derived from the above three steps. Alternative derivations are possible, but this recipe is one of the more straightforward.\nCreating the Jacobian Each constraint equation from establishes a relationship between one or more of the variables that determine the vertices\u0026rsquo; positions. By taking the partial derivative of each equation with respect to each of those variables, we are able to understand how the velocity of one variable influences the velocity of the other variables. These partial derivatives can be assembled into a Jacobian matrix, which can be used to establish motion profiles for an origami mechanism. Let $\\mathbf{e} = \\left[\\begin{matrix}e_1 \u0026amp;\\ldots \u0026amp;e_c\\end{matrix}\\right]^T,$, where $e_i$ is the $i$th constraint equation. $\\mathbf{J}$ can therefore be defined as $$ \\mathbf{J} = \\left[ \\begin{matrix} \\frac{\\partial \\mathbf{e}}{\\partial v_{1x}} \u0026amp; \\frac{\\partial \\mathbf{e}}{\\partial v_{1y}} \u0026amp; \\frac{\\partial \\mathbf{e}}{\\partial v_{1z}} \u0026amp; \\ldots \u0026amp; \\frac{\\partial \\mathbf{e}}{\\partial v_{nx}} \u0026amp;\\frac{\\partial \\mathbf{e}}{\\partial v_{ny}} \u0026amp; \\frac{\\partial \\mathbf{e}}{\\partial v_{nz}}\\ \\end{matrix} \\right] $$\n","permalink":"https://foldable-robotics.github.io/modules/kinematics/vector-based-constraint-equations/","tags":null,"title":"Vector Constraint Equations"},{"categories":null,"contents":"A $\\vec{v}$ defines a magnitude and direction in $n$-dimensional space.\nThe concept of a vector comes with a lot of baggage. The first thing you must think about is how many dimensions are you working in? Two or three-dimensional space is normal, but the concept of a vector extends to any dimension.\nOne way to interpret a vector is the thing which describes the difference in position between two points. But what is a point? I would argue that a point is a vector, whose magnitude and direction are referenced from a common origin. So it seems that if we use that definition, a vector is self referencing.\nWith the idea of Cartesian space comes the idea of axes \u0026ndash; such as x,y,z axes \u0026ndash; which represent orthonormal basis vectors. This allows one to mathematically define a vector with a set of scalar quantities, which represent the magnitude along the direction of each basis vector. Given a set of basis vectors $\\hat{a}_x$,$\\hat{a}_y$, and $\\hat{a}_z$, for example, one can use three scalar quantities $v_x$, $v_y$, and $v_z$ to create an arbitrary vector $\\vec{v}$ with the expression $$ \\vec{v} = v_x \\hat{a}_x + v_y \\hat{a}_y + v_z \\hat{a}_z. \\label{eqn:vector_basisform} $$\nThe $\\vec{}$ symbol is used to indicate a vector, while the the $\\hat{}$ is used to indicate a vector with a magnitude of $1$ in $\\eqref{eqn:vector_basisform}$.\nScalar Multiplication Vectors can be multiplied by scalars in order to change their magnitude while preserving their direction. The expression $a\\vec{v}$ represents a vector which is $a$ times the magnitude of $\\vec{v}$. Scalars may be positive or negative; negative scalars indicate an opposite orientation of the vector.\nVector Addition and Subtraction Vectors may be be added together in expressions, and are commutative and associative. $$ \\vec{u} + \\vec{v} = \\vec{v} + \\vec{u} \\ \\vec{u} + (\\vec{v}+\\vec{w}) = (\\vec{u}+\\vec{v})+\\vec{w} $$\nWhen multiplied by scalars, vector sums are also distributive $$ a(\\vec{v}+\\vec{w}) = a\\vec{v}+a\\vec{w} $$\nDot Product The dot product is defined by the expression $$ \\vec{v} \\cdot \\vec{w} \\triangleq \\left|\\vec{v}\\right|\\left|\\vec{w}\\right|\\cos{\\theta},\\label{eqn:vector_dot_product} $$\nwhere $\\left|\\vec{v}\\right|$ indicates the magnitude of vector $\\vec{v}$. The dot product has many uses. It can be used to determine the magnitude of a vector, as in $$ \\left|v\\right| = \\sqrt{\\vec{v} \\cdot \\vec{v}}. \\label{eq:vector_dot_product_magnitude}$$\nThe result of a dot product is a scalar number. Since scalar algebra is distributive and commutative, expressions using the dot product are also distributive and commutative. $$\\vec{u} \\cdot \\vec{v} = \\vec{v} \\cdot \\vec{u} \\ \\vec{u} \\cdot \\left(\\vec{v}+\\vec{w}\\right) = \\vec{u}\\cdot\\vec{v} + \\vec{u}\\cdot\\vec{w} \\label{eqn:vector_dot_distributive}$$\nCross Product The cross product is defined by the expression $$ \\vec{v} \\times \\vec{w} \\triangleq \\left|\\vec{v}\\right|\\left|\\vec{w}\\right|\\sin{\\theta}\\hat{u}, \\label{eqn:vector_cross_product}$$\nwhere $\\hat{u}$ is the unit vector orthogonal to $\\vec{v}$ and $\\vec{w}$, according to the right hand rule. Due to this definition, the cross product of $\\vec{w}\\times\\vec{v}$ will produce a vector equal in magnitude and opposite direction to $\\vec{v}\\times\\vec{w}$. Thus, the cross product can be said to be anticommutative. $$ \\vec{u} \\times \\vec{v} = -\\vec{v} \\times \\vec{u}$$ The cross product operator can also be distributed. $$ \\vec{u} \\times \\left(\\vec{v}+\\vec{w}\\right) = \\vec{u}\\times\\vec{v} + \\vec{u}\\times\\vec{w}$$\nExercises Using , write an expression for a vector $a$ whose magnitude along $\\hat{a}_x$ is 4, whose magnitude along $\\hat{a}_y$ is 7, and whose magnitude along $\\hat{a}_z$ is -3. Using , write an expression for a vector $b$ whose magnitude along $\\hat{a}_x$ is 1, whose magnitude along $\\hat{a}_y$ is 5, and whose magnitude along $\\hat{a}_z$ is -2. Using , expand the expression $\\vec{a}\\cdot\\vec{b}$, using the results of Look up the term orthogonal on google. What is the angle between two orthogonal vectors? What is the magnitude of an unit vector? Assuming $\\hat{a}_x$,$\\hat{a}_x$, and $\\hat{a}_x$ are orthogonal unit vectors, and using , supply the following: a) $\\hat{a}_x\\cdot\\hat{a}_x = ?$ b) $\\hat{a}_x\\cdot\\hat{a}_y = ?$ c) $\\hat{a}_x\\cdot\\hat{a}_z = ?$ d) $\\hat{a}_y\\cdot\\hat{a}_x = ?$ e) $\\hat{a}_y\\cdot\\hat{a}_y = ?$ f) $\\hat{a}_y\\cdot\\hat{a}_z = ?$ g) $\\hat{a}_z\\cdot\\hat{a}_x = ?$ h) $\\hat{a}_z\\cdot\\hat{a}_y = ?$ i) $\\hat{a}_z\\cdot\\hat{a}_z = ?$ Expanded basis vector forms If two vectors $\\vec{u}$ and $\\vec{v}$ can be expanded into component basis vectors $\\hat{a}_x$,$\\hat{a}_y$,and $\\hat{a}_z$ such that $$ \\vec{u}=u_x\\hat{a}_x + u_y\\hat{a}_y+u_z\\hat{a}_z \\text{ and}\\ \\vec{v}=v_x\\hat{a}_x + v_y\\hat{a}_y+v_z\\hat{a}_z,$$ can then be rewritten as $$ \\vec{v} \\cdot \\vec{w} = (u_x\\hat{a}_x + u_y\\hat{a}_y+u_z\\hat{a}_z) \\cdot (v_x\\hat{a}_x + v_y\\hat{a}_y+v_z\\hat{a}_z)$$\nwhich, using the distributive property equals $$ \\vec{v} \\cdot \\vec{w} = u_x\\hat{a}_x \\cdot v_x\\hat{a}_x + u_x\\hat{a}_x \\cdot v_y\\hat{a}_y + u_x\\hat{a}_x \\cdot v_z\\hat{a}_z + \\ u_y\\hat{a}_y \\cdot v_x\\hat{a}_x +u_y\\hat{a}_y \\cdot v_y\\hat{a}_y + u_y\\hat{a}_y \\cdot v_z\\hat{a}_z + \\nonumber\\ u_z\\hat{a}_z \\cdot v_x\\hat{a}_x +u_z\\hat{a}_z \\cdot v_y\\hat{a}_y +u_z\\hat{a}_z \\cdot v_z\\hat{a}_z \\nonumber$$\ngrouping scalars, $$ \\vec{v} \\cdot \\vec{w} = u_x v_x (\\hat{a}_x \\cdot \\hat{a}_x) + u_x v_y (\\hat{a}_x \\cdot \\hat{a}_y) + u_x v_z(\\hat{a}_x \\cdot \\hat{a}_z) + \\label{eqn:dot_product_basis_simplification1} \\ u_y v_x(\\hat{a}_y \\cdot \\hat{a}_x) +u_y v_y(\\hat{a}_y \\cdot \\hat{a}_y) + u_y v_z(\\hat{a}_y \\cdot \\hat{a}_z) + \\nonumber\\ u_z v_x(\\hat{a}_z \\cdot \\hat{a}_x) +u_z v_y(\\hat{a}_z \\cdot\\hat{a}_y) +u_z v_z(\\hat{a}_z \\cdot \\hat{a}_z) \\nonumber$$\nusing the definition of the dot product, we can see that the dot product of orthogonal basis unit vectors is equal to 0 while the dot product of a basis vector with itself is equal to 1. This can be summarized by $$ \\hat{a}_x\\cdot\\hat{a}_x = 1\\ \\hat{a}_x\\cdot\\hat{a}_y = 0\\ \\hat{a}_x\\cdot\\hat{a}_z = 0\\ \\hat{a}_y\\cdot\\hat{a}_x = 0\\ \\hat{a}_y\\cdot\\hat{a}_y = 1\\ \\hat{a}_y\\cdot\\hat{a}_z = 0\\ \\hat{a}_z\\cdot\\hat{a}_x = 0\\ \\hat{a}_z\\cdot\\hat{a}_y = 0\\ \\hat{a}_z\\cdot\\hat{a}_z = 1$$ This simplifies to $$ \\vec{v} \\cdot \\vec{w} = u_x v_x +u_y v_y+u_z v_z$$\nThe expression for the cross product can similarly be simplified. Given the same $\\vec{u}$ and $\\vec{v}$, can be rewritten as $$\\vec{v} \\times \\vec{w} = (u_x\\hat{a}_x + u_y\\hat{a}_y+u_z\\hat{a}_z) \\times (v_x\\hat{a}_x + v_y\\hat{a}_y+v_z\\hat{a}_z)$$ which, using the distributive property equals $$\\vec{v} \\times \\vec{w} = u_x\\hat{a}_x \\times v_x\\hat{a}_x + u_x\\hat{a}_x \\times v_y\\hat{a}_y + u_x\\hat{a}_x \\times v_z\\hat{a}_z + \\ u_y\\hat{a}_y \\times v_x\\hat{a}_x +u_y\\hat{a}_y \\times v_y\\hat{a}_y + u_y\\hat{a}_y \\times v_z\\hat{a}_z + \\nonumber\\ u_z\\hat{a}_z \\times v_x\\hat{a}_x +u_z\\hat{a}_z \\times v_y\\hat{a}_y +u_z\\hat{a}_z \\times v_z\\hat{a}_z \\nonumber$$\ngrouping scalars, $$\\vec{v} \\times \\vec{w} = u_x v_x (\\hat{a}_x \\times \\hat{a}_x) + u_x v_y (\\hat{a}_x \\times \\hat{a}_y) + u_x v_z(\\hat{a}_x \\times \\hat{a}_z) + \\label{eqn:cross_product_basis_simplification1}\\ u_y v_x(\\hat{a}_y \\times \\hat{a}_x) +u_y v_y(\\hat{a}_y \\times \\hat{a}_y) + u_y v_z(\\hat{a}_y \\times \\hat{a}_z) + \\nonumber\\ u_z v_x(\\hat{a}_z \\times \\hat{a}_x) +u_z v_y(\\hat{a}_z \\times\\hat{a}_y) +u_z v_z(\\hat{a}_z \\times \\hat{a}_z) \\nonumber$$\nusing the definition of the cross product, we can see that the cross product of orthogonal basis unit vectors produces an orthogonal unit vector to both according to the right hand rule, while the cross product of a basis vector with itself is equal to the zero vector. This can be summarized by $$\\hat{a}_x\\times\\hat{a}_x = \\vec{0}\\ \\hat{a}_x\\times\\hat{a}_y = \\hat{a}_z\\ \\hat{a}_x\\times\\hat{a}_z = -\\hat{a}_y\\ \\hat{a}_y\\times\\hat{a}_x = -\\hat{a}_z\\ \\hat{a}_y\\times\\hat{a}_y = \\vec{0}\\ \\hat{a}_y\\times\\hat{a}_z = \\hat{a}_x\\ \\hat{a}_z\\times\\hat{a}_x = \\hat{a}_y\\ \\hat{a}_z\\times\\hat{a}_y = -\\hat{a}_x\\ \\hat{a}_z\\times\\hat{a}_z = \\vec{0}$$ This simplifies to $$\\vec{v} \\times \\vec{w} = u_x v_y\\hat{a}_z - u_x v_z\\hat{a}_y - u_y v_x\\hat{a}_z + u_y v_z\\hat{a}_x + u_z v_x\\hat{a}_y - u_z v_y\\hat{a}_x$$\n","permalink":"https://foldable-robotics.github.io/modules/kinematics/vectors-and-vector-math/","tags":null,"title":"Vectors and Vector Math"},{"categories":null,"contents":"Introduction The purpose of this assignment is to update your team\u0026rsquo;s progress towards creating a public-facing, unified project report.\nRubric Description Action Points Main Page new Research Question new 25 Biomechanics new 25 Kinematics new 25 Presentations Add Presentation 1 25 Total 100 Instructions Please ensure each of the following assignments is posted and up-to-date. This is the time to re-evaluate each page to ensure that it matches any conclusions you have since come to since creating it the first time.\nPlease make sure the following pages are present and consistent:\nMain Page: Please ensure all new pages can be found. There are no separate points for this, but if we can\u0026rsquo;t find the individual page it will get a 0 Research Question Biomechanics Kinematics Presentations Note: Each assignment page should include its own citations within the text and a list of references at the bottom.\nSubmission Please include:\nA link to your team\u0026rsquo;s website A link to your team\u0026rsquo;s website repository on Github Ensure all links work. Ensure all code would work if someone downloaded your repository. Ensure images are visible. Please follow the posted submission instructions for website submissions.\n","permalink":"https://foldable-robotics.github.io/assignments/website-update-i/","tags":null,"title":"Website Update I"},{"categories":null,"contents":"Introduction The purpose of this assignment is to update your team\u0026rsquo;s progress towards creating a public-facing, unified project report.\nRubric Description Action Points Main Page Update Research Question update 20 Biomechanics update 20 Kinematics update 20 System Dynamics new Dynamics I new 40 System Identification Plan new 40 Presentations Add Presentation 2 20 Total 160 Instructions Please ensure each of the following assignments is posted and up-to-date. This is the time to re-evaluate each page to ensure that it matches any conclusions you have since come to since creating it the first time.\nPlease make sure the following pages are present and consistent:\nMain Page: Please ensure all new pages can be found. There are no separate points for this, but if we can\u0026rsquo;t find the individual page it will get a 0 Research Question (update) Biomechanics Background and Initial Specifications (update) System Kinematics (update) System Dynamics: Please integrate the following items together. You may keep them separate writeups or merge them into one longer page/document. (new) Dynamics I: Basic Kinematics and Constraints to make your mechanism work (new) Parameter Identification Plan: Describe the contribution of each team member (new) Presentations: Add Presentation II (update) Note: Each assignment page should include its own citations within the text and a list of references at the bottom.\nSubmission Please include:\nA link to your team\u0026rsquo;s website A link to your team\u0026rsquo;s website repository on Github Ensure all links work. Ensure all code would work if someone downloaded your repository. Ensure images are visible. Please follow the posted submission instructions for website submissions.\n","permalink":"https://foldable-robotics.github.io/assignments/website-update-ii/","tags":null,"title":"Website Update II"},{"categories":null,"contents":"Introduction The purpose of this assignment is to update your team\u0026rsquo;s progress towards creating a public-facing, unified project report.\nRubric Assignments Grade Consideration Points Main Page Update Research Question Update 20 Biomechanics Background \u0026amp; Specifications Update 20 Kinematics Update 20 Dynamics (I, Parameter ID Plan, Parameter ID, II) Update \u0026amp; New 40 Design Optimization, Experiment Design, Data Collection, and Analysis New 60 Manufacturing Planning New 40 Presentations Add Presentation 3 20 Data New 20 Gallery New 20 CAD New 20 Code New 20 Total 300 Instructions Please ensure each of the following assignments is posted and up-to-date. This is the time to re-evaluate each page to ensure that it matches any conclusions you have since come to since creating it the first time.\nPlease make sure the following pages are present and consistent with your final project:\nMain Page: Please ensure main page includes all team members, that all links to subpages work, and that there is a short summary of the work found within. Research Question (update) Biomechanics Background and Initial Specifications (update) System Kinematics (update) System Dynamics (update) Design Optimization, Experiment Design, Data Collection, and Analysis: Please integrate the following items together. You may keep them separate subpages for each writeup or merge them into one longer page/document. (new) You should include at least two separate research questions following this flow: Plan Design Optimization Experiment Design Data Collection Analysis Conclusions Manufacturing Planning (new) Presentations: Add Presentation III Note: Each assignment page should include its own citations within the text and a list of references at the bottom.\nAdditionally, please include several new pages:\nData - Create a page for sharing all raw data collected throughout the project that does not fit within any of the individual pages. Data should be included as separate files in your repository or a single zip of your project data. Video/Image Gallery - Please include any raw images/videos of prototypes, designs, experimental setups, etc that did not fit within a particular team assignment. Remember to upload images/videos to your repository or embed via youtube. CAD and other Design files - Put final versions of designs here. Make sure you upload a zip file of the design itself. Consider putting a screenshot of the design in here as well. Include intermediate files (dxfs) if they were modified by hand. Code - Create a page for sharing all code created throughout the project that does not fit within any of the individual pages. This may include: Extra python modules used across multiple assignments Microcontroller code used in your final robot (if applicable) Code for processing data Submission Please include:\nA link to your team\u0026rsquo;s website A link to your team\u0026rsquo;s website repository on Github Ensure all links work. Ensure all code would work if someone downloaded your repository. Ensure images are visible. Please follow the posted submission instructions for website submissions.\n","permalink":"https://foldable-robotics.github.io/assignments/website-update-iii/","tags":null,"title":"Website Update III"},{"categories":null,"contents":"Introduction The point of this tutorial is to show you how to add a compiled jupyter notebook to your website in a way that it can be viewed. There are two possible ways\nSave the compiled notebook (.ipynb) directly to your website and use a third party site to view content Export the compiled notebook to html or markdown and post to your website Both methods are relatively easy to do and neither is more preferable than the other.\nOption 1: Save the complied notebook directly Start Jupyter notebook by opening up a command terminal and typing jupyter notebook\nIn Jupyter notebook, load the notebook and select the \u0026ldquo;kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;restart and run all\u0026rdquo; menu item.\nSave the notebook, then select \u0026ldquo;file\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;close and halt\u0026rdquo;\nNavigate to your github repository and select the \u0026ldquo;files\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;upload files\u0026rdquo; menu item.\nSelect the .ipynb file, upload, and commit.\nCreate a special link to your file\nOpen up index.md or whatever file you would like to point to the new notebook from. Select edit\nAdd a new link. Remember, that links look like [link text](http://www.mycustomurl.com/path/to/file). In our case, the link will start with https://nbviewer.jupyter.org/url/ and end with the path to your file, danaukestest01.github.io/vectors.ipynb. The link text can be whatever you want it to be. So, for a full example, the whole link to an example file would look like this\n[link to vectors notebook](https://nbviewer.jupyter.org/url/danaukestest01.github.io/vectors.ipynb) Save and commit your changes to index.md\nNavigate to your website (myusername.github.io)\nTry out the new link.\nOption 2: Start Jupyter notebook by opening up a command terminal and typing jupyter notebook\nMake sure your notebook starts with a markdown header that looks like the following:\n--- title: this is a simple juptyer notebook --- In Jupyter notebook, load the notebook and select the \u0026ldquo;kernel\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;restart and run all\u0026rdquo; menu item.\nSelect \u0026ldquo;file\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;download as\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;markdown\u0026rdquo;. Save the file to disk when the option pops up.\nSave the notebook, then select \u0026ldquo;file\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;close and halt\u0026rdquo;\nUnzip the file that was downloaded (if necessary).\nNavigate to your github repository and select the \u0026ldquo;files\u0026rdquo; \u0026ndash;\u0026gt; \u0026ldquo;upload files\u0026rdquo; menu item.\nSelect the .md file as well as any other unzipped files (if applicable), upload, and commit.\nCreate a link to your file\nOpen up index.md or whatever file you would like to point to the new notebook from. Select edit\nAdd a new link. Remember, that markdown files get compiled for you to html files. Thus, if you name it \u0026ldquo;simple.md\u0026rdquo;, github will convert that to a folder titled \u0026ldquo;/simple\u0026rdquo;. The link text can be whatever you want it to be. So, for a full example, the whole link to an example file would look like this\n[link to simple markdown](/simple) Save and commit your changes to index.md\nNavigate to your website (myusername.github.io)\nTry out the new link.\n","permalink":"https://foldable-robotics.github.io/modules/project/jupyter-notebooks-in-websites/","tags":null,"title":"Working with Jupyter Notebooks in your website"}]